
STM32F103C8T6_BluetoothLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002764  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002870  08002870  00012870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028cc  080028cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028cc  080028cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028cc  080028cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028cc  080028cc  000128cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028d0  080028d0  000128d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  080028e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080028e0  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4ab  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a51  00000000  00000000  0002b4e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002cf38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  0002dab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014126  00000000  00000000  0002e560  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000842c  00000000  00000000  00042686  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070910  00000000  00000000  0004aab2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb3c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f80  00000000  00000000  000bb440  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002858 	.word	0x08002858

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002858 	.word	0x08002858

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 fb4a 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f82c 	bl	80001c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f8e8 	bl	800033c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800016c:	f000 f8bc 	bl	80002e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000170:	f000 f86c 	bl	800024c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 8000174:	20c8      	movs	r0, #200	; 0xc8
 8000176:	f000 fba1 	bl	80008bc <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 800017a:	2201      	movs	r2, #1
 800017c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000180:	480b      	ldr	r0, [pc, #44]	; (80001b0 <main+0x54>)
 8000182:	f000 fe9b 	bl	8000ebc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000186:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800018a:	f000 fb97 	bl	80008bc <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 800018e:	2232      	movs	r2, #50	; 0x32
 8000190:	2100      	movs	r1, #0
 8000192:	4808      	ldr	r0, [pc, #32]	; (80001b4 <main+0x58>)
 8000194:	f002 fb58 	bl	8002848 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 8000198:	4807      	ldr	r0, [pc, #28]	; (80001b8 <main+0x5c>)
 800019a:	f001 faee 	bl	800177a <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800019e:	4b07      	ldr	r3, [pc, #28]	; (80001bc <main+0x60>)
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	68da      	ldr	r2, [r3, #12]
 80001a4:	4b05      	ldr	r3, [pc, #20]	; (80001bc <main+0x60>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	f042 0220 	orr.w	r2, r2, #32
 80001ac:	60da      	str	r2, [r3, #12]
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001ae:	e7fe      	b.n	80001ae <main+0x52>
 80001b0:	40011000 	.word	0x40011000
 80001b4:	200000ac 	.word	0x200000ac
 80001b8:	2000002c 	.word	0x2000002c
 80001bc:	2000006c 	.word	0x2000006c

080001c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b090      	sub	sp, #64	; 0x40
 80001c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	2228      	movs	r2, #40	; 0x28
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f002 fb3a 	bl	8002848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e2:	2301      	movs	r3, #1
 80001e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f4:	2302      	movs	r3, #2
 80001f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000202:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000204:	f107 0318 	add.w	r3, r7, #24
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fe6f 	bl	8000eec <HAL_RCC_OscConfig>
 800020e:	4603      	mov	r3, r0
 8000210:	2b00      	cmp	r3, #0
 8000212:	d001      	beq.n	8000218 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000214:	f000 f8e4 	bl	80003e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000218:	230f      	movs	r3, #15
 800021a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021c:	2302      	movs	r3, #2
 800021e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000228:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800022a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2102      	movs	r1, #2
 8000234:	4618      	mov	r0, r3
 8000236:	f001 f8d9 	bl	80013ec <HAL_RCC_ClockConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000240:	f000 f8ce 	bl	80003e0 <Error_Handler>
  }
}
 8000244:	bf00      	nop
 8000246:	3740      	adds	r7, #64	; 0x40
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000252:	f107 0308 	add.w	r3, r7, #8
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000260:	463b      	mov	r3, r7
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000268:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <MX_TIM2_Init+0x98>)
 800026a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8000270:	4b1c      	ldr	r3, [pc, #112]	; (80002e4 <MX_TIM2_Init+0x98>)
 8000272:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000276:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000278:	4b1a      	ldr	r3, [pc, #104]	; (80002e4 <MX_TIM2_Init+0x98>)
 800027a:	2200      	movs	r2, #0
 800027c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800027e:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <MX_TIM2_Init+0x98>)
 8000280:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000284:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000286:	4b17      	ldr	r3, [pc, #92]	; (80002e4 <MX_TIM2_Init+0x98>)
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800028c:	4b15      	ldr	r3, [pc, #84]	; (80002e4 <MX_TIM2_Init+0x98>)
 800028e:	2200      	movs	r2, #0
 8000290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000292:	4814      	ldr	r0, [pc, #80]	; (80002e4 <MX_TIM2_Init+0x98>)
 8000294:	f001 fa46 	bl	8001724 <HAL_TIM_Base_Init>
 8000298:	4603      	mov	r3, r0
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800029e:	f000 f89f 	bl	80003e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002a8:	f107 0308 	add.w	r3, r7, #8
 80002ac:	4619      	mov	r1, r3
 80002ae:	480d      	ldr	r0, [pc, #52]	; (80002e4 <MX_TIM2_Init+0x98>)
 80002b0:	f001 fb8e 	bl	80019d0 <HAL_TIM_ConfigClockSource>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80002ba:	f000 f891 	bl	80003e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002be:	2300      	movs	r3, #0
 80002c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002c6:	463b      	mov	r3, r7
 80002c8:	4619      	mov	r1, r3
 80002ca:	4806      	ldr	r0, [pc, #24]	; (80002e4 <MX_TIM2_Init+0x98>)
 80002cc:	f001 fd5c 	bl	8001d88 <HAL_TIMEx_MasterConfigSynchronization>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80002d6:	f000 f883 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	3718      	adds	r7, #24
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	2000002c 	.word	0x2000002c

080002e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_USART2_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000320:	f001 fd88 	bl	8001e34 <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f859 	bl	80003e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	2000006c 	.word	0x2000006c
 8000338:	40004400 	.word	0x40004400

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b21      	ldr	r3, [pc, #132]	; (80003d8 <MX_GPIO_Init+0x9c>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a20      	ldr	r2, [pc, #128]	; (80003d8 <MX_GPIO_Init+0x9c>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <MX_GPIO_Init+0x9c>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <MX_GPIO_Init+0x9c>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a1a      	ldr	r2, [pc, #104]	; (80003d8 <MX_GPIO_Init+0x9c>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <MX_GPIO_Init+0x9c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <MX_GPIO_Init+0x9c>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a14      	ldr	r2, [pc, #80]	; (80003d8 <MX_GPIO_Init+0x9c>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_GPIO_Init+0x9c>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800039e:	480f      	ldr	r0, [pc, #60]	; (80003dc <MX_GPIO_Init+0xa0>)
 80003a0:	f000 fd8c 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003aa:	480c      	ldr	r0, [pc, #48]	; (80003dc <MX_GPIO_Init+0xa0>)
 80003ac:	f000 fd86 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BluetoothReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BluetoothReset_Pin;
 80003b0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003be:	2303      	movs	r3, #3
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	4804      	ldr	r0, [pc, #16]	; (80003dc <MX_GPIO_Init+0xa0>)
 80003ca:	f000 fc1d 	bl	8000c08 <HAL_GPIO_Init>

}
 80003ce:	bf00      	nop
 80003d0:	3720      	adds	r7, #32
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40011000 	.word	0x40011000

080003e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr

080003ec <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	4613      	mov	r3, r2
 80003f8:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 80003fa:	2300      	movs	r3, #0
 80003fc:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 80003fe:	2300      	movs	r3, #0
 8000400:	75bb      	strb	r3, [r7, #22]
 8000402:	e012      	b.n	800042a <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000404:	7dbb      	ldrb	r3, [r7, #22]
 8000406:	68fa      	ldr	r2, [r7, #12]
 8000408:	4413      	add	r3, r2
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	7dbb      	ldrb	r3, [r7, #22]
 800040e:	68b9      	ldr	r1, [r7, #8]
 8000410:	440b      	add	r3, r1
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	429a      	cmp	r2, r3
 8000416:	d103      	bne.n	8000420 <string_compare+0x34>
	   	  		  comVAR++;
 8000418:	7dfb      	ldrb	r3, [r7, #23]
 800041a:	3301      	adds	r3, #1
 800041c:	75fb      	strb	r3, [r7, #23]
 800041e:	e001      	b.n	8000424 <string_compare+0x38>
	   	  	  else comVAR=0;
 8000420:	2300      	movs	r3, #0
 8000422:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000424:	7dbb      	ldrb	r3, [r7, #22]
 8000426:	3301      	adds	r3, #1
 8000428:	75bb      	strb	r3, [r7, #22]
 800042a:	7dbb      	ldrb	r3, [r7, #22]
 800042c:	b29b      	uxth	r3, r3
 800042e:	88fa      	ldrh	r2, [r7, #6]
 8000430:	429a      	cmp	r2, r3
 8000432:	d8e7      	bhi.n	8000404 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000434:	7dfb      	ldrb	r3, [r7, #23]
 8000436:	b29b      	uxth	r3, r3
 8000438:	88fa      	ldrh	r2, [r7, #6]
 800043a:	429a      	cmp	r2, r3
 800043c:	d101      	bne.n	8000442 <string_compare+0x56>
		 	return 1;
 800043e:	2301      	movs	r3, #1
 8000440:	e000      	b.n	8000444 <string_compare+0x58>
	 else 	return 0;
 8000442:	2300      	movs	r3, #0
}
 8000444:	4618      	mov	r0, r3
 8000446:	371c      	adds	r7, #28
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
	...

08000450 <Message_handler>:

void Message_handler()
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000454:	2206      	movs	r2, #6
 8000456:	4927      	ldr	r1, [pc, #156]	; (80004f4 <Message_handler+0xa4>)
 8000458:	4827      	ldr	r0, [pc, #156]	; (80004f8 <Message_handler+0xa8>)
 800045a:	f7ff ffc7 	bl	80003ec <string_compare>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00d      	beq.n	8000480 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	4824      	ldr	r0, [pc, #144]	; (80004fc <Message_handler+0xac>)
 800046c:	f000 fd26 	bl	8000ebc <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000470:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000474:	220b      	movs	r2, #11
 8000476:	4922      	ldr	r1, [pc, #136]	; (8000500 <Message_handler+0xb0>)
 8000478:	4822      	ldr	r0, [pc, #136]	; (8000504 <Message_handler+0xb4>)
 800047a:	f001 fd28 	bl	8001ece <HAL_UART_Transmit>
 800047e:	e02c      	b.n	80004da <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000480:	2207      	movs	r2, #7
 8000482:	4921      	ldr	r1, [pc, #132]	; (8000508 <Message_handler+0xb8>)
 8000484:	481c      	ldr	r0, [pc, #112]	; (80004f8 <Message_handler+0xa8>)
 8000486:	f7ff ffb1 	bl	80003ec <string_compare>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d00d      	beq.n	80004ac <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000496:	4819      	ldr	r0, [pc, #100]	; (80004fc <Message_handler+0xac>)
 8000498:	f000 fd10 	bl	8000ebc <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 800049c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004a0:	220c      	movs	r2, #12
 80004a2:	491a      	ldr	r1, [pc, #104]	; (800050c <Message_handler+0xbc>)
 80004a4:	4817      	ldr	r0, [pc, #92]	; (8000504 <Message_handler+0xb4>)
 80004a6:	f001 fd12 	bl	8001ece <HAL_UART_Transmit>
 80004aa:	e016      	b.n	80004da <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 80004ac:	4812      	ldr	r0, [pc, #72]	; (80004f8 <Message_handler+0xa8>)
 80004ae:	f7ff fe4d 	bl	800014c <strlen>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b10      	ldr	r3, [pc, #64]	; (80004f8 <Message_handler+0xa8>)
 80004b8:	4413      	add	r3, r2
 80004ba:	4915      	ldr	r1, [pc, #84]	; (8000510 <Message_handler+0xc0>)
 80004bc:	461a      	mov	r2, r3
 80004be:	460b      	mov	r3, r1
 80004c0:	881b      	ldrh	r3, [r3, #0]
 80004c2:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <Message_handler+0xa8>)
 80004c6:	f7ff fe41 	bl	800014c <strlen>
 80004ca:	4603      	mov	r3, r0
 80004cc:	b29a      	uxth	r2, r3
 80004ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004d2:	4909      	ldr	r1, [pc, #36]	; (80004f8 <Message_handler+0xa8>)
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <Message_handler+0xb4>)
 80004d6:	f001 fcfa 	bl	8001ece <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 80004da:	2232      	movs	r2, #50	; 0x32
 80004dc:	2100      	movs	r1, #0
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <Message_handler+0xa8>)
 80004e0:	f002 f9b2 	bl	8002848 <memset>
	buffer_index = 0;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <Message_handler+0xc4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <Message_handler+0xc8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	701a      	strb	r2, [r3, #0]
}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	08002870 	.word	0x08002870
 80004f8:	200000ac 	.word	0x200000ac
 80004fc:	40011000 	.word	0x40011000
 8000500:	08002878 	.word	0x08002878
 8000504:	2000006c 	.word	0x2000006c
 8000508:	08002884 	.word	0x08002884
 800050c:	0800288c 	.word	0x0800288c
 8000510:	0800289c 	.word	0x0800289c
 8000514:	20000029 	.word	0x20000029
 8000518:	20000028 	.word	0x20000028

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000522:	4b15      	ldr	r3, [pc, #84]	; (8000578 <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	4a14      	ldr	r2, [pc, #80]	; (8000578 <HAL_MspInit+0x5c>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6193      	str	r3, [r2, #24]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_MspInit+0x5c>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <HAL_MspInit+0x5c>)
 8000540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000544:	61d3      	str	r3, [r2, #28]
 8000546:	4b0c      	ldr	r3, [pc, #48]	; (8000578 <HAL_MspInit+0x5c>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_MspInit+0x60>)
 8000554:	685b      	ldr	r3, [r3, #4]
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <HAL_MspInit+0x60>)
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056e:	bf00      	nop
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr
 8000578:	40021000 	.word	0x40021000
 800057c:	40010000 	.word	0x40010000

08000580 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000590:	d113      	bne.n	80005ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_TIM_Base_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <HAL_TIM_Base_MspInit+0x44>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_TIM_Base_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	201c      	movs	r0, #28
 80005b0:	f000 fa7d 	bl	8000aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005b4:	201c      	movs	r0, #28
 80005b6:	f000 fa96 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005ba:	bf00      	nop
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a1f      	ldr	r2, [pc, #124]	; (8000660 <HAL_UART_MspInit+0x98>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	d137      	bne.n	8000658 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <HAL_UART_MspInit+0x9c>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a1d      	ldr	r2, [pc, #116]	; (8000664 <HAL_UART_MspInit+0x9c>)
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	61d3      	str	r3, [r2, #28]
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <HAL_UART_MspInit+0x9c>)
 80005f6:	69db      	ldr	r3, [r3, #28]
 80005f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <HAL_UART_MspInit+0x9c>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a17      	ldr	r2, [pc, #92]	; (8000664 <HAL_UART_MspInit+0x9c>)
 8000606:	f043 0304 	orr.w	r3, r3, #4
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_UART_MspInit+0x9c>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0304 	and.w	r3, r3, #4
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000618:	2304      	movs	r3, #4
 800061a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000624:	f107 0310 	add.w	r3, r7, #16
 8000628:	4619      	mov	r1, r3
 800062a:	480f      	ldr	r0, [pc, #60]	; (8000668 <HAL_UART_MspInit+0xa0>)
 800062c:	f000 faec 	bl	8000c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000630:	2308      	movs	r3, #8
 8000632:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063c:	f107 0310 	add.w	r3, r7, #16
 8000640:	4619      	mov	r1, r3
 8000642:	4809      	ldr	r0, [pc, #36]	; (8000668 <HAL_UART_MspInit+0xa0>)
 8000644:	f000 fae0 	bl	8000c08 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000648:	2200      	movs	r2, #0
 800064a:	2100      	movs	r1, #0
 800064c:	2026      	movs	r0, #38	; 0x26
 800064e:	f000 fa2e 	bl	8000aae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000652:	2026      	movs	r0, #38	; 0x26
 8000654:	f000 fa47 	bl	8000ae6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000658:	bf00      	nop
 800065a:	3720      	adds	r7, #32
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40004400 	.word	0x40004400
 8000664:	40021000 	.word	0x40021000
 8000668:	40010800 	.word	0x40010800

0800066c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	bc80      	pop	{r7}
 8000676:	4770      	bx	lr

08000678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067c:	e7fe      	b.n	800067c <HardFault_Handler+0x4>

0800067e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <MemManage_Handler+0x4>

08000684 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <BusFault_Handler+0x4>

0800068a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <UsageFault_Handler+0x4>

08000690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr

0800069c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b8:	f000 f8e4 	bl	8000884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <TIM2_IRQHandler+0x30>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d005      	beq.n	80006d8 <TIM2_IRQHandler+0x18>
		timer_count++;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <TIM2_IRQHandler+0x34>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3301      	adds	r3, #1
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b07      	ldr	r3, [pc, #28]	; (80006f4 <TIM2_IRQHandler+0x34>)
 80006d6:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <TIM2_IRQHandler+0x34>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	2b05      	cmp	r3, #5
 80006de:	d901      	bls.n	80006e4 <TIM2_IRQHandler+0x24>
		Message_handler();
 80006e0:	f7ff feb6 	bl	8000450 <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <TIM2_IRQHandler+0x38>)
 80006e6:	f001 f86b 	bl	80017c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000ac 	.word	0x200000ac
 80006f4:	20000028 	.word	0x20000028
 80006f8:	2000002c 	.word	0x2000002c

080006fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <USART2_IRQHandler+0x3c>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	b2d1      	uxtb	r1, r2
 8000708:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <USART2_IRQHandler+0x3c>)
 800070a:	7011      	strb	r1, [r2, #0]
 800070c:	461a      	mov	r2, r3
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <USART2_IRQHandler+0x40>)
 8000710:	18d1      	adds	r1, r2, r3
 8000712:	230a      	movs	r3, #10
 8000714:	2201      	movs	r2, #1
 8000716:	480a      	ldr	r0, [pc, #40]	; (8000740 <USART2_IRQHandler+0x44>)
 8000718:	f001 fc72 	bl	8002000 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 800071c:	4b06      	ldr	r3, [pc, #24]	; (8000738 <USART2_IRQHandler+0x3c>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	3b01      	subs	r3, #1
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <USART2_IRQHandler+0x40>)
 8000724:	5cd3      	ldrb	r3, [r2, r3]
 8000726:	2b0a      	cmp	r3, #10
 8000728:	d101      	bne.n	800072e <USART2_IRQHandler+0x32>
		Message_handler();
 800072a:	f7ff fe91 	bl	8000450 <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800072e:	4804      	ldr	r0, [pc, #16]	; (8000740 <USART2_IRQHandler+0x44>)
 8000730:	f001 fd0c 	bl	800214c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000029 	.word	0x20000029
 800073c:	200000ac 	.word	0x200000ac
 8000740:	2000006c 	.word	0x2000006c

08000744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <SystemInit+0x5c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <SystemInit+0x5c>)
 800074e:	f043 0301 	orr.w	r3, r3, #1
 8000752:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <SystemInit+0x5c>)
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	4911      	ldr	r1, [pc, #68]	; (80007a0 <SystemInit+0x5c>)
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <SystemInit+0x60>)
 800075c:	4013      	ands	r3, r2
 800075e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000760:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <SystemInit+0x5c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <SystemInit+0x5c>)
 8000766:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800076a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800076e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000770:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <SystemInit+0x5c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a0a      	ldr	r2, [pc, #40]	; (80007a0 <SystemInit+0x5c>)
 8000776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <SystemInit+0x5c>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <SystemInit+0x5c>)
 8000782:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000786:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <SystemInit+0x5c>)
 800078a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800078e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SystemInit+0x64>)
 8000792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000796:	609a      	str	r2, [r3, #8]
#endif 
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr
 80007a0:	40021000 	.word	0x40021000
 80007a4:	f8ff0000 	.word	0xf8ff0000
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007ae:	e003      	b.n	80007b8 <LoopCopyDataInit>

080007b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007b6:	3104      	adds	r1, #4

080007b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007b8:	480a      	ldr	r0, [pc, #40]	; (80007e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007c0:	d3f6      	bcc.n	80007b0 <CopyDataInit>
  ldr r2, =_sbss
 80007c2:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007c4:	e002      	b.n	80007cc <LoopFillZerobss>

080007c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007c8:	f842 3b04 	str.w	r3, [r2], #4

080007cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007d0:	d3f9      	bcc.n	80007c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d2:	f7ff ffb7 	bl	8000744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007d6:	f002 f813 	bl	8002800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007da:	f7ff fcbf 	bl	800015c <main>
  bx lr
 80007de:	4770      	bx	lr
  ldr r3, =_sidata
 80007e0:	080028d4 	.word	0x080028d4
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007e8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80007ec:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80007f0:	200000e4 	.word	0x200000e4

080007f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f4:	e7fe      	b.n	80007f4 <ADC1_2_IRQHandler>
	...

080007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_Init+0x28>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_Init+0x28>)
 8000802:	f043 0310 	orr.w	r3, r3, #16
 8000806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000808:	2003      	movs	r0, #3
 800080a:	f000 f945 	bl	8000a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800080e:	2000      	movs	r0, #0
 8000810:	f000 f808 	bl	8000824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000814:	f7ff fe82 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40022000 	.word	0x40022000

08000824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_InitTick+0x54>)
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x58>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	fbb3 f3f1 	udiv	r3, r3, r1
 800083e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f95d 	bl	8000b02 <HAL_SYSTICK_Config>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e00e      	b.n	8000870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b0f      	cmp	r3, #15
 8000856:	d80a      	bhi.n	800086e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	6879      	ldr	r1, [r7, #4]
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 f925 	bl	8000aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <HAL_InitTick+0x5c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086a:	2300      	movs	r3, #0
 800086c:	e000      	b.n	8000870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000000 	.word	0x20000000
 800087c:	20000008 	.word	0x20000008
 8000880:	20000004 	.word	0x20000004

08000884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x1c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	461a      	mov	r2, r3
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x20>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4413      	add	r3, r2
 8000894:	4a03      	ldr	r2, [pc, #12]	; (80008a4 <HAL_IncTick+0x20>)
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	20000008 	.word	0x20000008
 80008a4:	200000e0 	.word	0x200000e0

080008a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return uwTick;
 80008ac:	4b02      	ldr	r3, [pc, #8]	; (80008b8 <HAL_GetTick+0x10>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	200000e0 	.word	0x200000e0

080008bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c4:	f7ff fff0 	bl	80008a8 <HAL_GetTick>
 80008c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d4:	d005      	beq.n	80008e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <HAL_Delay+0x40>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	4413      	add	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008e2:	bf00      	nop
 80008e4:	f7ff ffe0 	bl	80008a8 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	68fa      	ldr	r2, [r7, #12]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d8f7      	bhi.n	80008e4 <HAL_Delay+0x28>
  {
  }
}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000008 	.word	0x20000008

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4906      	ldr	r1, [pc, #24]	; (8000998 <__NVIC_EnableIRQ+0x34>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	e000e100 	.word	0xe000e100

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	db0a      	blt.n	80009c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	490c      	ldr	r1, [pc, #48]	; (80009e8 <__NVIC_SetPriority+0x4c>)
 80009b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ba:	0112      	lsls	r2, r2, #4
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	440b      	add	r3, r1
 80009c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c4:	e00a      	b.n	80009dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	4908      	ldr	r1, [pc, #32]	; (80009ec <__NVIC_SetPriority+0x50>)
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	3b04      	subs	r3, #4
 80009d4:	0112      	lsls	r2, r2, #4
 80009d6:	b2d2      	uxtb	r2, r2
 80009d8:	440b      	add	r3, r1
 80009da:	761a      	strb	r2, [r3, #24]
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000e100 	.word	0xe000e100
 80009ec:	e000ed00 	.word	0xe000ed00

080009f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b089      	sub	sp, #36	; 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	f1c3 0307 	rsb	r3, r3, #7
 8000a0a:	2b04      	cmp	r3, #4
 8000a0c:	bf28      	it	cs
 8000a0e:	2304      	movcs	r3, #4
 8000a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	3304      	adds	r3, #4
 8000a16:	2b06      	cmp	r3, #6
 8000a18:	d902      	bls.n	8000a20 <NVIC_EncodePriority+0x30>
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	3b03      	subs	r3, #3
 8000a1e:	e000      	b.n	8000a22 <NVIC_EncodePriority+0x32>
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	f04f 32ff 	mov.w	r2, #4294967295
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	43da      	mvns	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	401a      	ands	r2, r3
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a42:	43d9      	mvns	r1, r3
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a48:	4313      	orrs	r3, r2
         );
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3724      	adds	r7, #36	; 0x24
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr

08000a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	3b01      	subs	r3, #1
 8000a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a64:	d301      	bcc.n	8000a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00f      	b.n	8000a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <SysTick_Config+0x40>)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a72:	210f      	movs	r1, #15
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f7ff ff90 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <SysTick_Config+0x40>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a82:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SysTick_Config+0x40>)
 8000a84:	2207      	movs	r2, #7
 8000a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	e000e010 	.word	0xe000e010

08000a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff2d 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	60b9      	str	r1, [r7, #8]
 8000ab8:	607a      	str	r2, [r7, #4]
 8000aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac0:	f7ff ff42 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	6978      	ldr	r0, [r7, #20]
 8000acc:	f7ff ff90 	bl	80009f0 <NVIC_EncodePriority>
 8000ad0:	4602      	mov	r2, r0
 8000ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff5f 	bl	800099c <__NVIC_SetPriority>
}
 8000ade:	bf00      	nop
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	4603      	mov	r3, r0
 8000aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff35 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f7ff ffa2 	bl	8000a54 <SysTick_Config>
 8000b10:	4603      	mov	r3, r0
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
	...

08000b1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d005      	beq.n	8000b3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2204      	movs	r2, #4
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	73fb      	strb	r3, [r7, #15]
 8000b3c:	e051      	b.n	8000be2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f022 020e 	bic.w	r2, r2, #14
 8000b4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f022 0201 	bic.w	r2, r2, #1
 8000b5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a22      	ldr	r2, [pc, #136]	; (8000bec <HAL_DMA_Abort_IT+0xd0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d029      	beq.n	8000bbc <HAL_DMA_Abort_IT+0xa0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <HAL_DMA_Abort_IT+0xd4>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d022      	beq.n	8000bb8 <HAL_DMA_Abort_IT+0x9c>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a1f      	ldr	r2, [pc, #124]	; (8000bf4 <HAL_DMA_Abort_IT+0xd8>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d01a      	beq.n	8000bb2 <HAL_DMA_Abort_IT+0x96>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1d      	ldr	r2, [pc, #116]	; (8000bf8 <HAL_DMA_Abort_IT+0xdc>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d012      	beq.n	8000bac <HAL_DMA_Abort_IT+0x90>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <HAL_DMA_Abort_IT+0xe0>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d00a      	beq.n	8000ba6 <HAL_DMA_Abort_IT+0x8a>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1a      	ldr	r2, [pc, #104]	; (8000c00 <HAL_DMA_Abort_IT+0xe4>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d102      	bne.n	8000ba0 <HAL_DMA_Abort_IT+0x84>
 8000b9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b9e:	e00e      	b.n	8000bbe <HAL_DMA_Abort_IT+0xa2>
 8000ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ba4:	e00b      	b.n	8000bbe <HAL_DMA_Abort_IT+0xa2>
 8000ba6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000baa:	e008      	b.n	8000bbe <HAL_DMA_Abort_IT+0xa2>
 8000bac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb0:	e005      	b.n	8000bbe <HAL_DMA_Abort_IT+0xa2>
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	e002      	b.n	8000bbe <HAL_DMA_Abort_IT+0xa2>
 8000bb8:	2310      	movs	r3, #16
 8000bba:	e000      	b.n	8000bbe <HAL_DMA_Abort_IT+0xa2>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	4a11      	ldr	r2, [pc, #68]	; (8000c04 <HAL_DMA_Abort_IT+0xe8>)
 8000bc0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	4798      	blx	r3
    } 
  }
  return status;
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40020008 	.word	0x40020008
 8000bf0:	4002001c 	.word	0x4002001c
 8000bf4:	40020030 	.word	0x40020030
 8000bf8:	40020044 	.word	0x40020044
 8000bfc:	40020058 	.word	0x40020058
 8000c00:	4002006c 	.word	0x4002006c
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b08b      	sub	sp, #44	; 0x2c
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
 8000c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c12:	2300      	movs	r3, #0
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	e127      	b.n	8000e6c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	f040 8116 	bne.w	8000e66 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b12      	cmp	r3, #18
 8000c40:	d034      	beq.n	8000cac <HAL_GPIO_Init+0xa4>
 8000c42:	2b12      	cmp	r3, #18
 8000c44:	d80d      	bhi.n	8000c62 <HAL_GPIO_Init+0x5a>
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d02b      	beq.n	8000ca2 <HAL_GPIO_Init+0x9a>
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d804      	bhi.n	8000c58 <HAL_GPIO_Init+0x50>
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d031      	beq.n	8000cb6 <HAL_GPIO_Init+0xae>
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d01c      	beq.n	8000c90 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c56:	e048      	b.n	8000cea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c58:	2b03      	cmp	r3, #3
 8000c5a:	d043      	beq.n	8000ce4 <HAL_GPIO_Init+0xdc>
 8000c5c:	2b11      	cmp	r3, #17
 8000c5e:	d01b      	beq.n	8000c98 <HAL_GPIO_Init+0x90>
          break;
 8000c60:	e043      	b.n	8000cea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c62:	4a89      	ldr	r2, [pc, #548]	; (8000e88 <HAL_GPIO_Init+0x280>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d026      	beq.n	8000cb6 <HAL_GPIO_Init+0xae>
 8000c68:	4a87      	ldr	r2, [pc, #540]	; (8000e88 <HAL_GPIO_Init+0x280>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d806      	bhi.n	8000c7c <HAL_GPIO_Init+0x74>
 8000c6e:	4a87      	ldr	r2, [pc, #540]	; (8000e8c <HAL_GPIO_Init+0x284>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d020      	beq.n	8000cb6 <HAL_GPIO_Init+0xae>
 8000c74:	4a86      	ldr	r2, [pc, #536]	; (8000e90 <HAL_GPIO_Init+0x288>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d01d      	beq.n	8000cb6 <HAL_GPIO_Init+0xae>
          break;
 8000c7a:	e036      	b.n	8000cea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c7c:	4a85      	ldr	r2, [pc, #532]	; (8000e94 <HAL_GPIO_Init+0x28c>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d019      	beq.n	8000cb6 <HAL_GPIO_Init+0xae>
 8000c82:	4a85      	ldr	r2, [pc, #532]	; (8000e98 <HAL_GPIO_Init+0x290>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d016      	beq.n	8000cb6 <HAL_GPIO_Init+0xae>
 8000c88:	4a84      	ldr	r2, [pc, #528]	; (8000e9c <HAL_GPIO_Init+0x294>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d013      	beq.n	8000cb6 <HAL_GPIO_Init+0xae>
          break;
 8000c8e:	e02c      	b.n	8000cea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e028      	b.n	8000cea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	623b      	str	r3, [r7, #32]
          break;
 8000ca0:	e023      	b.n	8000cea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e01e      	b.n	8000cea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	330c      	adds	r3, #12
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e019      	b.n	8000cea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d102      	bne.n	8000cc4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	623b      	str	r3, [r7, #32]
          break;
 8000cc2:	e012      	b.n	8000cea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d105      	bne.n	8000cd8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	611a      	str	r2, [r3, #16]
          break;
 8000cd6:	e008      	b.n	8000cea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	615a      	str	r2, [r3, #20]
          break;
 8000ce2:	e002      	b.n	8000cea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	2bff      	cmp	r3, #255	; 0xff
 8000cee:	d801      	bhi.n	8000cf4 <HAL_GPIO_Init+0xec>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	e001      	b.n	8000cf8 <HAL_GPIO_Init+0xf0>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	2bff      	cmp	r3, #255	; 0xff
 8000cfe:	d802      	bhi.n	8000d06 <HAL_GPIO_Init+0xfe>
 8000d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	e002      	b.n	8000d0c <HAL_GPIO_Init+0x104>
 8000d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d08:	3b08      	subs	r3, #8
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	210f      	movs	r1, #15
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	6a39      	ldr	r1, [r7, #32]
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	431a      	orrs	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 8096 	beq.w	8000e66 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3a:	4b59      	ldr	r3, [pc, #356]	; (8000ea0 <HAL_GPIO_Init+0x298>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a58      	ldr	r2, [pc, #352]	; (8000ea0 <HAL_GPIO_Init+0x298>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b56      	ldr	r3, [pc, #344]	; (8000ea0 <HAL_GPIO_Init+0x298>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d52:	4a54      	ldr	r2, [pc, #336]	; (8000ea4 <HAL_GPIO_Init+0x29c>)
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	68fa      	ldr	r2, [r7, #12]
 8000d72:	4013      	ands	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <HAL_GPIO_Init+0x2a0>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d013      	beq.n	8000da6 <HAL_GPIO_Init+0x19e>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4a      	ldr	r2, [pc, #296]	; (8000eac <HAL_GPIO_Init+0x2a4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d00d      	beq.n	8000da2 <HAL_GPIO_Init+0x19a>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <HAL_GPIO_Init+0x2a8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d007      	beq.n	8000d9e <HAL_GPIO_Init+0x196>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a48      	ldr	r2, [pc, #288]	; (8000eb4 <HAL_GPIO_Init+0x2ac>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_GPIO_Init+0x192>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e006      	b.n	8000da8 <HAL_GPIO_Init+0x1a0>
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	e004      	b.n	8000da8 <HAL_GPIO_Init+0x1a0>
 8000d9e:	2302      	movs	r3, #2
 8000da0:	e002      	b.n	8000da8 <HAL_GPIO_Init+0x1a0>
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <HAL_GPIO_Init+0x1a0>
 8000da6:	2300      	movs	r3, #0
 8000da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000daa:	f002 0203 	and.w	r2, r2, #3
 8000dae:	0092      	lsls	r2, r2, #2
 8000db0:	4093      	lsls	r3, r2
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000db8:	493a      	ldr	r1, [pc, #232]	; (8000ea4 <HAL_GPIO_Init+0x29c>)
 8000dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbc:	089b      	lsrs	r3, r3, #2
 8000dbe:	3302      	adds	r3, #2
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d006      	beq.n	8000de0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000dd2:	4b39      	ldr	r3, [pc, #228]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	4938      	ldr	r1, [pc, #224]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	600b      	str	r3, [r1, #0]
 8000dde:	e006      	b.n	8000dee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	4933      	ldr	r1, [pc, #204]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d006      	beq.n	8000e08 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000dfa:	4b2f      	ldr	r3, [pc, #188]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	492e      	ldr	r1, [pc, #184]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	604b      	str	r3, [r1, #4]
 8000e06:	e006      	b.n	8000e16 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e0a:	685a      	ldr	r2, [r3, #4]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	4929      	ldr	r1, [pc, #164]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d006      	beq.n	8000e30 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e22:	4b25      	ldr	r3, [pc, #148]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e24:	689a      	ldr	r2, [r3, #8]
 8000e26:	4924      	ldr	r1, [pc, #144]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	608b      	str	r3, [r1, #8]
 8000e2e:	e006      	b.n	8000e3e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e32:	689a      	ldr	r2, [r3, #8]
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	43db      	mvns	r3, r3
 8000e38:	491f      	ldr	r1, [pc, #124]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d006      	beq.n	8000e58 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e4c:	68da      	ldr	r2, [r3, #12]
 8000e4e:	491a      	ldr	r1, [pc, #104]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	60cb      	str	r3, [r1, #12]
 8000e56:	e006      	b.n	8000e66 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e5a:	68da      	ldr	r2, [r3, #12]
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4915      	ldr	r1, [pc, #84]	; (8000eb8 <HAL_GPIO_Init+0x2b0>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e68:	3301      	adds	r3, #1
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	fa22 f303 	lsr.w	r3, r2, r3
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	f47f aed0 	bne.w	8000c1c <HAL_GPIO_Init+0x14>
  }
}
 8000e7c:	bf00      	nop
 8000e7e:	372c      	adds	r7, #44	; 0x2c
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	10210000 	.word	0x10210000
 8000e8c:	10110000 	.word	0x10110000
 8000e90:	10120000 	.word	0x10120000
 8000e94:	10310000 	.word	0x10310000
 8000e98:	10320000 	.word	0x10320000
 8000e9c:	10220000 	.word	0x10220000
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40010000 	.word	0x40010000
 8000ea8:	40010800 	.word	0x40010800
 8000eac:	40010c00 	.word	0x40010c00
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40011400 	.word	0x40011400
 8000eb8:	40010400 	.word	0x40010400

08000ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ecc:	787b      	ldrb	r3, [r7, #1]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ed8:	e003      	b.n	8000ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	041a      	lsls	r2, r3, #16
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	611a      	str	r2, [r3, #16]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e26c      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 8087 	beq.w	800101a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f0c:	4b92      	ldr	r3, [pc, #584]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d00c      	beq.n	8000f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f18:	4b8f      	ldr	r3, [pc, #572]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d112      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5e>
 8000f24:	4b8c      	ldr	r3, [pc, #560]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d10b      	bne.n	8000f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f32:	4b89      	ldr	r3, [pc, #548]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d06c      	beq.n	8001018 <HAL_RCC_OscConfig+0x12c>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d168      	bne.n	8001018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e246      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f52:	d106      	bne.n	8000f62 <HAL_RCC_OscConfig+0x76>
 8000f54:	4b80      	ldr	r3, [pc, #512]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a7f      	ldr	r2, [pc, #508]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	e02e      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d10c      	bne.n	8000f84 <HAL_RCC_OscConfig+0x98>
 8000f6a:	4b7b      	ldr	r3, [pc, #492]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a7a      	ldr	r2, [pc, #488]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	4b78      	ldr	r3, [pc, #480]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a77      	ldr	r2, [pc, #476]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	e01d      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8c:	d10c      	bne.n	8000fa8 <HAL_RCC_OscConfig+0xbc>
 8000f8e:	4b72      	ldr	r3, [pc, #456]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a71      	ldr	r2, [pc, #452]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b6f      	ldr	r3, [pc, #444]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a6e      	ldr	r2, [pc, #440]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	e00b      	b.n	8000fc0 <HAL_RCC_OscConfig+0xd4>
 8000fa8:	4b6b      	ldr	r3, [pc, #428]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a6a      	ldr	r2, [pc, #424]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	4b68      	ldr	r3, [pc, #416]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a67      	ldr	r2, [pc, #412]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d013      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc8:	f7ff fc6e 	bl	80008a8 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fd0:	f7ff fc6a 	bl	80008a8 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b64      	cmp	r3, #100	; 0x64
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e1fa      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe2:	4b5d      	ldr	r3, [pc, #372]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0xe4>
 8000fee:	e014      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fc5a 	bl	80008a8 <HAL_GetTick>
 8000ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fc56 	bl	80008a8 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b64      	cmp	r3, #100	; 0x64
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e1e6      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100a:	4b53      	ldr	r3, [pc, #332]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x10c>
 8001016:	e000      	b.n	800101a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d063      	beq.n	80010ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001026:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 030c 	and.w	r3, r3, #12
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00b      	beq.n	800104a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001032:	4b49      	ldr	r3, [pc, #292]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 030c 	and.w	r3, r3, #12
 800103a:	2b08      	cmp	r3, #8
 800103c:	d11c      	bne.n	8001078 <HAL_RCC_OscConfig+0x18c>
 800103e:	4b46      	ldr	r3, [pc, #280]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d116      	bne.n	8001078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104a:	4b43      	ldr	r3, [pc, #268]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <HAL_RCC_OscConfig+0x176>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d001      	beq.n	8001062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e1ba      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001062:	4b3d      	ldr	r3, [pc, #244]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	00db      	lsls	r3, r3, #3
 8001070:	4939      	ldr	r1, [pc, #228]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	e03a      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_RCC_OscConfig+0x270>)
 8001082:	2201      	movs	r2, #1
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fc0f 	bl	80008a8 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fc0b 	bl	80008a8 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e19b      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a0:	4b2d      	ldr	r3, [pc, #180]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	695b      	ldr	r3, [r3, #20]
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	4927      	ldr	r1, [pc, #156]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e015      	b.n	80010ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010c2:	4b26      	ldr	r3, [pc, #152]	; (800115c <HAL_RCC_OscConfig+0x270>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fbee 	bl	80008a8 <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010d0:	f7ff fbea 	bl	80008a8 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e17a      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e2:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d03a      	beq.n	8001170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d019      	beq.n	8001136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001102:	4b17      	ldr	r3, [pc, #92]	; (8001160 <HAL_RCC_OscConfig+0x274>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001108:	f7ff fbce 	bl	80008a8 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001110:	f7ff fbca 	bl	80008a8 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e15a      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <HAL_RCC_OscConfig+0x26c>)
 8001124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d0f0      	beq.n	8001110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800112e:	2001      	movs	r0, #1
 8001130:	f000 fada 	bl	80016e8 <RCC_Delay>
 8001134:	e01c      	b.n	8001170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_RCC_OscConfig+0x274>)
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fbb4 	bl	80008a8 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001142:	e00f      	b.n	8001164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001144:	f7ff fbb0 	bl	80008a8 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b02      	cmp	r3, #2
 8001150:	d908      	bls.n	8001164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e140      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	42420000 	.word	0x42420000
 8001160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001164:	4b9e      	ldr	r3, [pc, #632]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1e9      	bne.n	8001144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0304 	and.w	r3, r3, #4
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 80a6 	beq.w	80012ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001182:	4b97      	ldr	r3, [pc, #604]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001184:	69db      	ldr	r3, [r3, #28]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10d      	bne.n	80011aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800118e:	4b94      	ldr	r3, [pc, #592]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a93      	ldr	r2, [pc, #588]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011a6:	2301      	movs	r3, #1
 80011a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011aa:	4b8e      	ldr	r3, [pc, #568]	; (80013e4 <HAL_RCC_OscConfig+0x4f8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011b6:	4b8b      	ldr	r3, [pc, #556]	; (80013e4 <HAL_RCC_OscConfig+0x4f8>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a8a      	ldr	r2, [pc, #552]	; (80013e4 <HAL_RCC_OscConfig+0x4f8>)
 80011bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c2:	f7ff fb71 	bl	80008a8 <HAL_GetTick>
 80011c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c8:	e008      	b.n	80011dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ca:	f7ff fb6d 	bl	80008a8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b64      	cmp	r3, #100	; 0x64
 80011d6:	d901      	bls.n	80011dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e0fd      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	4b81      	ldr	r3, [pc, #516]	; (80013e4 <HAL_RCC_OscConfig+0x4f8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f0      	beq.n	80011ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d106      	bne.n	80011fe <HAL_RCC_OscConfig+0x312>
 80011f0:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a7a      	ldr	r2, [pc, #488]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	e02d      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0x334>
 8001206:	4b76      	ldr	r3, [pc, #472]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a75      	ldr	r2, [pc, #468]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6213      	str	r3, [r2, #32]
 8001212:	4b73      	ldr	r3, [pc, #460]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001218:	f023 0304 	bic.w	r3, r3, #4
 800121c:	6213      	str	r3, [r2, #32]
 800121e:	e01c      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b05      	cmp	r3, #5
 8001226:	d10c      	bne.n	8001242 <HAL_RCC_OscConfig+0x356>
 8001228:	4b6d      	ldr	r3, [pc, #436]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4a6c      	ldr	r2, [pc, #432]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6213      	str	r3, [r2, #32]
 8001234:	4b6a      	ldr	r3, [pc, #424]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001236:	6a1b      	ldr	r3, [r3, #32]
 8001238:	4a69      	ldr	r2, [pc, #420]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	6213      	str	r3, [r2, #32]
 8001240:	e00b      	b.n	800125a <HAL_RCC_OscConfig+0x36e>
 8001242:	4b67      	ldr	r3, [pc, #412]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001244:	6a1b      	ldr	r3, [r3, #32]
 8001246:	4a66      	ldr	r2, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	6213      	str	r3, [r2, #32]
 800124e:	4b64      	ldr	r3, [pc, #400]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	4a63      	ldr	r2, [pc, #396]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d015      	beq.n	800128e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001262:	f7ff fb21 	bl	80008a8 <HAL_GetTick>
 8001266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001268:	e00a      	b.n	8001280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800126a:	f7ff fb1d 	bl	80008a8 <HAL_GetTick>
 800126e:	4602      	mov	r2, r0
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	f241 3288 	movw	r2, #5000	; 0x1388
 8001278:	4293      	cmp	r3, r2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e0ab      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0ee      	beq.n	800126a <HAL_RCC_OscConfig+0x37e>
 800128c:	e014      	b.n	80012b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128e:	f7ff fb0b 	bl	80008a8 <HAL_GetTick>
 8001292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001294:	e00a      	b.n	80012ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f7ff fb07 	bl	80008a8 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e095      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ac:	4b4c      	ldr	r3, [pc, #304]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ee      	bne.n	8001296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d105      	bne.n	80012ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012be:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a47      	ldr	r2, [pc, #284]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80012c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69db      	ldr	r3, [r3, #28]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 8081 	beq.w	80013d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012d4:	4b42      	ldr	r3, [pc, #264]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 030c 	and.w	r3, r3, #12
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d061      	beq.n	80013a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	69db      	ldr	r3, [r3, #28]
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d146      	bne.n	8001376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012e8:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <HAL_RCC_OscConfig+0x4fc>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ee:	f7ff fadb 	bl	80008a8 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f6:	f7ff fad7 	bl	80008a8 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e067      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001308:	4b35      	ldr	r3, [pc, #212]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f0      	bne.n	80012f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800131c:	d108      	bne.n	8001330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	492d      	ldr	r1, [pc, #180]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a19      	ldr	r1, [r3, #32]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001340:	430b      	orrs	r3, r1
 8001342:	4927      	ldr	r1, [pc, #156]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_RCC_OscConfig+0x4fc>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff faab 	bl	80008a8 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff faa7 	bl	80008a8 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e037      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x46a>
 8001374:	e02f      	b.n	80013d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <HAL_RCC_OscConfig+0x4fc>)
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fa94 	bl	80008a8 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001384:	f7ff fa90 	bl	80008a8 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e020      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x498>
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69db      	ldr	r3, [r3, #28]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d101      	bne.n	80013b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e013      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40007000 	.word	0x40007000
 80013e8:	42420060 	.word	0x42420060

080013ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d101      	bne.n	8001400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e0d0      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001400:	4b6a      	ldr	r3, [pc, #424]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d910      	bls.n	8001430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140e:	4b67      	ldr	r3, [pc, #412]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 0207 	bic.w	r2, r3, #7
 8001416:	4965      	ldr	r1, [pc, #404]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b63      	ldr	r3, [pc, #396]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e0b8      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d020      	beq.n	800147e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001448:	4b59      	ldr	r3, [pc, #356]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a58      	ldr	r2, [pc, #352]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800144e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001452:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0308 	and.w	r3, r3, #8
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001460:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001466:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800146a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800146c:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	494d      	ldr	r1, [pc, #308]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800147a:	4313      	orrs	r3, r2
 800147c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d040      	beq.n	800150c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001492:	4b47      	ldr	r3, [pc, #284]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d115      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e07f      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d107      	bne.n	80014ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014aa:	4b41      	ldr	r3, [pc, #260]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d109      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e073      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e06b      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ca:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f023 0203 	bic.w	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	4936      	ldr	r1, [pc, #216]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014dc:	f7ff f9e4 	bl	80008a8 <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7ff f9e0 	bl	80008a8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e053      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 020c 	and.w	r2, r3, #12
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	429a      	cmp	r2, r3
 800150a:	d1eb      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d210      	bcs.n	800153c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 0207 	bic.w	r2, r3, #7
 8001522:	4922      	ldr	r1, [pc, #136]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e032      	b.n	80015a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4916      	ldr	r1, [pc, #88]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d009      	beq.n	800157a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691b      	ldr	r3, [r3, #16]
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	490e      	ldr	r1, [pc, #56]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800157a:	f000 f821 	bl	80015c0 <HAL_RCC_GetSysClockFreq>
 800157e:	4601      	mov	r1, r0
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	091b      	lsrs	r3, r3, #4
 8001586:	f003 030f 	and.w	r3, r3, #15
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_RCC_ClockConfig+0x1c8>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	fa21 f303 	lsr.w	r3, r1, r3
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001594:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_RCC_ClockConfig+0x1d0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff f942 	bl	8000824 <HAL_InitTick>

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40022000 	.word	0x40022000
 80015b0:	40021000 	.word	0x40021000
 80015b4:	080028b4 	.word	0x080028b4
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c0:	b490      	push	{r4, r7}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015c8:	1d3c      	adds	r4, r7, #4
 80015ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	2300      	movs	r3, #0
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015ea:	4b23      	ldr	r3, [pc, #140]	; (8001678 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	f003 030c 	and.w	r3, r3, #12
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d002      	beq.n	8001600 <HAL_RCC_GetSysClockFreq+0x40>
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d003      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x46>
 80015fe:	e02d      	b.n	800165c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001602:	623b      	str	r3, [r7, #32]
      break;
 8001604:	e02d      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	0c9b      	lsrs	r3, r3, #18
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001612:	4413      	add	r3, r2
 8001614:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001618:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d013      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	0c5b      	lsrs	r3, r3, #17
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001632:	4413      	add	r3, r2
 8001634:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001638:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4a0f      	ldr	r2, [pc, #60]	; (800167c <HAL_RCC_GetSysClockFreq+0xbc>)
 800163e:	fb02 f203 	mul.w	r2, r2, r3
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
 800164a:	e004      	b.n	8001656 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4a0c      	ldr	r2, [pc, #48]	; (8001680 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	623b      	str	r3, [r7, #32]
      break;
 800165a:	e002      	b.n	8001662 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <HAL_RCC_GetSysClockFreq+0xbc>)
 800165e:	623b      	str	r3, [r7, #32]
      break;
 8001660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001662:	6a3b      	ldr	r3, [r7, #32]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bc90      	pop	{r4, r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	080028a0 	.word	0x080028a0
 8001674:	080028b0 	.word	0x080028b0
 8001678:	40021000 	.word	0x40021000
 800167c:	007a1200 	.word	0x007a1200
 8001680:	003d0900 	.word	0x003d0900

08001684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001688:	4b02      	ldr	r3, [pc, #8]	; (8001694 <HAL_RCC_GetHCLKFreq+0x10>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr
 8001694:	20000000 	.word	0x20000000

08001698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800169c:	f7ff fff2 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016a0:	4601      	mov	r1, r0
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	0a1b      	lsrs	r3, r3, #8
 80016a8:	f003 0307 	and.w	r3, r3, #7
 80016ac:	4a03      	ldr	r2, [pc, #12]	; (80016bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	080028c4 	.word	0x080028c4

080016c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016c4:	f7ff ffde 	bl	8001684 <HAL_RCC_GetHCLKFreq>
 80016c8:	4601      	mov	r1, r0
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	0adb      	lsrs	r3, r3, #11
 80016d0:	f003 0307 	and.w	r3, r3, #7
 80016d4:	4a03      	ldr	r2, [pc, #12]	; (80016e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016d6:	5cd3      	ldrb	r3, [r2, r3]
 80016d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80016dc:	4618      	mov	r0, r3
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	080028c4 	.word	0x080028c4

080016e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <RCC_Delay+0x34>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <RCC_Delay+0x38>)
 80016f6:	fba2 2303 	umull	r2, r3, r2, r3
 80016fa:	0a5b      	lsrs	r3, r3, #9
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001704:	bf00      	nop
  }
  while (Delay --);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	60fa      	str	r2, [r7, #12]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f9      	bne.n	8001704 <RCC_Delay+0x1c>
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000000 	.word	0x20000000
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e01d      	b.n	8001772 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800173c:	b2db      	uxtb	r3, r3
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7fe ff18 	bl	8000580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3304      	adds	r3, #4
 8001760:	4619      	mov	r1, r3
 8001762:	4610      	mov	r0, r2
 8001764:	f000 fa18 	bl	8001b98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800177a:	b480      	push	{r7}
 800177c:	b085      	sub	sp, #20
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68da      	ldr	r2, [r3, #12]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0201 	orr.w	r2, r2, #1
 8001790:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b06      	cmp	r3, #6
 80017a2:	d007      	beq.n	80017b4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3714      	adds	r7, #20
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d122      	bne.n	800181c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d11b      	bne.n	800181c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f06f 0202 	mvn.w	r2, #2
 80017ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2201      	movs	r2, #1
 80017f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f9ad 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 8001808:	e005      	b.n	8001816 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f9a0 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f9af 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	2b04      	cmp	r3, #4
 8001828:	d122      	bne.n	8001870 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b04      	cmp	r3, #4
 8001836:	d11b      	bne.n	8001870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f06f 0204 	mvn.w	r2, #4
 8001840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f983 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 800185c:	e005      	b.n	800186a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f976 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f985 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b08      	cmp	r3, #8
 800187c:	d122      	bne.n	80018c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b08      	cmp	r3, #8
 800188a:	d11b      	bne.n	80018c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f06f 0208 	mvn.w	r2, #8
 8001894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2204      	movs	r2, #4
 800189a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f959 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 80018b0:	e005      	b.n	80018be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f94c 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f95b 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2200      	movs	r2, #0
 80018c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d122      	bne.n	8001918 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0310 	and.w	r3, r3, #16
 80018dc:	2b10      	cmp	r3, #16
 80018de:	d11b      	bne.n	8001918 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f06f 0210 	mvn.w	r2, #16
 80018e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2208      	movs	r2, #8
 80018ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f000 f92f 	bl	8001b62 <HAL_TIM_IC_CaptureCallback>
 8001904:	e005      	b.n	8001912 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f922 	bl	8001b50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f931 	bl	8001b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d10e      	bne.n	8001944 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f06f 0201 	mvn.w	r2, #1
 800193c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f8fd 	bl	8001b3e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	2b80      	cmp	r3, #128	; 0x80
 8001950:	d10e      	bne.n	8001970 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800195c:	2b80      	cmp	r3, #128	; 0x80
 800195e:	d107      	bne.n	8001970 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f000 fa59 	bl	8001e22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	2b40      	cmp	r3, #64	; 0x40
 800197c:	d10e      	bne.n	800199c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001988:	2b40      	cmp	r3, #64	; 0x40
 800198a:	d107      	bne.n	800199c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8f5 	bl	8001b86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	f003 0320 	and.w	r3, r3, #32
 80019a6:	2b20      	cmp	r3, #32
 80019a8:	d10e      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0320 	and.w	r3, r3, #32
 80019b4:	2b20      	cmp	r3, #32
 80019b6:	d107      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0220 	mvn.w	r2, #32
 80019c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f000 fa24 	bl	8001e10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_TIM_ConfigClockSource+0x18>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0a6      	b.n	8001b36 <HAL_TIM_ConfigClockSource+0x166>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001a06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001a0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b40      	cmp	r3, #64	; 0x40
 8001a1e:	d067      	beq.n	8001af0 <HAL_TIM_ConfigClockSource+0x120>
 8001a20:	2b40      	cmp	r3, #64	; 0x40
 8001a22:	d80b      	bhi.n	8001a3c <HAL_TIM_ConfigClockSource+0x6c>
 8001a24:	2b10      	cmp	r3, #16
 8001a26:	d073      	beq.n	8001b10 <HAL_TIM_ConfigClockSource+0x140>
 8001a28:	2b10      	cmp	r3, #16
 8001a2a:	d802      	bhi.n	8001a32 <HAL_TIM_ConfigClockSource+0x62>
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d06f      	beq.n	8001b10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001a30:	e078      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	d06c      	beq.n	8001b10 <HAL_TIM_ConfigClockSource+0x140>
 8001a36:	2b30      	cmp	r3, #48	; 0x30
 8001a38:	d06a      	beq.n	8001b10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001a3a:	e073      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a3c:	2b70      	cmp	r3, #112	; 0x70
 8001a3e:	d00d      	beq.n	8001a5c <HAL_TIM_ConfigClockSource+0x8c>
 8001a40:	2b70      	cmp	r3, #112	; 0x70
 8001a42:	d804      	bhi.n	8001a4e <HAL_TIM_ConfigClockSource+0x7e>
 8001a44:	2b50      	cmp	r3, #80	; 0x50
 8001a46:	d033      	beq.n	8001ab0 <HAL_TIM_ConfigClockSource+0xe0>
 8001a48:	2b60      	cmp	r3, #96	; 0x60
 8001a4a:	d041      	beq.n	8001ad0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001a4c:	e06a      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a52:	d066      	beq.n	8001b22 <HAL_TIM_ConfigClockSource+0x152>
 8001a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a58:	d017      	beq.n	8001a8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001a5a:	e063      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6899      	ldr	r1, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	f000 f96d 	bl	8001d4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001a7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	609a      	str	r2, [r3, #8]
      break;
 8001a88:	e04c      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6899      	ldr	r1, [r3, #8]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f000 f956 	bl	8001d4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001aac:	609a      	str	r2, [r3, #8]
      break;
 8001aae:	e039      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	461a      	mov	r2, r3
 8001abe:	f000 f8cd 	bl	8001c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2150      	movs	r1, #80	; 0x50
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f924 	bl	8001d16 <TIM_ITRx_SetConfig>
      break;
 8001ace:	e029      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6859      	ldr	r1, [r3, #4]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f000 f8eb 	bl	8001cb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2160      	movs	r1, #96	; 0x60
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f914 	bl	8001d16 <TIM_ITRx_SetConfig>
      break;
 8001aee:	e019      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	461a      	mov	r2, r3
 8001afe:	f000 f8ad 	bl	8001c5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2140      	movs	r1, #64	; 0x40
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f000 f904 	bl	8001d16 <TIM_ITRx_SetConfig>
      break;
 8001b0e:	e009      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 f8fb 	bl	8001d16 <TIM_ITRx_SetConfig>
      break;
 8001b20:	e000      	b.n	8001b24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr

08001b62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b7c:	bf00      	nop
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr

08001b86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr

08001b98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <TIM_Base_SetConfig+0xb8>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00b      	beq.n	8001bc8 <TIM_Base_SetConfig+0x30>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bb6:	d007      	beq.n	8001bc8 <TIM_Base_SetConfig+0x30>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <TIM_Base_SetConfig+0xbc>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d003      	beq.n	8001bc8 <TIM_Base_SetConfig+0x30>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <TIM_Base_SetConfig+0xc0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d108      	bne.n	8001bda <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	68fa      	ldr	r2, [r7, #12]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <TIM_Base_SetConfig+0xb8>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d00b      	beq.n	8001bfa <TIM_Base_SetConfig+0x62>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be8:	d007      	beq.n	8001bfa <TIM_Base_SetConfig+0x62>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <TIM_Base_SetConfig+0xbc>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <TIM_Base_SetConfig+0x62>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <TIM_Base_SetConfig+0xc0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d108      	bne.n	8001c0c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a07      	ldr	r2, [pc, #28]	; (8001c50 <TIM_Base_SetConfig+0xb8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d103      	bne.n	8001c40 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	615a      	str	r2, [r3, #20]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800

08001c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	f023 0201 	bic.w	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f023 030a 	bic.w	r3, r3, #10
 8001c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	621a      	str	r2, [r3, #32]
}
 8001cae:	bf00      	nop
 8001cb0:	371c      	adds	r7, #28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f023 0210 	bic.w	r2, r3, #16
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001ce2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	031b      	lsls	r3, r3, #12
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001cf4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	621a      	str	r2, [r3, #32]
}
 8001d0c:	bf00      	nop
 8001d0e:	371c      	adds	r7, #28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	f043 0307 	orr.w	r3, r3, #7
 8001d38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	609a      	str	r2, [r3, #8]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	b087      	sub	sp, #28
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	021a      	lsls	r2, r3, #8
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	bf00      	nop
 8001d80:	371c      	adds	r7, #28
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e032      	b.n	8001e06 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2202      	movs	r2, #2
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001dc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dd8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr

08001e34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e03f      	b.n	8001ec6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fbb4 	bl	80005c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	; 0x24
 8001e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fbe7 	bl	800264c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691a      	ldr	r2, [r3, #16]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001eac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b088      	sub	sp, #32
 8001ed2:	af02      	add	r7, sp, #8
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	4613      	mov	r3, r2
 8001edc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	f040 8083 	bne.w	8001ff6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_UART_Transmit+0x2e>
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e07b      	b.n	8001ff8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_UART_Transmit+0x40>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e074      	b.n	8001ff8 <HAL_UART_Transmit+0x12a>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2221      	movs	r2, #33	; 0x21
 8001f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f24:	f7fe fcc0 	bl	80008a8 <HAL_GetTick>
 8001f28:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	88fa      	ldrh	r2, [r7, #6]
 8001f2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	88fa      	ldrh	r2, [r7, #6]
 8001f34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f36:	e042      	b.n	8001fbe <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f4e:	d122      	bne.n	8001f96 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	2200      	movs	r2, #0
 8001f58:	2180      	movs	r1, #128	; 0x80
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 fa0d 	bl	800237a <UART_WaitOnFlagUntilTimeout>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e046      	b.n	8001ff8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f7c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3302      	adds	r3, #2
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	e017      	b.n	8001fbe <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3301      	adds	r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	e013      	b.n	8001fbe <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2180      	movs	r1, #128	; 0x80
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f9ea 	bl	800237a <UART_WaitOnFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e023      	b.n	8001ff8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	1c5a      	adds	r2, r3, #1
 8001fb4:	60ba      	str	r2, [r7, #8]
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1b7      	bne.n	8001f38 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2140      	movs	r1, #64	; 0x40
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f9d1 	bl	800237a <UART_WaitOnFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e00a      	b.n	8001ff8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e000      	b.n	8001ff8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
  }
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af02      	add	r7, sp, #8
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	603b      	str	r3, [r7, #0]
 800200c:	4613      	mov	r3, r2
 800200e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b20      	cmp	r3, #32
 800201e:	f040 8090 	bne.w	8002142 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_UART_Receive+0x2e>
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e088      	b.n	8002144 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_UART_Receive+0x40>
 800203c:	2302      	movs	r3, #2
 800203e:	e081      	b.n	8002144 <HAL_UART_Receive+0x144>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2222      	movs	r2, #34	; 0x22
 8002052:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002056:	f7fe fc27 	bl	80008a8 <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	88fa      	ldrh	r2, [r7, #6]
 8002060:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	88fa      	ldrh	r2, [r7, #6]
 8002066:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002068:	e05c      	b.n	8002124 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800206e:	b29b      	uxth	r3, r3
 8002070:	3b01      	subs	r3, #1
 8002072:	b29a      	uxth	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002080:	d12b      	bne.n	80020da <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2200      	movs	r2, #0
 800208a:	2120      	movs	r1, #32
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 f974 	bl	800237a <UART_WaitOnFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e053      	b.n	8002144 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10c      	bne.n	80020c2 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3302      	adds	r3, #2
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	e030      	b.n	8002124 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	3301      	adds	r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	e024      	b.n	8002124 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2200      	movs	r2, #0
 80020e2:	2120      	movs	r1, #32
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	f000 f948 	bl	800237a <UART_WaitOnFlagUntilTimeout>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e027      	b.n	8002144 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d108      	bne.n	800210e <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	60ba      	str	r2, [r7, #8]
 8002108:	b2ca      	uxtb	r2, r1
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e00a      	b.n	8002124 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1c59      	adds	r1, r3, #1
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002128:	b29b      	uxth	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d19d      	bne.n	800206a <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0320 	and.w	r3, r3, #32
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_UART_IRQHandler+0x52>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f003 0320 	and.w	r3, r3, #32
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f9d7 	bl	800254a <UART_Receive_IT>
      return;
 800219c:	e0cc      	b.n	8002338 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80ab 	beq.w	80022fc <HAL_UART_IRQHandler+0x1b0>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d105      	bne.n	80021bc <HAL_UART_IRQHandler+0x70>
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80a0 	beq.w	80022fc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_UART_IRQHandler+0x90>
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d005      	beq.n	80021dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	f043 0201 	orr.w	r2, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00a      	beq.n	80021fc <HAL_UART_IRQHandler+0xb0>
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d005      	beq.n	80021fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f4:	f043 0202 	orr.w	r2, r3, #2
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00a      	beq.n	800221c <HAL_UART_IRQHandler+0xd0>
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 0301 	and.w	r3, r3, #1
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	f043 0204 	orr.w	r2, r3, #4
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_UART_IRQHandler+0xf0>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	f043 0208 	orr.w	r2, r3, #8
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d078      	beq.n	8002336 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_UART_IRQHandler+0x112>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f976 	bl	800254a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	bf14      	ite	ne
 800226c:	2301      	movne	r3, #1
 800226e:	2300      	moveq	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <HAL_UART_IRQHandler+0x13a>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d031      	beq.n	80022ea <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f8c1 	bl	800240e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002296:	2b00      	cmp	r3, #0
 8002298:	d023      	beq.n	80022e2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695a      	ldr	r2, [r3, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d013      	beq.n	80022da <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b6:	4a22      	ldr	r2, [pc, #136]	; (8002340 <HAL_UART_IRQHandler+0x1f4>)
 80022b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fe fc2c 	bl	8000b1c <HAL_DMA_Abort_IT>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d016      	beq.n	80022f8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022d4:	4610      	mov	r0, r2
 80022d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022d8:	e00e      	b.n	80022f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f844 	bl	8002368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e0:	e00a      	b.n	80022f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f840 	bl	8002368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022e8:	e006      	b.n	80022f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f83c 	bl	8002368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80022f6:	e01e      	b.n	8002336 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022f8:	bf00      	nop
    return;
 80022fa:	e01c      	b.n	8002336 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_UART_IRQHandler+0x1cc>
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f8ad 	bl	8002470 <UART_Transmit_IT>
    return;
 8002316:	e00f      	b.n	8002338 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00a      	beq.n	8002338 <HAL_UART_IRQHandler+0x1ec>
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8f4 	bl	800251a <UART_EndTransmit_IT>
    return;
 8002332:	bf00      	nop
 8002334:	e000      	b.n	8002338 <HAL_UART_IRQHandler+0x1ec>
    return;
 8002336:	bf00      	nop
  }
}
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	08002449 	.word	0x08002449

08002344 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	60f8      	str	r0, [r7, #12]
 8002382:	60b9      	str	r1, [r7, #8]
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	4613      	mov	r3, r2
 8002388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238a:	e02c      	b.n	80023e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002392:	d028      	beq.n	80023e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <UART_WaitOnFlagUntilTimeout+0x30>
 800239a:	f7fe fa85 	bl	80008a8 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d21d      	bcs.n	80023e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	695a      	ldr	r2, [r3, #20]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 0201 	bic.w	r2, r2, #1
 80023c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2220      	movs	r2, #32
 80023ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2220      	movs	r2, #32
 80023d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e00f      	b.n	8002406 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	4013      	ands	r3, r2
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	bf0c      	ite	eq
 80023f6:	2301      	moveq	r3, #1
 80023f8:	2300      	movne	r3, #0
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	429a      	cmp	r2, r3
 8002402:	d0c3      	beq.n	800238c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002424:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f7ff ff80 	bl	8002368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002468:	bf00      	nop
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b21      	cmp	r3, #33	; 0x21
 8002482:	d144      	bne.n	800250e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800248c:	d11a      	bne.n	80024c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	1c9a      	adds	r2, r3, #2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	621a      	str	r2, [r3, #32]
 80024b6:	e00e      	b.n	80024d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	1c5a      	adds	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	621a      	str	r2, [r3, #32]
 80024c2:	e008      	b.n	80024d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	1c59      	adds	r1, r3, #1
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6211      	str	r1, [r2, #32]
 80024ce:	781a      	ldrb	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29b      	uxth	r3, r3
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	4619      	mov	r1, r3
 80024e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10f      	bne.n	800250a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002508:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800250e:	2302      	movs	r3, #2
  }
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr

0800251a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002530:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ff02 	bl	8002344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b22      	cmp	r3, #34	; 0x22
 800255c:	d171      	bne.n	8002642 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002566:	d123      	bne.n	80025b0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10e      	bne.n	8002594 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	1c9a      	adds	r2, r3, #2
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	629a      	str	r2, [r3, #40]	; 0x28
 8002592:	e029      	b.n	80025e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	b29b      	uxth	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	629a      	str	r2, [r3, #40]	; 0x28
 80025ae:	e01b      	b.n	80025e8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6858      	ldr	r0, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	1c59      	adds	r1, r3, #1
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6291      	str	r1, [r2, #40]	; 0x28
 80025c8:	b2c2      	uxtb	r2, r0
 80025ca:	701a      	strb	r2, [r3, #0]
 80025cc:	e00c      	b.n	80025e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	1c58      	adds	r0, r3, #1
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	6288      	str	r0, [r1, #40]	; 0x28
 80025e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4619      	mov	r1, r3
 80025f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d120      	bne.n	800263e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0220 	bic.w	r2, r2, #32
 800260a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800261a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 0201 	bic.w	r2, r2, #1
 800262a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff fe8e 	bl	8002356 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e002      	b.n	8002644 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	e000      	b.n	8002644 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002642:	2302      	movs	r3, #2
  }
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	431a      	orrs	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	4313      	orrs	r3, r2
 800267a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002686:	f023 030c 	bic.w	r3, r3, #12
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6812      	ldr	r2, [r2, #0]
 800268e:	68f9      	ldr	r1, [r7, #12]
 8002690:	430b      	orrs	r3, r1
 8002692:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	430a      	orrs	r2, r1
 80026a8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a52      	ldr	r2, [pc, #328]	; (80027f8 <UART_SetConfig+0x1ac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d14e      	bne.n	8002752 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026b4:	f7ff f804 	bl	80016c0 <HAL_RCC_GetPCLK2Freq>
 80026b8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	009a      	lsls	r2, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	4a4a      	ldr	r2, [pc, #296]	; (80027fc <UART_SetConfig+0x1b0>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	0119      	lsls	r1, r3, #4
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	009a      	lsls	r2, r3, #2
 80026e4:	441a      	add	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f0:	4b42      	ldr	r3, [pc, #264]	; (80027fc <UART_SetConfig+0x1b0>)
 80026f2:	fba3 0302 	umull	r0, r3, r3, r2
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2064      	movs	r0, #100	; 0x64
 80026fa:	fb00 f303 	mul.w	r3, r0, r3
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	3332      	adds	r3, #50	; 0x32
 8002704:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <UART_SetConfig+0x1b0>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	095b      	lsrs	r3, r3, #5
 800270c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002710:	4419      	add	r1, r3
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	4613      	mov	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	4413      	add	r3, r2
 800271a:	009a      	lsls	r2, r3, #2
 800271c:	441a      	add	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	fbb2 f2f3 	udiv	r2, r2, r3
 8002728:	4b34      	ldr	r3, [pc, #208]	; (80027fc <UART_SetConfig+0x1b0>)
 800272a:	fba3 0302 	umull	r0, r3, r3, r2
 800272e:	095b      	lsrs	r3, r3, #5
 8002730:	2064      	movs	r0, #100	; 0x64
 8002732:	fb00 f303 	mul.w	r3, r0, r3
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	011b      	lsls	r3, r3, #4
 800273a:	3332      	adds	r3, #50	; 0x32
 800273c:	4a2f      	ldr	r2, [pc, #188]	; (80027fc <UART_SetConfig+0x1b0>)
 800273e:	fba2 2303 	umull	r2, r3, r2, r3
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	f003 020f 	and.w	r2, r3, #15
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	440a      	add	r2, r1
 800274e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002750:	e04d      	b.n	80027ee <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002752:	f7fe ffa1 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8002756:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	009a      	lsls	r2, r3, #2
 8002762:	441a      	add	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4a23      	ldr	r2, [pc, #140]	; (80027fc <UART_SetConfig+0x1b0>)
 8002770:	fba2 2303 	umull	r2, r3, r2, r3
 8002774:	095b      	lsrs	r3, r3, #5
 8002776:	0119      	lsls	r1, r3, #4
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	009a      	lsls	r2, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	fbb2 f2f3 	udiv	r2, r2, r3
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <UART_SetConfig+0x1b0>)
 8002790:	fba3 0302 	umull	r0, r3, r3, r2
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	2064      	movs	r0, #100	; 0x64
 8002798:	fb00 f303 	mul.w	r3, r0, r3
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	3332      	adds	r3, #50	; 0x32
 80027a2:	4a16      	ldr	r2, [pc, #88]	; (80027fc <UART_SetConfig+0x1b0>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	095b      	lsrs	r3, r3, #5
 80027aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027ae:	4419      	add	r1, r3
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	009a      	lsls	r2, r3, #2
 80027ba:	441a      	add	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <UART_SetConfig+0x1b0>)
 80027c8:	fba3 0302 	umull	r0, r3, r3, r2
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	2064      	movs	r0, #100	; 0x64
 80027d0:	fb00 f303 	mul.w	r3, r0, r3
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	3332      	adds	r3, #50	; 0x32
 80027da:	4a08      	ldr	r2, [pc, #32]	; (80027fc <UART_SetConfig+0x1b0>)
 80027dc:	fba2 2303 	umull	r2, r3, r2, r3
 80027e0:	095b      	lsrs	r3, r3, #5
 80027e2:	f003 020f 	and.w	r2, r3, #15
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	440a      	add	r2, r1
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40013800 	.word	0x40013800
 80027fc:	51eb851f 	.word	0x51eb851f

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	2500      	movs	r5, #0
 8002804:	4e0c      	ldr	r6, [pc, #48]	; (8002838 <__libc_init_array+0x38>)
 8002806:	4c0d      	ldr	r4, [pc, #52]	; (800283c <__libc_init_array+0x3c>)
 8002808:	1ba4      	subs	r4, r4, r6
 800280a:	10a4      	asrs	r4, r4, #2
 800280c:	42a5      	cmp	r5, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	f000 f822 	bl	8002858 <_init>
 8002814:	2500      	movs	r5, #0
 8002816:	4e0a      	ldr	r6, [pc, #40]	; (8002840 <__libc_init_array+0x40>)
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <__libc_init_array+0x44>)
 800281a:	1ba4      	subs	r4, r4, r6
 800281c:	10a4      	asrs	r4, r4, #2
 800281e:	42a5      	cmp	r5, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002828:	4798      	blx	r3
 800282a:	3501      	adds	r5, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002832:	4798      	blx	r3
 8002834:	3501      	adds	r5, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	080028cc 	.word	0x080028cc
 800283c:	080028cc 	.word	0x080028cc
 8002840:	080028cc 	.word	0x080028cc
 8002844:	080028d0 	.word	0x080028d0

08002848 <memset>:
 8002848:	4603      	mov	r3, r0
 800284a:	4402      	add	r2, r0
 800284c:	4293      	cmp	r3, r2
 800284e:	d100      	bne.n	8002852 <memset+0xa>
 8002850:	4770      	bx	lr
 8002852:	f803 1b01 	strb.w	r1, [r3], #1
 8002856:	e7f9      	b.n	800284c <memset+0x4>

08002858 <_init>:
 8002858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800285a:	bf00      	nop
 800285c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285e:	bc08      	pop	{r3}
 8002860:	469e      	mov	lr, r3
 8002862:	4770      	bx	lr

08002864 <_fini>:
 8002864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002866:	bf00      	nop
 8002868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800286a:	bc08      	pop	{r3}
 800286c:	469e      	mov	lr, r3
 800286e:	4770      	bx	lr
