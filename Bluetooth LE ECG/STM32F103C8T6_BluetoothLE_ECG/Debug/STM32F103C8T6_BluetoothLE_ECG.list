
STM32F103C8T6_BluetoothLE_ECG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000283c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002948  08002948  00012948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ac  080029ac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029ac  080029ac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029ac  080029ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  2000000c  080029c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  080029c0  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffc9  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002217  00000000  00000000  0002fffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008ccb  00000000  00000000  00032215  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000cd0  00000000  00000000  0003aee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000c88  00000000  00000000  0003bbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00014e7f  00000000  00000000  0003c838  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000a3fd  00000000  00000000  000516b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00075caa  00000000  00000000  0005bab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000d175e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002274  00000000  00000000  000d17dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002930 	.word	0x08002930

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002930 	.word	0x08002930

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000160:	2400      	movs	r4, #0
 8000162:	9404      	str	r4, [sp, #16]
 8000164:	9405      	str	r4, [sp, #20]
 8000166:	9406      	str	r4, [sp, #24]
 8000168:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800016a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800016e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000172:	699a      	ldr	r2, [r3, #24]
 8000174:	f042 0210 	orr.w	r2, r2, #16
 8000178:	619a      	str	r2, [r3, #24]
 800017a:	699a      	ldr	r2, [r3, #24]
 800017c:	f002 0210 	and.w	r2, r2, #16
 8000180:	9201      	str	r2, [sp, #4]
 8000182:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000184:	699a      	ldr	r2, [r3, #24]
 8000186:	f042 0220 	orr.w	r2, r2, #32
 800018a:	619a      	str	r2, [r3, #24]
 800018c:	699a      	ldr	r2, [r3, #24]
 800018e:	f002 0220 	and.w	r2, r2, #32
 8000192:	9202      	str	r2, [sp, #8]
 8000194:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000196:	699a      	ldr	r2, [r3, #24]
 8000198:	f042 0204 	orr.w	r2, r2, #4
 800019c:	619a      	str	r2, [r3, #24]
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0304 	and.w	r3, r3, #4
 80001a4:	9303      	str	r3, [sp, #12]
 80001a6:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80001a8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80001ac:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80001b0:	2201      	movs	r2, #1
 80001b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001b6:	4628      	mov	r0, r5
 80001b8:	f001 fa39 	bl	800162e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 80001bc:	4622      	mov	r2, r4
 80001be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c2:	4628      	mov	r0, r5
 80001c4:	f001 fa33 	bl	800162e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BluetoothReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BluetoothReset_Pin;
 80001c8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80001cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ce:	2301      	movs	r3, #1
 80001d0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001d4:	2303      	movs	r3, #3
 80001d6:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80001d8:	a904      	add	r1, sp, #16
 80001da:	4628      	mov	r0, r5
 80001dc:	f001 f90f 	bl	80013fe <HAL_GPIO_Init>

}
 80001e0:	b009      	add	sp, #36	; 0x24
 80001e2:	bd30      	pop	{r4, r5, pc}

080001e4 <MX_DMA_Init>:
{
 80001e4:	b500      	push	{lr}
 80001e6:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80001e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80001ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80001f0:	695a      	ldr	r2, [r3, #20]
 80001f2:	f042 0201 	orr.w	r2, r2, #1
 80001f6:	615a      	str	r2, [r3, #20]
 80001f8:	695b      	ldr	r3, [r3, #20]
 80001fa:	f003 0301 	and.w	r3, r3, #1
 80001fe:	9301      	str	r3, [sp, #4]
 8000200:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000202:	2200      	movs	r2, #0
 8000204:	4611      	mov	r1, r2
 8000206:	200b      	movs	r0, #11
 8000208:	f000 ff06 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800020c:	200b      	movs	r0, #11
 800020e:	f000 ff39 	bl	8001084 <HAL_NVIC_EnableIRQ>
}
 8000212:	b003      	add	sp, #12
 8000214:	f85d fb04 	ldr.w	pc, [sp], #4

08000218 <MX_USART2_UART_Init>:
{
 8000218:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 800021a:	f240 00e0 	movw	r0, #224	; 0xe0
 800021e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000222:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000226:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800022a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 800022c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000230:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000232:	2300      	movs	r3, #0
 8000234:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000236:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000238:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800023a:	220c      	movs	r2, #12
 800023c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800023e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000240:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000242:	f002 f95b 	bl	80024fc <HAL_UART_Init>
}
 8000246:	bd08      	pop	{r3, pc}

08000248 <MX_TIM2_Init>:
{
 8000248:	b530      	push	{r4, r5, lr}
 800024a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800024c:	2500      	movs	r5, #0
 800024e:	9502      	str	r5, [sp, #8]
 8000250:	9503      	str	r5, [sp, #12]
 8000252:	9504      	str	r5, [sp, #16]
 8000254:	9505      	str	r5, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000256:	9500      	str	r5, [sp, #0]
 8000258:	9501      	str	r5, [sp, #4]
  htim2.Instance = TIM2;
 800025a:	f240 04a0 	movw	r4, #160	; 0xa0
 800025e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000262:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000266:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 1033;
 8000268:	f240 4309 	movw	r3, #1033	; 0x409
 800026c:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800026e:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 1088;
 8000270:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000274:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000276:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000278:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800027a:	4620      	mov	r0, r4
 800027c:	f001 ffab 	bl	80021d6 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000284:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000286:	a902      	add	r1, sp, #8
 8000288:	4620      	mov	r0, r4
 800028a:	f001 ffc8 	bl	800221e <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800028e:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000290:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000292:	4669      	mov	r1, sp
 8000294:	4620      	mov	r0, r4
 8000296:	f002 f82f 	bl	80022f8 <HAL_TIMEx_MasterConfigSynchronization>
}
 800029a:	b007      	add	sp, #28
 800029c:	bd30      	pop	{r4, r5, pc}

0800029e <MX_ADC1_Init>:
{
 800029e:	b530      	push	{r4, r5, lr}
 80002a0:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 80002a2:	2300      	movs	r3, #0
 80002a4:	9301      	str	r3, [sp, #4]
 80002a6:	9302      	str	r3, [sp, #8]
 80002a8:	9303      	str	r3, [sp, #12]
  hadc1.Instance = ADC1;
 80002aa:	f240 042c 	movw	r4, #44	; 0x2c
 80002ae:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80002b2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80002b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80002ba:	6022      	str	r2, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002bc:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002be:	2501      	movs	r5, #1
 80002c0:	7325      	strb	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002c2:	7523      	strb	r3, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002c4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002c8:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ca:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002cc:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002ce:	4620      	mov	r0, r4
 80002d0:	f000 fe03 	bl	8000eda <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_1;
 80002d4:	9501      	str	r5, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002d6:	9502      	str	r5, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80002d8:	2307      	movs	r3, #7
 80002da:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002dc:	a901      	add	r1, sp, #4
 80002de:	4620      	mov	r0, r4
 80002e0:	f000 fbc8 	bl	8000a74 <HAL_ADC_ConfigChannel>
}
 80002e4:	b005      	add	sp, #20
 80002e6:	bd30      	pop	{r4, r5, pc}

080002e8 <SystemClock_Config>:
{
 80002e8:	b530      	push	{r4, r5, lr}
 80002ea:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ec:	2400      	movs	r4, #0
 80002ee:	940c      	str	r4, [sp, #48]	; 0x30
 80002f0:	940d      	str	r4, [sp, #52]	; 0x34
 80002f2:	940f      	str	r4, [sp, #60]	; 0x3c
 80002f4:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	9405      	str	r4, [sp, #20]
 80002f8:	9406      	str	r4, [sp, #24]
 80002fa:	9407      	str	r4, [sp, #28]
 80002fc:	9408      	str	r4, [sp, #32]
 80002fe:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000300:	9401      	str	r4, [sp, #4]
 8000302:	9402      	str	r4, [sp, #8]
 8000304:	9403      	str	r4, [sp, #12]
 8000306:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000308:	2201      	movs	r2, #1
 800030a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000312:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000314:	2502      	movs	r5, #2
 8000316:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000318:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800031a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800031e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	a80a      	add	r0, sp, #40	; 0x28
 8000322:	f001 f9a2 	bl	800166a <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800032e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000332:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000334:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000336:	4629      	mov	r1, r5
 8000338:	a805      	add	r0, sp, #20
 800033a:	f001 fc50 	bl	8001bde <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800033e:	9501      	str	r5, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8000340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000344:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000346:	a801      	add	r0, sp, #4
 8000348:	f001 fd52 	bl	8001df0 <HAL_RCCEx_PeriphCLKConfig>
}
 800034c:	b015      	add	sp, #84	; 0x54
 800034e:	bd30      	pop	{r4, r5, pc}

08000350 <main>:
{
 8000350:	b530      	push	{r4, r5, lr}
 8000352:	b0d9      	sub	sp, #356	; 0x164
  HAL_Init();
 8000354:	f000 fa8f 	bl	8000876 <HAL_Init>
  SystemClock_Config();
 8000358:	f7ff ffc6 	bl	80002e8 <SystemClock_Config>
  MX_GPIO_Init();
 800035c:	f7ff fefe 	bl	800015c <MX_GPIO_Init>
  MX_DMA_Init();
 8000360:	f7ff ff40 	bl	80001e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000364:	f7ff ff58 	bl	8000218 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000368:	f7ff ff6e 	bl	8000248 <MX_TIM2_Init>
  MX_ADC1_Init();
 800036c:	f7ff ff97 	bl	800029e <MX_ADC1_Init>
  HAL_Delay(200);
 8000370:	20c8      	movs	r0, #200	; 0xc8
 8000372:	f000 faa6 	bl	80008c2 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 8000376:	2201      	movs	r2, #1
 8000378:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800037c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000380:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000384:	f001 f953 	bl	800162e <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800038c:	f000 fa99 	bl	80008c2 <HAL_Delay>
  __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000390:	f240 04e0 	movw	r4, #224	; 0xe0
 8000394:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000398:	6822      	ldr	r2, [r4, #0]
 800039a:	68d3      	ldr	r3, [r2, #12]
 800039c:	f023 0320 	bic.w	r3, r3, #32
 80003a0:	60d3      	str	r3, [r2, #12]
  HAL_ADC_Start_DMA(&hadc1, &ADC_value, 1);
 80003a2:	f240 052c 	movw	r5, #44	; 0x2c
 80003a6:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80003aa:	2201      	movs	r2, #1
 80003ac:	f240 1120 	movw	r1, #288	; 0x120
 80003b0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80003b4:	4628      	mov	r0, r5
 80003b6:	f000 fcc1 	bl	8000d3c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc1);
 80003ba:	4628      	mov	r0, r5
 80003bc:	f000 fc3a 	bl	8000c34 <HAL_ADC_Start_IT>
  HAL_UART_Transmit(&huart2, (uint8_t*)"AT+NAMEBlue ECG", strlen("AT+NAMEBlue ECG"), 500);
 80003c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80003c4:	220f      	movs	r2, #15
 80003c6:	f642 115c 	movw	r1, #10588	; 0x295c
 80003ca:	f6c0 0100 	movt	r1, #2048	; 0x800
 80003ce:	4620      	mov	r0, r4
 80003d0:	f002 f8c3 	bl	800255a <HAL_UART_Transmit>
  HAL_Delay(1000);
 80003d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d8:	f000 fa73 	bl	80008c2 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim2);
 80003dc:	f240 00a0 	movw	r0, #160	; 0xa0
 80003e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80003e4:	f001 fddc 	bl	8001fa0 <HAL_TIM_Base_Start_IT>
  memset(ADC_Values, 0, sizeof(ADC_Values));
 80003e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003ec:	2100      	movs	r1, #0
 80003ee:	f240 1024 	movw	r0, #292	; 0x124
 80003f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80003f6:	f002 fa55 	bl	80028a4 <memset>
 80003fa:	e035      	b.n	8000468 <main+0x118>
					itoa(ADC_Values[3][i], &sendBuffer[strlen(sendBuffer)], 10);
 80003fc:	f240 1324 	movw	r3, #292	; 0x124
 8000400:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000404:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
 8000408:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 800040c:	4668      	mov	r0, sp
 800040e:	f7ff fe9d 	bl	800014c <strlen>
 8000412:	220a      	movs	r2, #10
 8000414:	eb0d 0100 	add.w	r1, sp, r0
 8000418:	4628      	mov	r0, r5
 800041a:	f002 fa41 	bl	80028a0 <itoa>
					sendBuffer[strlen(sendBuffer)] = ',';
 800041e:	4668      	mov	r0, sp
 8000420:	f7ff fe94 	bl	800014c <strlen>
 8000424:	232c      	movs	r3, #44	; 0x2c
 8000426:	f80d 3000 	strb.w	r3, [sp, r0]
				for(int i=0; i<64; i++)
 800042a:	3401      	adds	r4, #1
 800042c:	2c3f      	cmp	r4, #63	; 0x3f
 800042e:	dde5      	ble.n	80003fc <main+0xac>
			sendBuffer[strlen(sendBuffer)-1] = '\n';
 8000430:	4668      	mov	r0, sp
 8000432:	f7ff fe8b 	bl	800014c <strlen>
 8000436:	3801      	subs	r0, #1
 8000438:	230a      	movs	r3, #10
 800043a:	f80d 3000 	strb.w	r3, [sp, r0]
			HAL_UART_Transmit(&huart2, (uint8_t*)sendBuffer, strlen(sendBuffer), 200);
 800043e:	4668      	mov	r0, sp
 8000440:	f7ff fe84 	bl	800014c <strlen>
 8000444:	23c8      	movs	r3, #200	; 0xc8
 8000446:	b282      	uxth	r2, r0
 8000448:	4669      	mov	r1, sp
 800044a:	f240 00e0 	movw	r0, #224	; 0xe0
 800044e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000452:	f002 f882 	bl	800255a <HAL_UART_Transmit>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 8000456:	2201      	movs	r2, #1
 8000458:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000460:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000464:	f001 f8e3 	bl	800162e <HAL_GPIO_WritePin>
	  if(send_flag == 1)
 8000468:	f240 0329 	movw	r3, #41	; 0x29
 800046c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d1f8      	bne.n	8000468 <main+0x118>
		  send_flag = 0;
 8000476:	f240 0329 	movw	r3, #41	; 0x29
 800047a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800047e:	2400      	movs	r4, #0
 8000480:	701c      	strb	r4, [r3, #0]
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000482:	4622      	mov	r2, r4
 8000484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000488:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800048c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000490:	f001 f8cd 	bl	800162e <HAL_GPIO_WritePin>
		  memset(sendBuffer, 0, sizeof(sendBuffer));
 8000494:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000498:	4621      	mov	r1, r4
 800049a:	4668      	mov	r0, sp
 800049c:	f002 fa02 	bl	80028a4 <memset>
			if(stream_index == 0)
 80004a0:	f240 032a 	movw	r3, #42	; 0x2a
 80004a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	b9fb      	cbnz	r3, 80004ec <main+0x19c>
				for(int i=0; i<64; i++)
 80004ac:	2400      	movs	r4, #0
 80004ae:	e7bd      	b.n	800042c <main+0xdc>
					itoa(ADC_Values[stream_index-1][i], &sendBuffer[strlen(sendBuffer)], 10);
 80004b0:	f240 032a 	movw	r3, #42	; 0x2a
 80004b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	3b01      	subs	r3, #1
 80004bc:	f240 1224 	movw	r2, #292	; 0x124
 80004c0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80004c4:	eb04 1383 	add.w	r3, r4, r3, lsl #6
 80004c8:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 80004cc:	4668      	mov	r0, sp
 80004ce:	f7ff fe3d 	bl	800014c <strlen>
 80004d2:	220a      	movs	r2, #10
 80004d4:	eb0d 0100 	add.w	r1, sp, r0
 80004d8:	4628      	mov	r0, r5
 80004da:	f002 f9e1 	bl	80028a0 <itoa>
					sendBuffer[strlen(sendBuffer)] = ',';
 80004de:	4668      	mov	r0, sp
 80004e0:	f7ff fe34 	bl	800014c <strlen>
 80004e4:	232c      	movs	r3, #44	; 0x2c
 80004e6:	f80d 3000 	strb.w	r3, [sp, r0]
				for(int i=0; i<64; i++)
 80004ea:	3401      	adds	r4, #1
 80004ec:	2c3f      	cmp	r4, #63	; 0x3f
 80004ee:	dddf      	ble.n	80004b0 <main+0x160>
 80004f0:	e79e      	b.n	8000430 <main+0xe0>

080004f2 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004f2:	4770      	bx	lr

080004f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004fe:	699a      	ldr	r2, [r3, #24]
 8000500:	f042 0201 	orr.w	r2, r2, #1
 8000504:	619a      	str	r2, [r3, #24]
 8000506:	699a      	ldr	r2, [r3, #24]
 8000508:	f002 0201 	and.w	r2, r2, #1
 800050c:	9200      	str	r2, [sp, #0]
 800050e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000510:	69da      	ldr	r2, [r3, #28]
 8000512:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000516:	61da      	str	r2, [r3, #28]
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000522:	2200      	movs	r2, #0
 8000524:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000528:	6853      	ldr	r3, [r2, #4]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000532:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000534:	b002      	add	sp, #8
 8000536:	4770      	bx	lr

08000538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000538:	b510      	push	{r4, lr}
 800053a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	2300      	movs	r3, #0
 800053e:	9302      	str	r3, [sp, #8]
 8000540:	9303      	str	r3, [sp, #12]
 8000542:	9304      	str	r3, [sp, #16]
 8000544:	9305      	str	r3, [sp, #20]
  if(hadc->Instance==ADC1)
 8000546:	6802      	ldr	r2, [r0, #0]
 8000548:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800054c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000550:	429a      	cmp	r2, r3
 8000552:	d001      	beq.n	8000558 <HAL_ADC_MspInit+0x20>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000554:	b006      	add	sp, #24
 8000556:	bd10      	pop	{r4, pc}
 8000558:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800055a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800055e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000562:	699a      	ldr	r2, [r3, #24]
 8000564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000568:	619a      	str	r2, [r3, #24]
 800056a:	699a      	ldr	r2, [r3, #24]
 800056c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000570:	9200      	str	r2, [sp, #0]
 8000572:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000574:	699a      	ldr	r2, [r3, #24]
 8000576:	f042 0204 	orr.w	r2, r2, #4
 800057a:	619a      	str	r2, [r3, #24]
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	9301      	str	r3, [sp, #4]
 8000584:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000586:	2302      	movs	r3, #2
 8000588:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058a:	2303      	movs	r3, #3
 800058c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058e:	a902      	add	r1, sp, #8
 8000590:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000594:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8000598:	f000 ff31 	bl	80013fe <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800059c:	f240 005c 	movw	r0, #92	; 0x5c
 80005a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80005a4:	2308      	movs	r3, #8
 80005a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005aa:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005ac:	2300      	movs	r3, #0
 80005ae:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005b0:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80005b2:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005b8:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005be:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80005c0:	2220      	movs	r2, #32
 80005c2:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005c4:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005c6:	f000 fd98 	bl	80010fa <HAL_DMA_Init>
 80005ca:	b970      	cbnz	r0, 80005ea <HAL_ADC_MspInit+0xb2>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005cc:	f240 035c 	movw	r3, #92	; 0x5c
 80005d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80005d4:	6223      	str	r3, [r4, #32]
 80005d6:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	4611      	mov	r1, r2
 80005dc:	2012      	movs	r0, #18
 80005de:	f000 fd1b 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005e2:	2012      	movs	r0, #18
 80005e4:	f000 fd4e 	bl	8001084 <HAL_NVIC_EnableIRQ>
}
 80005e8:	e7b4      	b.n	8000554 <HAL_ADC_MspInit+0x1c>
      Error_Handler();
 80005ea:	f7ff ff82 	bl	80004f2 <Error_Handler>
 80005ee:	e7ed      	b.n	80005cc <HAL_ADC_MspInit+0x94>

080005f0 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 80005f0:	6803      	ldr	r3, [r0, #0]
 80005f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f6:	d000      	beq.n	80005fa <HAL_TIM_Base_MspInit+0xa>
 80005f8:	4770      	bx	lr
{
 80005fa:	b500      	push	{lr}
 80005fc:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000606:	69da      	ldr	r2, [r3, #28]
 8000608:	f042 0201 	orr.w	r2, r2, #1
 800060c:	61da      	str	r2, [r3, #28]
 800060e:	69db      	ldr	r3, [r3, #28]
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	9301      	str	r3, [sp, #4]
 8000616:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	4611      	mov	r1, r2
 800061c:	201c      	movs	r0, #28
 800061e:	f000 fcfb 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000622:	201c      	movs	r0, #28
 8000624:	f000 fd2e 	bl	8001084 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000628:	b003      	add	sp, #12
 800062a:	f85d fb04 	ldr.w	pc, [sp], #4

0800062e <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	2300      	movs	r3, #0
 8000634:	9302      	str	r3, [sp, #8]
 8000636:	9303      	str	r3, [sp, #12]
 8000638:	9304      	str	r3, [sp, #16]
 800063a:	9305      	str	r3, [sp, #20]
  if(huart->Instance==USART2)
 800063c:	6802      	ldr	r2, [r0, #0]
 800063e:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000642:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000646:	429a      	cmp	r2, r3
 8000648:	d001      	beq.n	800064e <HAL_UART_MspInit+0x20>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800064a:	b007      	add	sp, #28
 800064c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800064e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000652:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000656:	69da      	ldr	r2, [r3, #28]
 8000658:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800065c:	61da      	str	r2, [r3, #28]
 800065e:	69da      	ldr	r2, [r3, #28]
 8000660:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000664:	9200      	str	r2, [sp, #0]
 8000666:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	699a      	ldr	r2, [r3, #24]
 800066a:	f042 0204 	orr.w	r2, r2, #4
 800066e:	619a      	str	r2, [r3, #24]
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800067a:	2304      	movs	r3, #4
 800067c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067e:	2302      	movs	r3, #2
 8000680:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000682:	2303      	movs	r3, #3
 8000684:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f44f 6500 	mov.w	r5, #2048	; 0x800
 800068a:	f2c4 0501 	movt	r5, #16385	; 0x4001
 800068e:	a902      	add	r1, sp, #8
 8000690:	4628      	mov	r0, r5
 8000692:	f000 feb4 	bl	80013fe <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000696:	2308      	movs	r3, #8
 8000698:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069a:	2400      	movs	r4, #0
 800069c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	eb0d 0103 	add.w	r1, sp, r3
 80006a4:	4628      	mov	r0, r5
 80006a6:	f000 feaa 	bl	80013fe <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80006aa:	4622      	mov	r2, r4
 80006ac:	4621      	mov	r1, r4
 80006ae:	2026      	movs	r0, #38	; 0x26
 80006b0:	f000 fcb2 	bl	8001018 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006b4:	2026      	movs	r0, #38	; 0x26
 80006b6:	f000 fce5 	bl	8001084 <HAL_NVIC_EnableIRQ>
}
 80006ba:	e7c6      	b.n	800064a <HAL_UART_MspInit+0x1c>

080006bc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006bc:	4770      	bx	lr

080006be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006be:	e7fe      	b.n	80006be <HardFault_Handler>

080006c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c0:	e7fe      	b.n	80006c0 <MemManage_Handler>

080006c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006c2:	e7fe      	b.n	80006c2 <BusFault_Handler>

080006c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006c4:	e7fe      	b.n	80006c4 <UsageFault_Handler>

080006c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c8:	4770      	bx	lr

080006ca <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ca:	4770      	bx	lr

080006cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f8e5 	bl	800089c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bd08      	pop	{r3, pc}

080006d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006d6:	f240 005c 	movw	r0, #92	; 0x5c
 80006da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80006de:	f000 fdd4 	bl	800128a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006e2:	bd08      	pop	{r3, pc}

080006e4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80006e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006e6:	f240 002c 	movw	r0, #44	; 0x2c
 80006ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80006ee:	f000 f92d 	bl	800094c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80006f2:	bd08      	pop	{r3, pc}

080006f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	ADC_Values[stream_index][array_index++] = ADC_value;
 80006f6:	f240 1320 	movw	r3, #288	; 0x120
 80006fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006fe:	681c      	ldr	r4, [r3, #0]
 8000700:	f240 032a 	movw	r3, #42	; 0x2a
 8000704:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000708:	7818      	ldrb	r0, [r3, #0]
 800070a:	f240 0128 	movw	r1, #40	; 0x28
 800070e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000712:	780a      	ldrb	r2, [r1, #0]
 8000714:	1c53      	adds	r3, r2, #1
 8000716:	b2db      	uxtb	r3, r3
 8000718:	700b      	strb	r3, [r1, #0]
 800071a:	f240 1124 	movw	r1, #292	; 0x124
 800071e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000722:	eb02 1280 	add.w	r2, r2, r0, lsl #6
 8000726:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
	if(array_index == 64)
 800072a:	2b40      	cmp	r3, #64	; 0x40
 800072c:	d00d      	beq.n	800074a <TIM2_IRQHandler+0x56>
	{
		array_index = 0;
		stream_index++;
		send_flag = 1;
	}
	if(stream_index == 4)
 800072e:	f240 032a 	movw	r3, #42	; 0x2a
 8000732:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b04      	cmp	r3, #4
 800073a:	d019      	beq.n	8000770 <TIM2_IRQHandler+0x7c>
		stream_index = 0;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800073c:	f240 00a0 	movw	r0, #160	; 0xa0
 8000740:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000744:	f001 fc42 	bl	8001fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000748:	bd10      	pop	{r4, pc}
		array_index = 0;
 800074a:	f240 0328 	movw	r3, #40	; 0x28
 800074e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000752:	2200      	movs	r2, #0
 8000754:	701a      	strb	r2, [r3, #0]
		stream_index++;
 8000756:	f240 032a 	movw	r3, #42	; 0x2a
 800075a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800075e:	3001      	adds	r0, #1
 8000760:	7018      	strb	r0, [r3, #0]
		send_flag = 1;
 8000762:	f240 0329 	movw	r3, #41	; 0x29
 8000766:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
 800076e:	e7de      	b.n	800072e <TIM2_IRQHandler+0x3a>
		stream_index = 0;
 8000770:	f240 032a 	movw	r3, #42	; 0x2a
 8000774:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000778:	2200      	movs	r2, #0
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e7de      	b.n	800073c <TIM2_IRQHandler+0x48>

0800077e <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800077e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000780:	f240 00e0 	movw	r0, #224	; 0xe0
 8000784:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000788:	f001 ffb5 	bl	80026f6 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800078c:	bd08      	pop	{r3, pc}

0800078e <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	f042 0201 	orr.w	r2, r2, #1
 800079c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800079e:	6859      	ldr	r1, [r3, #4]
 80007a0:	2200      	movs	r2, #0
 80007a2:	f6cf 02ff 	movt	r2, #63743	; 0xf8ff
 80007a6:	400a      	ands	r2, r1
 80007a8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80007b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80007be:	685a      	ldr	r2, [r3, #4]
 80007c0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80007c4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80007c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80007ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80007cc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80007d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80007d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007d8:	609a      	str	r2, [r3, #8]
#endif 
}
 80007da:	4770      	bx	lr

080007dc <Reset_Handler>:
 80007dc:	2100      	movs	r1, #0
 80007de:	e003      	b.n	80007e8 <LoopCopyDataInit>

080007e0 <CopyDataInit>:
 80007e0:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <LoopFillZerobss+0x14>)
 80007e2:	585b      	ldr	r3, [r3, r1]
 80007e4:	5043      	str	r3, [r0, r1]
 80007e6:	3104      	adds	r1, #4

080007e8 <LoopCopyDataInit>:
 80007e8:	480a      	ldr	r0, [pc, #40]	; (8000814 <LoopFillZerobss+0x18>)
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <LoopFillZerobss+0x1c>)
 80007ec:	1842      	adds	r2, r0, r1
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d3f6      	bcc.n	80007e0 <CopyDataInit>
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopFillZerobss+0x20>)
 80007f4:	e002      	b.n	80007fc <LoopFillZerobss>

080007f6 <FillZerobss>:
 80007f6:	2300      	movs	r3, #0
 80007f8:	f842 3b04 	str.w	r3, [r2], #4

080007fc <LoopFillZerobss>:
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <LoopFillZerobss+0x24>)
 80007fe:	429a      	cmp	r2, r3
 8000800:	d3f9      	bcc.n	80007f6 <FillZerobss>
 8000802:	f7ff ffc4 	bl	800078e <SystemInit>
 8000806:	f002 f80f 	bl	8002828 <__libc_init_array>
 800080a:	f7ff fda1 	bl	8000350 <main>
 800080e:	4770      	bx	lr
 8000810:	080029b4 	.word	0x080029b4
 8000814:	20000000 	.word	0x20000000
 8000818:	2000000c 	.word	0x2000000c
 800081c:	2000000c 	.word	0x2000000c
 8000820:	20000328 	.word	0x20000328

08000824 <CAN1_RX1_IRQHandler>:
 8000824:	e7fe      	b.n	8000824 <CAN1_RX1_IRQHandler>

08000826 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000826:	b510      	push	{r4, lr}
 8000828:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800082a:	f240 0304 	movw	r3, #4
 800082e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000832:	7818      	ldrb	r0, [r3, #0]
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	fbb3 f3f0 	udiv	r3, r3, r0
 800083c:	f240 0200 	movw	r2, #0
 8000840:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000844:	6810      	ldr	r0, [r2, #0]
 8000846:	fbb0 f0f3 	udiv	r0, r0, r3
 800084a:	f000 fc29 	bl	80010a0 <HAL_SYSTICK_Config>
 800084e:	b980      	cbnz	r0, 8000872 <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000850:	2c0f      	cmp	r4, #15
 8000852:	d901      	bls.n	8000858 <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000854:	2001      	movs	r0, #1
 8000856:	e00d      	b.n	8000874 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000858:	2200      	movs	r2, #0
 800085a:	4621      	mov	r1, r4
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f000 fbda 	bl	8001018 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000864:	f240 0308 	movw	r3, #8
 8000868:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800086c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2000      	movs	r0, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 8000872:	2001      	movs	r0, #1
}
 8000874:	bd10      	pop	{r4, pc}

08000876 <HAL_Init>:
{
 8000876:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	f042 0210 	orr.w	r2, r2, #16
 8000886:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 fbb2 	bl	8000ff2 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffc9 	bl	8000826 <HAL_InitTick>
  HAL_MspInit();
 8000894:	f7ff fe2e 	bl	80004f4 <HAL_MspInit>
}
 8000898:	2000      	movs	r0, #0
 800089a:	bd08      	pop	{r3, pc}

0800089c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800089c:	f240 3324 	movw	r3, #804	; 0x324
 80008a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f240 0104 	movw	r1, #4
 80008aa:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80008ae:	780a      	ldrb	r2, [r1, #0]
 80008b0:	4402      	add	r2, r0
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	4770      	bx	lr

080008b6 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008b6:	f240 3324 	movw	r3, #804	; 0x324
 80008ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008be:	6818      	ldr	r0, [r3, #0]
}
 80008c0:	4770      	bx	lr

080008c2 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c2:	b538      	push	{r3, r4, r5, lr}
 80008c4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008c6:	f7ff fff6 	bl	80008b6 <HAL_GetTick>
 80008ca:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 80008d2:	f240 0304 	movw	r3, #4
 80008d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008de:	f7ff ffea 	bl	80008b6 <HAL_GetTick>
 80008e2:	1b40      	subs	r0, r0, r5
 80008e4:	42a0      	cmp	r0, r4
 80008e6:	d3fa      	bcc.n	80008de <HAL_Delay+0x1c>
  {
  }
}
 80008e8:	bd38      	pop	{r3, r4, r5, pc}

080008ea <HAL_ADC_ConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80008ea:	4770      	bx	lr

080008ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80008ec:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80008ee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80008f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008f2:	f012 0f50 	tst.w	r2, #80	; 0x50
 80008f6:	d003      	beq.n	8000900 <ADC_DMAConvCplt+0x14>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80008f8:	6a1b      	ldr	r3, [r3, #32]
 80008fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fc:	4798      	blx	r3
  }
}
 80008fe:	bd08      	pop	{r3, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	6892      	ldr	r2, [r2, #8]
 800090c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000910:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000914:	d003      	beq.n	800091e <ADC_DMAConvCplt+0x32>
    HAL_ADC_ConvCpltCallback(hadc);
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ffe7 	bl	80008ea <HAL_ADC_ConvCpltCallback>
 800091c:	e7ef      	b.n	80008fe <ADC_DMAConvCplt+0x12>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800091e:	7b1a      	ldrb	r2, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000920:	2a00      	cmp	r2, #0
 8000922:	d1f8      	bne.n	8000916 <ADC_DMAConvCplt+0x2a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000926:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800092a:	629a      	str	r2, [r3, #40]	; 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800092c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800092e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8000932:	d1f0      	bne.n	8000916 <ADC_DMAConvCplt+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000934:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000936:	f042 0201 	orr.w	r2, r2, #1
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
 800093c:	e7eb      	b.n	8000916 <ADC_DMAConvCplt+0x2a>

0800093e <HAL_ADC_ConvHalfCpltCallback>:
}
 800093e:	4770      	bx	lr

08000940 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000940:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000942:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000944:	f7ff fffb 	bl	800093e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000948:	bd08      	pop	{r3, pc}

0800094a <HAL_ADC_LevelOutOfWindowCallback>:
}
 800094a:	4770      	bx	lr

0800094c <HAL_ADC_IRQHandler>:
{
 800094c:	b510      	push	{r4, lr}
 800094e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000950:	6803      	ldr	r3, [r0, #0]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	f012 0f20 	tst.w	r2, #32
 8000958:	d018      	beq.n	800098c <HAL_ADC_IRQHandler+0x40>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	f012 0f02 	tst.w	r2, #2
 8000960:	d014      	beq.n	800098c <HAL_ADC_IRQHandler+0x40>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000962:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000964:	f012 0f10 	tst.w	r2, #16
 8000968:	d103      	bne.n	8000972 <HAL_ADC_IRQHandler+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800096a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800096c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000970:	6282      	str	r2, [r0, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000972:	689a      	ldr	r2, [r3, #8]
 8000974:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000978:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800097c:	d038      	beq.n	80009f0 <HAL_ADC_IRQHandler+0xa4>
      HAL_ADC_ConvCpltCallback(hadc);
 800097e:	4620      	mov	r0, r4
 8000980:	f7ff ffb3 	bl	80008ea <HAL_ADC_ConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000984:	6823      	ldr	r3, [r4, #0]
 8000986:	f06f 0212 	mvn.w	r2, #18
 800098a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800098c:	6823      	ldr	r3, [r4, #0]
 800098e:	685a      	ldr	r2, [r3, #4]
 8000990:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000994:	d022      	beq.n	80009dc <HAL_ADC_IRQHandler+0x90>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	f012 0f04 	tst.w	r2, #4
 800099c:	d01e      	beq.n	80009dc <HAL_ADC_IRQHandler+0x90>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800099e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009a0:	f012 0f10 	tst.w	r2, #16
 80009a4:	d103      	bne.n	80009ae <HAL_ADC_IRQHandler+0x62>
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80009a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80009a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009ac:	62a2      	str	r2, [r4, #40]	; 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80009b4:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80009b8:	d031      	beq.n	8000a1e <HAL_ADC_IRQHandler+0xd2>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80009ba:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80009bc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80009c0:	d105      	bne.n	80009ce <HAL_ADC_IRQHandler+0x82>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80009c8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80009cc:	d024      	beq.n	8000a18 <HAL_ADC_IRQHandler+0xcc>
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80009ce:	4620      	mov	r0, r4
 80009d0:	f000 fb0e 	bl	8000ff0 <HAL_ADCEx_InjectedConvCpltCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	f06f 020c 	mvn.w	r2, #12
 80009da:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80009dc:	6823      	ldr	r3, [r4, #0]
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	f012 0f40 	tst.w	r2, #64	; 0x40
 80009e4:	d003      	beq.n	80009ee <HAL_ADC_IRQHandler+0xa2>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f013 0f01 	tst.w	r3, #1
 80009ec:	d128      	bne.n	8000a40 <HAL_ADC_IRQHandler+0xf4>
}
 80009ee:	bd10      	pop	{r4, pc}
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80009f0:	7b22      	ldrb	r2, [r4, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80009f2:	2a00      	cmp	r2, #0
 80009f4:	d1c3      	bne.n	800097e <HAL_ADC_IRQHandler+0x32>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	f022 0220 	bic.w	r2, r2, #32
 80009fc:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80009fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a04:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000a06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a08:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000a0c:	d1b7      	bne.n	800097e <HAL_ADC_IRQHandler+0x32>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a16:	e7b2      	b.n	800097e <HAL_ADC_IRQHandler+0x32>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000a18:	7b22      	ldrb	r2, [r4, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000a1a:	2a00      	cmp	r2, #0
 8000a1c:	d1d7      	bne.n	80009ce <HAL_ADC_IRQHandler+0x82>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a24:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000a26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a2c:	62a3      	str	r3, [r4, #40]	; 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a30:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a34:	d1cb      	bne.n	80009ce <HAL_ADC_IRQHandler+0x82>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000a36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a3e:	e7c6      	b.n	80009ce <HAL_ADC_IRQHandler+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000a40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a46:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000a48:	4620      	mov	r0, r4
 8000a4a:	f7ff ff7e 	bl	800094a <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000a4e:	6823      	ldr	r3, [r4, #0]
 8000a50:	f06f 0201 	mvn.w	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	e7ca      	b.n	80009ee <HAL_ADC_IRQHandler+0xa2>

08000a58 <HAL_ADC_ErrorCallback>:
}
 8000a58:	4770      	bx	lr

08000a5a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000a5a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000a5e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a64:	6283      	str	r3, [r0, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000a66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a68:	f043 0304 	orr.w	r3, r3, #4
 8000a6c:	62c3      	str	r3, [r0, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000a6e:	f7ff fff3 	bl	8000a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000a72:	bd08      	pop	{r3, pc}

08000a74 <HAL_ADC_ConfigChannel>:
{ 
 8000a74:	b430      	push	{r4, r5}
 8000a76:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000a7c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	f000 8094 	beq.w	8000bae <HAL_ADC_ConfigChannel+0x13a>
 8000a86:	4602      	mov	r2, r0
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000a8e:	684b      	ldr	r3, [r1, #4]
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d829      	bhi.n	8000ae8 <HAL_ADC_ConfigChannel+0x74>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a94:	6805      	ldr	r5, [r0, #0]
 8000a96:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000a98:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a9c:	3b05      	subs	r3, #5
 8000a9e:	241f      	movs	r4, #31
 8000aa0:	409c      	lsls	r4, r3
 8000aa2:	ea20 0004 	bic.w	r0, r0, r4
 8000aa6:	680c      	ldr	r4, [r1, #0]
 8000aa8:	fa04 f303 	lsl.w	r3, r4, r3
 8000aac:	4303      	orrs	r3, r0
 8000aae:	636b      	str	r3, [r5, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ab0:	680b      	ldr	r3, [r1, #0]
 8000ab2:	2b09      	cmp	r3, #9
 8000ab4:	d938      	bls.n	8000b28 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ab6:	6815      	ldr	r5, [r2, #0]
 8000ab8:	68e8      	ldr	r0, [r5, #12]
 8000aba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000abe:	3b1e      	subs	r3, #30
 8000ac0:	2407      	movs	r4, #7
 8000ac2:	409c      	lsls	r4, r3
 8000ac4:	ea20 0004 	bic.w	r0, r0, r4
 8000ac8:	688c      	ldr	r4, [r1, #8]
 8000aca:	fa04 f303 	lsl.w	r3, r4, r3
 8000ace:	4303      	orrs	r3, r0
 8000ad0:	60eb      	str	r3, [r5, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ad2:	680b      	ldr	r3, [r1, #0]
 8000ad4:	3b10      	subs	r3, #16
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d934      	bls.n	8000b44 <HAL_ADC_ConfigChannel+0xd0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ada:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000adc:	2300      	movs	r3, #0
 8000ade:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bc30      	pop	{r4, r5}
 8000ae6:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8000ae8:	2b0c      	cmp	r3, #12
 8000aea:	d80e      	bhi.n	8000b0a <HAL_ADC_ConfigChannel+0x96>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000aec:	6805      	ldr	r5, [r0, #0]
 8000aee:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000af4:	3b23      	subs	r3, #35	; 0x23
 8000af6:	241f      	movs	r4, #31
 8000af8:	409c      	lsls	r4, r3
 8000afa:	ea20 0004 	bic.w	r0, r0, r4
 8000afe:	680c      	ldr	r4, [r1, #0]
 8000b00:	fa04 f303 	lsl.w	r3, r4, r3
 8000b04:	4303      	orrs	r3, r0
 8000b06:	632b      	str	r3, [r5, #48]	; 0x30
 8000b08:	e7d2      	b.n	8000ab0 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000b0a:	6805      	ldr	r5, [r0, #0]
 8000b0c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8000b0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b12:	3b41      	subs	r3, #65	; 0x41
 8000b14:	241f      	movs	r4, #31
 8000b16:	409c      	lsls	r4, r3
 8000b18:	ea20 0004 	bic.w	r0, r0, r4
 8000b1c:	680c      	ldr	r4, [r1, #0]
 8000b1e:	fa04 f303 	lsl.w	r3, r4, r3
 8000b22:	4303      	orrs	r3, r0
 8000b24:	62eb      	str	r3, [r5, #44]	; 0x2c
 8000b26:	e7c3      	b.n	8000ab0 <HAL_ADC_ConfigChannel+0x3c>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b28:	6815      	ldr	r5, [r2, #0]
 8000b2a:	6928      	ldr	r0, [r5, #16]
 8000b2c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000b30:	2407      	movs	r4, #7
 8000b32:	409c      	lsls	r4, r3
 8000b34:	ea20 0004 	bic.w	r0, r0, r4
 8000b38:	688c      	ldr	r4, [r1, #8]
 8000b3a:	fa04 f303 	lsl.w	r3, r4, r3
 8000b3e:	4303      	orrs	r3, r0
 8000b40:	612b      	str	r3, [r5, #16]
 8000b42:	e7c6      	b.n	8000ad2 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8000b44:	6810      	ldr	r0, [r2, #0]
 8000b46:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000b4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000b4e:	4298      	cmp	r0, r3
 8000b50:	d005      	beq.n	8000b5e <HAL_ADC_ConfigChannel+0xea>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b52:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6293      	str	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	e7be      	b.n	8000adc <HAL_ADC_ConfigChannel+0x68>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b5e:	6883      	ldr	r3, [r0, #8]
 8000b60:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8000b64:	d121      	bne.n	8000baa <HAL_ADC_ConfigChannel+0x136>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b66:	6883      	ldr	r3, [r0, #8]
 8000b68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b6c:	6083      	str	r3, [r0, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000b6e:	680b      	ldr	r3, [r1, #0]
 8000b70:	2b10      	cmp	r3, #16
 8000b72:	d001      	beq.n	8000b78 <HAL_ADC_ConfigChannel+0x104>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b74:	2000      	movs	r0, #0
 8000b76:	e7b1      	b.n	8000adc <HAL_ADC_ConfigChannel+0x68>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b78:	f240 0300 	movw	r3, #0
 8000b7c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f64d 6183 	movw	r1, #56963	; 0xde83
 8000b86:	f2c4 311b 	movt	r1, #17179	; 0x431b
 8000b8a:	fba1 1303 	umull	r1, r3, r1, r3
 8000b8e:	0c9b      	lsrs	r3, r3, #18
 8000b90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b94:	0059      	lsls	r1, r3, #1
 8000b96:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8000b98:	e002      	b.n	8000ba0 <HAL_ADC_ConfigChannel+0x12c>
            wait_loop_index--;
 8000b9a:	9b01      	ldr	r3, [sp, #4]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000ba0:	9b01      	ldr	r3, [sp, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f9      	bne.n	8000b9a <HAL_ADC_ConfigChannel+0x126>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	e798      	b.n	8000adc <HAL_ADC_ConfigChannel+0x68>
 8000baa:	2000      	movs	r0, #0
 8000bac:	e796      	b.n	8000adc <HAL_ADC_ConfigChannel+0x68>
  __HAL_LOCK(hadc);
 8000bae:	2002      	movs	r0, #2
 8000bb0:	e797      	b.n	8000ae2 <HAL_ADC_ConfigChannel+0x6e>

08000bb2 <ADC_Enable>:
{
 8000bb2:	b530      	push	{r4, r5, lr}
 8000bb4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000bba:	6803      	ldr	r3, [r0, #0]
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	f012 0f01 	tst.w	r2, #1
 8000bc2:	d134      	bne.n	8000c2e <ADC_Enable+0x7c>
    __HAL_ADC_ENABLE(hadc);
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	f042 0201 	orr.w	r2, r2, #1
 8000bca:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000bcc:	f240 0300 	movw	r3, #0
 8000bd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f64d 6283 	movw	r2, #56963	; 0xde83
 8000bda:	f2c4 321b 	movt	r2, #17179	; 0x431b
 8000bde:	fba2 2303 	umull	r2, r3, r2, r3
 8000be2:	0c9b      	lsrs	r3, r3, #18
 8000be4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000be6:	e002      	b.n	8000bee <ADC_Enable+0x3c>
      wait_loop_index--;
 8000be8:	9b01      	ldr	r3, [sp, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000bee:	9b01      	ldr	r3, [sp, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d1f9      	bne.n	8000be8 <ADC_Enable+0x36>
 8000bf4:	4604      	mov	r4, r0
    tickstart = HAL_GetTick();
 8000bf6:	f7ff fe5e 	bl	80008b6 <HAL_GetTick>
 8000bfa:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000bfc:	6823      	ldr	r3, [r4, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	f013 0f01 	tst.w	r3, #1
 8000c04:	d111      	bne.n	8000c2a <ADC_Enable+0x78>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000c06:	f7ff fe56 	bl	80008b6 <HAL_GetTick>
 8000c0a:	1b40      	subs	r0, r0, r5
 8000c0c:	2802      	cmp	r0, #2
 8000c0e:	d9f5      	bls.n	8000bfc <ADC_Enable+0x4a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 8000c20:	2300      	movs	r3, #0
 8000c22:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        return HAL_ERROR;
 8000c26:	2001      	movs	r0, #1
 8000c28:	e002      	b.n	8000c30 <ADC_Enable+0x7e>
  return HAL_OK;
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	e000      	b.n	8000c30 <ADC_Enable+0x7e>
 8000c2e:	2000      	movs	r0, #0
}
 8000c30:	b003      	add	sp, #12
 8000c32:	bd30      	pop	{r4, r5, pc}

08000c34 <HAL_ADC_Start_IT>:
  __HAL_LOCK(hadc);
 8000c34:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d07c      	beq.n	8000d36 <HAL_ADC_Start_IT+0x102>
{
 8000c3c:	b510      	push	{r4, lr}
 8000c3e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000c40:	2301      	movs	r3, #1
 8000c42:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8000c46:	f7ff ffb4 	bl	8000bb2 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8000c4a:	4602      	mov	r2, r0
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d16d      	bne.n	8000d2c <HAL_ADC_Start_IT+0xf8>
    ADC_STATE_CLR_SET(hadc->State,
 8000c50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c52:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c56:	f023 0301 	bic.w	r3, r3, #1
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c60:	6821      	ldr	r1, [r4, #0]
 8000c62:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c66:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d02c      	beq.n	8000cc8 <HAL_ADC_Start_IT+0x94>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c70:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c74:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c76:	684b      	ldr	r3, [r1, #4]
 8000c78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000c7c:	d005      	beq.n	8000c8a <HAL_ADC_Start_IT+0x56>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c88:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c8c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000c90:	d035      	beq.n	8000cfe <HAL_ADC_Start_IT+0xca>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000c94:	f023 0306 	bic.w	r3, r3, #6
 8000c98:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000ca0:	f06f 0302 	mvn.w	r3, #2
 8000ca4:	600b      	str	r3, [r1, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000ca6:	6821      	ldr	r1, [r4, #0]
 8000ca8:	684b      	ldr	r3, [r1, #4]
 8000caa:	f043 0320 	orr.w	r3, r3, #32
 8000cae:	604b      	str	r3, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	6899      	ldr	r1, [r3, #8]
 8000cb4:	f401 2160 	and.w	r1, r1, #917504	; 0xe0000
 8000cb8:	f5b1 2f60 	cmp.w	r1, #917504	; 0xe0000
 8000cbc:	d022      	beq.n	8000d04 <HAL_ADC_Start_IT+0xd0>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000cbe:	6899      	ldr	r1, [r3, #8]
 8000cc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cc4:	6099      	str	r1, [r3, #8]
 8000cc6:	e034      	b.n	8000d32 <HAL_ADC_Start_IT+0xfe>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000cc8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ccc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000cd6:	d0ca      	beq.n	8000c6e <HAL_ADC_Start_IT+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cde:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ce0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000ce4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000cee:	d0cc      	beq.n	8000c8a <HAL_ADC_Start_IT+0x56>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8000cfc:	e7c5      	b.n	8000c8a <HAL_ADC_Start_IT+0x56>
      ADC_CLEAR_ERRORCODE(hadc);
 8000cfe:	2300      	movs	r3, #0
 8000d00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d02:	e7ca      	b.n	8000c9a <HAL_ADC_Start_IT+0x66>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d04:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8000d08:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d004      	beq.n	8000d1a <HAL_ADC_Start_IT+0xe6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d10:	6899      	ldr	r1, [r3, #8]
 8000d12:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8000d16:	6099      	str	r1, [r3, #8]
 8000d18:	e00b      	b.n	8000d32 <HAL_ADC_Start_IT+0xfe>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d1a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000d1e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8000d22:	6849      	ldr	r1, [r1, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d24:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 8000d28:	d1c9      	bne.n	8000cbe <HAL_ADC_Start_IT+0x8a>
 8000d2a:	e7f1      	b.n	8000d10 <HAL_ADC_Start_IT+0xdc>
    __HAL_UNLOCK(hadc);
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000d32:	4610      	mov	r0, r2
 8000d34:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000d36:	2202      	movs	r2, #2
}
 8000d38:	4610      	mov	r0, r2
 8000d3a:	4770      	bx	lr

08000d3c <HAL_ADC_Start_DMA>:
{
 8000d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000d3e:	6806      	ldr	r6, [r0, #0]
 8000d40:	f44f 5510 	mov.w	r5, #9216	; 0x2400
 8000d44:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8000d48:	42ae      	cmp	r6, r5
 8000d4a:	d06c      	beq.n	8000e26 <HAL_ADC_Start_DMA+0xea>
 8000d4c:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 8000d50:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000d54:	42a6      	cmp	r6, r4
 8000d56:	d066      	beq.n	8000e26 <HAL_ADC_Start_DMA+0xea>
    __HAL_LOCK(hadc);
 8000d58:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8000d5c:	2c01      	cmp	r4, #1
 8000d5e:	f000 8094 	beq.w	8000e8a <HAL_ADC_Start_DMA+0x14e>
 8000d62:	4616      	mov	r6, r2
 8000d64:	460d      	mov	r5, r1
 8000d66:	4604      	mov	r4, r0
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8000d6e:	f7ff ff20 	bl	8000bb2 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8000d72:	4607      	mov	r7, r0
 8000d74:	2800      	cmp	r0, #0
 8000d76:	f040 8083 	bne.w	8000e80 <HAL_ADC_Start_DMA+0x144>
      ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d8a:	6822      	ldr	r2, [r4, #0]
 8000d8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d050      	beq.n	8000e3a <HAL_ADC_Start_DMA+0xfe>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000d9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000d9e:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000da0:	6853      	ldr	r3, [r2, #4]
 8000da2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000da6:	d005      	beq.n	8000db4 <HAL_ADC_Start_DMA+0x78>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000da8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000daa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000db2:	62a3      	str	r3, [r4, #40]	; 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000db6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000dba:	d059      	beq.n	8000e70 <HAL_ADC_Start_DMA+0x134>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000dbe:	f023 0306 	bic.w	r3, r3, #6
 8000dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_UNLOCK(hadc);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dca:	6a22      	ldr	r2, [r4, #32]
 8000dcc:	f640 03ed 	movw	r3, #2285	; 0x8ed
 8000dd0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000dd4:	6293      	str	r3, [r2, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000dd6:	6a22      	ldr	r2, [r4, #32]
 8000dd8:	f640 1341 	movw	r3, #2369	; 0x941
 8000ddc:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000de0:	62d3      	str	r3, [r2, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000de2:	6a22      	ldr	r2, [r4, #32]
 8000de4:	f640 235b 	movw	r3, #2651	; 0xa5b
 8000de8:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dee:	6823      	ldr	r3, [r4, #0]
 8000df0:	f06f 0202 	mvn.w	r2, #2
 8000df4:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000df6:	6822      	ldr	r2, [r4, #0]
 8000df8:	6893      	ldr	r3, [r2, #8]
 8000dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfe:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e00:	6821      	ldr	r1, [r4, #0]
 8000e02:	4633      	mov	r3, r6
 8000e04:	462a      	mov	r2, r5
 8000e06:	314c      	adds	r1, #76	; 0x4c
 8000e08:	6a20      	ldr	r0, [r4, #32]
 8000e0a:	f000 f9af 	bl	800116c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000e0e:	6822      	ldr	r2, [r4, #0]
 8000e10:	6893      	ldr	r3, [r2, #8]
 8000e12:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e16:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e1a:	d02c      	beq.n	8000e76 <HAL_ADC_Start_DMA+0x13a>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e1c:	6893      	ldr	r3, [r2, #8]
 8000e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e22:	6093      	str	r3, [r2, #8]
 8000e24:	e02f      	b.n	8000e86 <HAL_ADC_Start_DMA+0x14a>
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e26:	f44f 5410 	mov.w	r4, #9216	; 0x2400
 8000e2a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8000e2e:	6863      	ldr	r3, [r4, #4]
 8000e30:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000e34:	d090      	beq.n	8000d58 <HAL_ADC_Start_DMA+0x1c>
    tmp_hal_status = HAL_ERROR;
 8000e36:	2701      	movs	r7, #1
 8000e38:	e025      	b.n	8000e86 <HAL_ADC_Start_DMA+0x14a>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000e3a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000e3e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8000e48:	d0a6      	beq.n	8000d98 <HAL_ADC_Start_DMA+0x5c>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000e50:	62a3      	str	r3, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e52:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000e56:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8000e60:	d0a8      	beq.n	8000db4 <HAL_ADC_Start_DMA+0x78>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000e64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e6e:	e7a1      	b.n	8000db4 <HAL_ADC_Start_DMA+0x78>
        ADC_CLEAR_ERRORCODE(hadc);
 8000e70:	2300      	movs	r3, #0
 8000e72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e74:	e7a6      	b.n	8000dc4 <HAL_ADC_Start_DMA+0x88>
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e76:	6893      	ldr	r3, [r2, #8]
 8000e78:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000e7c:	6093      	str	r3, [r2, #8]
 8000e7e:	e002      	b.n	8000e86 <HAL_ADC_Start_DMA+0x14a>
      __HAL_UNLOCK(hadc);
 8000e80:	2300      	movs	r3, #0
 8000e82:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8000e86:	4638      	mov	r0, r7
 8000e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 8000e8a:	2702      	movs	r7, #2
 8000e8c:	e7fb      	b.n	8000e86 <HAL_ADC_Start_DMA+0x14a>

08000e8e <ADC_ConversionStop_Disable>:
{
 8000e8e:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e90:	6803      	ldr	r3, [r0, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	f012 0f01 	tst.w	r2, #1
 8000e98:	d101      	bne.n	8000e9e <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8000e9a:	2000      	movs	r0, #0
}
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
 8000e9e:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000ea8:	f7ff fd05 	bl	80008b6 <HAL_GetTick>
 8000eac:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f013 0f01 	tst.w	r3, #1
 8000eb6:	d00e      	beq.n	8000ed6 <ADC_ConversionStop_Disable+0x48>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eb8:	f7ff fcfd 	bl	80008b6 <HAL_GetTick>
 8000ebc:	1b40      	subs	r0, r0, r5
 8000ebe:	2802      	cmp	r0, #2
 8000ec0:	d9f5      	bls.n	8000eae <ADC_ConversionStop_Disable+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ec4:	f043 0310 	orr.w	r3, r3, #16
 8000ec8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_ERROR;
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	e7e2      	b.n	8000e9c <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e7e0      	b.n	8000e9c <ADC_ConversionStop_Disable+0xe>

08000eda <HAL_ADC_Init>:
  if(hadc == NULL)
 8000eda:	2800      	cmp	r0, #0
 8000edc:	f000 8086 	beq.w	8000fec <HAL_ADC_Init+0x112>
{
 8000ee0:	b538      	push	{r3, r4, r5, lr}
 8000ee2:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d036      	beq.n	8000f58 <HAL_ADC_Init+0x7e>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000eea:	4620      	mov	r0, r4
 8000eec:	f7ff ffcf 	bl	8000e8e <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ef2:	f013 0310 	ands.w	r3, r3, #16
 8000ef6:	d173      	bne.n	8000fe0 <HAL_ADC_Init+0x106>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d171      	bne.n	8000fe0 <HAL_ADC_Init+0x106>
    ADC_STATE_CLR_SET(hadc->State,
 8000efc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000efe:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000f02:	f022 0202 	bic.w	r2, r2, #2
 8000f06:	f042 0202 	orr.w	r2, r2, #2
 8000f0a:	62a2      	str	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f0c:	6862      	ldr	r2, [r4, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f0e:	69e1      	ldr	r1, [r4, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f10:	430a      	orrs	r2, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f12:	7b25      	ldrb	r5, [r4, #12]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f14:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f18:	68a1      	ldr	r1, [r4, #8]
 8000f1a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000f1e:	d024      	beq.n	8000f6a <HAL_ADC_Init+0x90>
 8000f20:	2901      	cmp	r1, #1
 8000f22:	d01f      	beq.n	8000f64 <HAL_ADC_Init+0x8a>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f24:	7d21      	ldrb	r1, [r4, #20]
 8000f26:	2901      	cmp	r1, #1
 8000f28:	d022      	beq.n	8000f70 <HAL_ADC_Init+0x96>
      MODIFY_REG(hadc->Instance->CR1,
 8000f2a:	6825      	ldr	r5, [r4, #0]
 8000f2c:	6869      	ldr	r1, [r5, #4]
 8000f2e:	f421 4169 	bic.w	r1, r1, #59648	; 0xe900
 8000f32:	430b      	orrs	r3, r1
 8000f34:	606b      	str	r3, [r5, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000f36:	6821      	ldr	r1, [r4, #0]
 8000f38:	688d      	ldr	r5, [r1, #8]
 8000f3a:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 8000f3e:	f6cf 73e1 	movt	r3, #65505	; 0xffe1
 8000f42:	402b      	ands	r3, r5
 8000f44:	4313      	orrs	r3, r2
 8000f46:	608b      	str	r3, [r1, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000f48:	68a3      	ldr	r3, [r4, #8]
 8000f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f4e:	d020      	beq.n	8000f92 <HAL_ADC_Init+0xb8>
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d01e      	beq.n	8000f92 <HAL_ADC_Init+0xb8>
  uint32_t tmp_sqr1 = 0U;
 8000f54:	2100      	movs	r1, #0
 8000f56:	e01f      	b.n	8000f98 <HAL_ADC_Init+0xbe>
    ADC_CLEAR_ERRORCODE(hadc);
 8000f58:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8000f5a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8000f5e:	f7ff faeb 	bl	8000538 <HAL_ADC_MspInit>
 8000f62:	e7c2      	b.n	8000eea <HAL_ADC_Init+0x10>
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f68:	e7dc      	b.n	8000f24 <HAL_ADC_Init+0x4a>
 8000f6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f6e:	e7d9      	b.n	8000f24 <HAL_ADC_Init+0x4a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f70:	b935      	cbnz	r5, 8000f80 <HAL_ADC_Init+0xa6>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f72:	69a1      	ldr	r1, [r4, #24]
 8000f74:	3901      	subs	r1, #1
 8000f76:	ea43 3341 	orr.w	r3, r3, r1, lsl #13
 8000f7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7e:	e7d4      	b.n	8000f2a <HAL_ADC_Init+0x50>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f80:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000f82:	f041 0120 	orr.w	r1, r1, #32
 8000f86:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f88:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f8a:	f041 0101 	orr.w	r1, r1, #1
 8000f8e:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000f90:	e7cb      	b.n	8000f2a <HAL_ADC_Init+0x50>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000f92:	6923      	ldr	r3, [r4, #16]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	0519      	lsls	r1, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000f98:	6825      	ldr	r5, [r4, #0]
 8000f9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8000f9c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	430b      	orrs	r3, r1
 8000fa2:	62eb      	str	r3, [r5, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000fa4:	6823      	ldr	r3, [r4, #0]
 8000fa6:	6899      	ldr	r1, [r3, #8]
 8000fa8:	f640 63fe 	movw	r3, #3838	; 0xefe
 8000fac:	f6cf 731f 	movt	r3, #65311	; 0xff1f
 8000fb0:	400b      	ands	r3, r1
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d00b      	beq.n	8000fce <HAL_ADC_Init+0xf4>
      ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fb8:	f023 0312 	bic.w	r3, r3, #18
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
      tmp_hal_status = HAL_ERROR;
 8000fca:	2001      	movs	r0, #1
 8000fcc:	e00d      	b.n	8000fea <HAL_ADC_Init+0x110>
      ADC_CLEAR_ERRORCODE(hadc);
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000fd2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fd4:	f023 0303 	bic.w	r3, r3, #3
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000fde:	e004      	b.n	8000fea <HAL_ADC_Init+0x110>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fe2:	f043 0310 	orr.w	r3, r3, #16
 8000fe6:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
}
 8000fee:	4770      	bx	lr

08000ff0 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000ff0:	4770      	bx	lr

08000ff2 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000ff6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000ffa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001000:	041b      	lsls	r3, r3, #16
 8001002:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001004:	0200      	lsls	r0, r0, #8
 8001006:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 800100c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001010:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001014:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001016:	4770      	bx	lr

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800101e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	f1c3 0407 	rsb	r4, r3, #7
 800102c:	2c04      	cmp	r4, #4
 800102e:	bf28      	it	cs
 8001030:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	1d1d      	adds	r5, r3, #4
 8001034:	2d06      	cmp	r5, #6
 8001036:	d918      	bls.n	800106a <HAL_NVIC_SetPriority+0x52>
 8001038:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103a:	f04f 35ff 	mov.w	r5, #4294967295
 800103e:	fa05 f404 	lsl.w	r4, r5, r4
 8001042:	ea21 0104 	bic.w	r1, r1, r4
 8001046:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	fa05 f303 	lsl.w	r3, r5, r3
 800104c:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001052:	2800      	cmp	r0, #0
 8001054:	db0b      	blt.n	800106e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	0109      	lsls	r1, r1, #4
 8001058:	b2c9      	uxtb	r1, r1
 800105a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800105e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001062:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001066:	bc30      	pop	{r4, r5}
 8001068:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	2300      	movs	r3, #0
 800106c:	e7e5      	b.n	800103a <HAL_NVIC_SetPriority+0x22>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	f000 000f 	and.w	r0, r0, #15
 8001072:	0109      	lsls	r1, r1, #4
 8001074:	b2c9      	uxtb	r1, r1
 8001076:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 800107a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800107e:	4403      	add	r3, r0
 8001080:	7619      	strb	r1, [r3, #24]
 8001082:	e7f0      	b.n	8001066 <HAL_NVIC_SetPriority+0x4e>

08001084 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001084:	2800      	cmp	r0, #0
 8001086:	db0a      	blt.n	800109e <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001088:	f000 031f 	and.w	r3, r0, #31
 800108c:	0940      	lsrs	r0, r0, #5
 800108e:	2201      	movs	r2, #1
 8001090:	409a      	lsls	r2, r3
 8001092:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8001096:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800109a:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800109e:	4770      	bx	lr

080010a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	3801      	subs	r0, #1
 80010a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010a6:	d210      	bcs.n	80010ca <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80010ac:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80010b6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80010ba:	21f0      	movs	r1, #240	; 0xf0
 80010bc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	2000      	movs	r0, #0
 80010c2:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010cc:	4770      	bx	lr

080010ce <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ce:	b470      	push	{r4, r5, r6}
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010d0:	6c06      	ldr	r6, [r0, #64]	; 0x40
 80010d2:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80010d4:	2401      	movs	r4, #1
 80010d6:	40b4      	lsls	r4, r6
 80010d8:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80010da:	6804      	ldr	r4, [r0, #0]
 80010dc:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80010de:	6843      	ldr	r3, [r0, #4]
 80010e0:	2b10      	cmp	r3, #16
 80010e2:	d005      	beq.n	80010f0 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80010e4:	6803      	ldr	r3, [r0, #0]
 80010e6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	60da      	str	r2, [r3, #12]
  }
}
 80010ec:	bc70      	pop	{r4, r5, r6}
 80010ee:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80010f0:	6803      	ldr	r3, [r0, #0]
 80010f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80010f4:	6803      	ldr	r3, [r0, #0]
 80010f6:	60d9      	str	r1, [r3, #12]
 80010f8:	e7f8      	b.n	80010ec <DMA_SetConfig+0x1e>

080010fa <HAL_DMA_Init>:
  if(hdma == NULL)
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d034      	beq.n	8001168 <HAL_DMA_Init+0x6e>
{
 80010fe:	b410      	push	{r4}
 8001100:	4602      	mov	r2, r0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001102:	6801      	ldr	r1, [r0, #0]
 8001104:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001108:	f6cb 73fd 	movt	r3, #49149	; 0xbffd
 800110c:	440b      	add	r3, r1
 800110e:	f64c 40cd 	movw	r0, #52429	; 0xcccd
 8001112:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
 8001116:	fba0 0303 	umull	r0, r3, r0, r3
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001120:	2300      	movs	r3, #0
 8001122:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001126:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_BUSY;
 8001128:	2302      	movs	r3, #2
 800112a:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 800112e:	6808      	ldr	r0, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001130:	f420 507f 	bic.w	r0, r0, #16320	; 0x3fc0
 8001134:	f020 0030 	bic.w	r0, r0, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001138:	6853      	ldr	r3, [r2, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113a:	6894      	ldr	r4, [r2, #8]
  tmp |=  hdma->Init.Direction        |
 800113c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113e:	68d4      	ldr	r4, [r2, #12]
 8001140:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001142:	6914      	ldr	r4, [r2, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001144:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001146:	6954      	ldr	r4, [r2, #20]
 8001148:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800114a:	6994      	ldr	r4, [r2, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800114c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 800114e:	69d4      	ldr	r4, [r2, #28]
 8001150:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001152:	4303      	orrs	r3, r0
  hdma->Instance->CCR = tmp;
 8001154:	600b      	str	r3, [r1, #0]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001156:	2000      	movs	r0, #0
 8001158:	6390      	str	r0, [r2, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800115a:	2301      	movs	r3, #1
 800115c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001160:	f882 0020 	strb.w	r0, [r2, #32]
}
 8001164:	bc10      	pop	{r4}
 8001166:	4770      	bx	lr
    return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
}
 800116a:	4770      	bx	lr

0800116c <HAL_DMA_Start_IT>:
{
 800116c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800116e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001172:	2c01      	cmp	r4, #1
 8001174:	d032      	beq.n	80011dc <HAL_DMA_Start_IT+0x70>
 8001176:	2401      	movs	r4, #1
 8001178:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800117c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001180:	2c01      	cmp	r4, #1
 8001182:	d004      	beq.n	800118e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001184:	2300      	movs	r3, #0
 8001186:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 800118a:	2002      	movs	r0, #2
}
 800118c:	bd38      	pop	{r3, r4, r5, pc}
 800118e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001190:	2002      	movs	r0, #2
 8001192:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001196:	2000      	movs	r0, #0
 8001198:	63a0      	str	r0, [r4, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800119a:	6825      	ldr	r5, [r4, #0]
 800119c:	6828      	ldr	r0, [r5, #0]
 800119e:	f020 0001 	bic.w	r0, r0, #1
 80011a2:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff ff92 	bl	80010ce <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback)
 80011aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80011ac:	b15b      	cbz	r3, 80011c6 <HAL_DMA_Start_IT+0x5a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ae:	6822      	ldr	r2, [r4, #0]
 80011b0:	6813      	ldr	r3, [r2, #0]
 80011b2:	f043 030e 	orr.w	r3, r3, #14
 80011b6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80011b8:	6822      	ldr	r2, [r4, #0]
 80011ba:	6813      	ldr	r3, [r2, #0]
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7e2      	b.n	800118c <HAL_DMA_Start_IT+0x20>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011c6:	6822      	ldr	r2, [r4, #0]
 80011c8:	6813      	ldr	r3, [r2, #0]
 80011ca:	f023 0304 	bic.w	r3, r3, #4
 80011ce:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011d0:	6822      	ldr	r2, [r4, #0]
 80011d2:	6813      	ldr	r3, [r2, #0]
 80011d4:	f043 030a 	orr.w	r3, r3, #10
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e7ed      	b.n	80011b8 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 80011dc:	2002      	movs	r0, #2
 80011de:	e7d5      	b.n	800118c <HAL_DMA_Start_IT+0x20>

080011e0 <HAL_DMA_Abort_IT>:
{  
 80011e0:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011e2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d003      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ea:	2304      	movs	r3, #4
 80011ec:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
}
 80011f0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f2:	6802      	ldr	r2, [r0, #0]
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	f023 030e 	bic.w	r3, r3, #14
 80011fa:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80011fc:	6802      	ldr	r2, [r0, #0]
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001206:	6802      	ldr	r2, [r0, #0]
 8001208:	2308      	movs	r3, #8
 800120a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800120e:	429a      	cmp	r2, r3
 8001210:	d01e      	beq.n	8001250 <HAL_DMA_Abort_IT+0x70>
 8001212:	231c      	movs	r3, #28
 8001214:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001218:	429a      	cmp	r2, r3
 800121a:	d029      	beq.n	8001270 <HAL_DMA_Abort_IT+0x90>
 800121c:	2330      	movs	r3, #48	; 0x30
 800121e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001222:	429a      	cmp	r2, r3
 8001224:	d026      	beq.n	8001274 <HAL_DMA_Abort_IT+0x94>
 8001226:	2344      	movs	r3, #68	; 0x44
 8001228:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800122c:	429a      	cmp	r2, r3
 800122e:	d024      	beq.n	800127a <HAL_DMA_Abort_IT+0x9a>
 8001230:	2358      	movs	r3, #88	; 0x58
 8001232:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001236:	429a      	cmp	r2, r3
 8001238:	d022      	beq.n	8001280 <HAL_DMA_Abort_IT+0xa0>
 800123a:	236c      	movs	r3, #108	; 0x6c
 800123c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001240:	429a      	cmp	r2, r3
 8001242:	d002      	beq.n	800124a <HAL_DMA_Abort_IT+0x6a>
 8001244:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001248:	e003      	b.n	8001252 <HAL_DMA_Abort_IT+0x72>
 800124a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800124e:	e000      	b.n	8001252 <HAL_DMA_Abort_IT+0x72>
 8001250:	2201      	movs	r2, #1
 8001252:	2300      	movs	r3, #0
 8001254:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001258:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800125a:	2301      	movs	r3, #1
 800125c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001260:	2300      	movs	r3, #0
 8001262:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001266:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001268:	b16b      	cbz	r3, 8001286 <HAL_DMA_Abort_IT+0xa6>
      hdma->XferAbortCallback(hdma);
 800126a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800126c:	2000      	movs	r0, #0
 800126e:	e7bf      	b.n	80011f0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001270:	2210      	movs	r2, #16
 8001272:	e7ee      	b.n	8001252 <HAL_DMA_Abort_IT+0x72>
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	e7eb      	b.n	8001252 <HAL_DMA_Abort_IT+0x72>
 800127a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800127e:	e7e8      	b.n	8001252 <HAL_DMA_Abort_IT+0x72>
 8001280:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001284:	e7e5      	b.n	8001252 <HAL_DMA_Abort_IT+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8001286:	2000      	movs	r0, #0
 8001288:	e7b2      	b.n	80011f0 <HAL_DMA_Abort_IT+0x10>

0800128a <HAL_DMA_IRQHandler>:
{
 800128a:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800128c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800128e:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001290:	6804      	ldr	r4, [r0, #0]
 8001292:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001294:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001296:	2304      	movs	r3, #4
 8001298:	408b      	lsls	r3, r1
 800129a:	4213      	tst	r3, r2
 800129c:	d043      	beq.n	8001326 <HAL_DMA_IRQHandler+0x9c>
 800129e:	f015 0f04 	tst.w	r5, #4
 80012a2:	d040      	beq.n	8001326 <HAL_DMA_IRQHandler+0x9c>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	f013 0f20 	tst.w	r3, #32
 80012aa:	d103      	bne.n	80012b4 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012ac:	6823      	ldr	r3, [r4, #0]
 80012ae:	f023 0304 	bic.w	r3, r3, #4
 80012b2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012b4:	6802      	ldr	r2, [r0, #0]
 80012b6:	2308      	movs	r3, #8
 80012b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012bc:	429a      	cmp	r2, r3
 80012be:	d01e      	beq.n	80012fe <HAL_DMA_IRQHandler+0x74>
 80012c0:	231c      	movs	r3, #28
 80012c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d022      	beq.n	8001310 <HAL_DMA_IRQHandler+0x86>
 80012ca:	2330      	movs	r3, #48	; 0x30
 80012cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d01f      	beq.n	8001314 <HAL_DMA_IRQHandler+0x8a>
 80012d4:	2344      	movs	r3, #68	; 0x44
 80012d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012da:	429a      	cmp	r2, r3
 80012dc:	d01d      	beq.n	800131a <HAL_DMA_IRQHandler+0x90>
 80012de:	2358      	movs	r3, #88	; 0x58
 80012e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d01b      	beq.n	8001320 <HAL_DMA_IRQHandler+0x96>
 80012e8:	236c      	movs	r3, #108	; 0x6c
 80012ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d002      	beq.n	80012f8 <HAL_DMA_IRQHandler+0x6e>
 80012f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012f6:	e003      	b.n	8001300 <HAL_DMA_IRQHandler+0x76>
 80012f8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012fc:	e000      	b.n	8001300 <HAL_DMA_IRQHandler+0x76>
 80012fe:	2204      	movs	r2, #4
 8001300:	2300      	movs	r3, #0
 8001302:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001306:	605a      	str	r2, [r3, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001308:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800130a:	b103      	cbz	r3, 800130e <HAL_DMA_IRQHandler+0x84>
      hdma->XferHalfCpltCallback(hdma);
 800130c:	4798      	blx	r3
}
 800130e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001310:	2240      	movs	r2, #64	; 0x40
 8001312:	e7f5      	b.n	8001300 <HAL_DMA_IRQHandler+0x76>
 8001314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001318:	e7f2      	b.n	8001300 <HAL_DMA_IRQHandler+0x76>
 800131a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800131e:	e7ef      	b.n	8001300 <HAL_DMA_IRQHandler+0x76>
 8001320:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001324:	e7ec      	b.n	8001300 <HAL_DMA_IRQHandler+0x76>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001326:	2302      	movs	r3, #2
 8001328:	408b      	lsls	r3, r1
 800132a:	4213      	tst	r3, r2
 800132c:	d04a      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x13a>
 800132e:	f015 0f02 	tst.w	r5, #2
 8001332:	d047      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x13a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001334:	6823      	ldr	r3, [r4, #0]
 8001336:	f013 0f20 	tst.w	r3, #32
 800133a:	d106      	bne.n	800134a <HAL_DMA_IRQHandler+0xc0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	f023 030a 	bic.w	r3, r3, #10
 8001342:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001344:	2301      	movs	r3, #1
 8001346:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800134a:	6802      	ldr	r2, [r0, #0]
 800134c:	2308      	movs	r3, #8
 800134e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001352:	429a      	cmp	r2, r3
 8001354:	d01e      	beq.n	8001394 <HAL_DMA_IRQHandler+0x10a>
 8001356:	231c      	movs	r3, #28
 8001358:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800135c:	429a      	cmp	r2, r3
 800135e:	d026      	beq.n	80013ae <HAL_DMA_IRQHandler+0x124>
 8001360:	2330      	movs	r3, #48	; 0x30
 8001362:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001366:	429a      	cmp	r2, r3
 8001368:	d023      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x128>
 800136a:	2344      	movs	r3, #68	; 0x44
 800136c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001370:	429a      	cmp	r2, r3
 8001372:	d021      	beq.n	80013b8 <HAL_DMA_IRQHandler+0x12e>
 8001374:	2358      	movs	r3, #88	; 0x58
 8001376:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800137a:	429a      	cmp	r2, r3
 800137c:	d01f      	beq.n	80013be <HAL_DMA_IRQHandler+0x134>
 800137e:	236c      	movs	r3, #108	; 0x6c
 8001380:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001384:	429a      	cmp	r2, r3
 8001386:	d002      	beq.n	800138e <HAL_DMA_IRQHandler+0x104>
 8001388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800138c:	e003      	b.n	8001396 <HAL_DMA_IRQHandler+0x10c>
 800138e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001392:	e000      	b.n	8001396 <HAL_DMA_IRQHandler+0x10c>
 8001394:	2202      	movs	r2, #2
 8001396:	2300      	movs	r3, #0
 8001398:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800139c:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 800139e:	2300      	movs	r3, #0
 80013a0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80013a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d0b1      	beq.n	800130e <HAL_DMA_IRQHandler+0x84>
      hdma->XferCpltCallback(hdma);
 80013aa:	4798      	blx	r3
 80013ac:	e7af      	b.n	800130e <HAL_DMA_IRQHandler+0x84>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013ae:	2220      	movs	r2, #32
 80013b0:	e7f1      	b.n	8001396 <HAL_DMA_IRQHandler+0x10c>
 80013b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013b6:	e7ee      	b.n	8001396 <HAL_DMA_IRQHandler+0x10c>
 80013b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013bc:	e7eb      	b.n	8001396 <HAL_DMA_IRQHandler+0x10c>
 80013be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013c2:	e7e8      	b.n	8001396 <HAL_DMA_IRQHandler+0x10c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013c4:	2308      	movs	r3, #8
 80013c6:	fa03 f101 	lsl.w	r1, r3, r1
 80013ca:	4211      	tst	r1, r2
 80013cc:	d09f      	beq.n	800130e <HAL_DMA_IRQHandler+0x84>
 80013ce:	f015 0f08 	tst.w	r5, #8
 80013d2:	d09c      	beq.n	800130e <HAL_DMA_IRQHandler+0x84>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013d4:	6823      	ldr	r3, [r4, #0]
 80013d6:	f023 030e 	bic.w	r3, r3, #14
 80013da:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80013de:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80013e0:	2301      	movs	r3, #1
 80013e2:	fa03 f202 	lsl.w	r2, r3, r2
 80013e6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80013e8:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80013ea:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80013ee:	2300      	movs	r3, #0
 80013f0:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80013f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d089      	beq.n	800130e <HAL_DMA_IRQHandler+0x84>
      hdma->XferErrorCallback(hdma);
 80013fa:	4798      	blx	r3
  return;
 80013fc:	e787      	b.n	800130e <HAL_DMA_IRQHandler+0x84>

080013fe <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fe:	b4f0      	push	{r4, r5, r6, r7}
 8001400:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001402:	2600      	movs	r6, #0
  uint32_t position = 0x00u;
 8001404:	4632      	mov	r2, r6
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e0cd      	b.n	80015a4 <HAL_GPIO_Init+0x1a6>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001408:	2d00      	cmp	r5, #0
 800140a:	d077      	beq.n	80014fc <HAL_GPIO_Init+0xfe>
 800140c:	2d01      	cmp	r5, #1
 800140e:	d100      	bne.n	8001412 <HAL_GPIO_Init+0x14>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001410:	68ce      	ldr	r6, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	f200 8086 	bhi.w	8001524 <HAL_GPIO_Init+0x126>
 8001418:	4684      	mov	ip, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800141a:	2bff      	cmp	r3, #255	; 0xff
 800141c:	f200 8085 	bhi.w	800152a <HAL_GPIO_Init+0x12c>
 8001420:	0095      	lsls	r5, r2, #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001422:	f8dc 4000 	ldr.w	r4, [ip]
 8001426:	270f      	movs	r7, #15
 8001428:	40af      	lsls	r7, r5
 800142a:	ea24 0407 	bic.w	r4, r4, r7
 800142e:	fa06 f505 	lsl.w	r5, r6, r5
 8001432:	432c      	orrs	r4, r5
 8001434:	f8cc 4000 	str.w	r4, [ip]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001438:	684c      	ldr	r4, [r1, #4]
 800143a:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 800143e:	f000 80b0 	beq.w	80015a2 <HAL_GPIO_Init+0x1a4>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001442:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 8001446:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800144a:	69a5      	ldr	r5, [r4, #24]
 800144c:	f045 0501 	orr.w	r5, r5, #1
 8001450:	61a5      	str	r5, [r4, #24]
 8001452:	69a4      	ldr	r4, [r4, #24]
 8001454:	f004 0401 	and.w	r4, r4, #1
 8001458:	9401      	str	r4, [sp, #4]
 800145a:	9c01      	ldr	r4, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800145c:	0895      	lsrs	r5, r2, #2
 800145e:	2400      	movs	r4, #0
 8001460:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001464:	1caf      	adds	r7, r5, #2
 8001466:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800146a:	f002 0703 	and.w	r7, r2, #3
 800146e:	00bf      	lsls	r7, r7, #2
 8001470:	f04f 0c0f 	mov.w	ip, #15
 8001474:	fa0c fc07 	lsl.w	ip, ip, r7
 8001478:	ea24 0c0c 	bic.w	ip, r4, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800147c:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001480:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001484:	42a0      	cmp	r0, r4
 8001486:	d056      	beq.n	8001536 <HAL_GPIO_Init+0x138>
 8001488:	f44f 6440 	mov.w	r4, #3072	; 0xc00
 800148c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001490:	42a0      	cmp	r0, r4
 8001492:	f000 80a1 	beq.w	80015d8 <HAL_GPIO_Init+0x1da>
 8001496:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 800149a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800149e:	42a0      	cmp	r0, r4
 80014a0:	f000 809c 	beq.w	80015dc <HAL_GPIO_Init+0x1de>
 80014a4:	f44f 54a0 	mov.w	r4, #5120	; 0x1400
 80014a8:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80014ac:	42a0      	cmp	r0, r4
 80014ae:	d040      	beq.n	8001532 <HAL_GPIO_Init+0x134>
 80014b0:	2404      	movs	r4, #4
 80014b2:	e041      	b.n	8001538 <HAL_GPIO_Init+0x13a>
      switch (GPIO_Init->Mode)
 80014b4:	2700      	movs	r7, #0
 80014b6:	f2c1 0721 	movt	r7, #4129	; 0x1021
 80014ba:	42bd      	cmp	r5, r7
 80014bc:	d01e      	beq.n	80014fc <HAL_GPIO_Init+0xfe>
 80014be:	2700      	movs	r7, #0
 80014c0:	f2c1 0721 	movt	r7, #4129	; 0x1021
 80014c4:	42bd      	cmp	r5, r7
 80014c6:	d90f      	bls.n	80014e8 <HAL_GPIO_Init+0xea>
 80014c8:	2700      	movs	r7, #0
 80014ca:	f2c1 0731 	movt	r7, #4145	; 0x1031
 80014ce:	42bd      	cmp	r5, r7
 80014d0:	d014      	beq.n	80014fc <HAL_GPIO_Init+0xfe>
 80014d2:	2700      	movs	r7, #0
 80014d4:	f2c1 0732 	movt	r7, #4146	; 0x1032
 80014d8:	42bd      	cmp	r5, r7
 80014da:	d00f      	beq.n	80014fc <HAL_GPIO_Init+0xfe>
 80014dc:	2700      	movs	r7, #0
 80014de:	f2c1 0722 	movt	r7, #4130	; 0x1022
 80014e2:	42bd      	cmp	r5, r7
 80014e4:	d195      	bne.n	8001412 <HAL_GPIO_Init+0x14>
 80014e6:	e009      	b.n	80014fc <HAL_GPIO_Init+0xfe>
 80014e8:	2700      	movs	r7, #0
 80014ea:	f2c1 0711 	movt	r7, #4113	; 0x1011
 80014ee:	42bd      	cmp	r5, r7
 80014f0:	d004      	beq.n	80014fc <HAL_GPIO_Init+0xfe>
 80014f2:	2700      	movs	r7, #0
 80014f4:	f2c1 0712 	movt	r7, #4114	; 0x1012
 80014f8:	42bd      	cmp	r5, r7
 80014fa:	d18a      	bne.n	8001412 <HAL_GPIO_Init+0x14>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014fc:	688d      	ldr	r5, [r1, #8]
 80014fe:	b17d      	cbz	r5, 8001520 <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001500:	2d01      	cmp	r5, #1
 8001502:	d008      	beq.n	8001516 <HAL_GPIO_Init+0x118>
            GPIOx->BRR = ioposition;
 8001504:	6144      	str	r4, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001506:	2608      	movs	r6, #8
 8001508:	e783      	b.n	8001412 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800150a:	68ce      	ldr	r6, [r1, #12]
 800150c:	3608      	adds	r6, #8
          break;
 800150e:	e780      	b.n	8001412 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001510:	68ce      	ldr	r6, [r1, #12]
 8001512:	360c      	adds	r6, #12
          break;
 8001514:	e77d      	b.n	8001412 <HAL_GPIO_Init+0x14>
            GPIOx->BSRR = ioposition;
 8001516:	6104      	str	r4, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001518:	2608      	movs	r6, #8
 800151a:	e77a      	b.n	8001412 <HAL_GPIO_Init+0x14>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800151c:	2600      	movs	r6, #0
 800151e:	e778      	b.n	8001412 <HAL_GPIO_Init+0x14>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001520:	2604      	movs	r6, #4
 8001522:	e776      	b.n	8001412 <HAL_GPIO_Init+0x14>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001524:	f100 0c04 	add.w	ip, r0, #4
 8001528:	e777      	b.n	800141a <HAL_GPIO_Init+0x1c>
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800152a:	f1a2 0508 	sub.w	r5, r2, #8
 800152e:	00ad      	lsls	r5, r5, #2
 8001530:	e777      	b.n	8001422 <HAL_GPIO_Init+0x24>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001532:	2403      	movs	r4, #3
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x13a>
 8001536:	2400      	movs	r4, #0
 8001538:	40bc      	lsls	r4, r7
 800153a:	ea44 040c 	orr.w	r4, r4, ip
        AFIO->EXTICR[position >> 2u] = temp;
 800153e:	2700      	movs	r7, #0
 8001540:	f2c4 0701 	movt	r7, #16385	; 0x4001
 8001544:	3502      	adds	r5, #2
 8001546:	f847 4025 	str.w	r4, [r7, r5, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800154a:	684c      	ldr	r4, [r1, #4]
 800154c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 8001550:	d046      	beq.n	80015e0 <HAL_GPIO_Init+0x1e2>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001556:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800155a:	6825      	ldr	r5, [r4, #0]
 800155c:	431d      	orrs	r5, r3
 800155e:	6025      	str	r5, [r4, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001560:	684c      	ldr	r4, [r1, #4]
 8001562:	f414 3f00 	tst.w	r4, #131072	; 0x20000
 8001566:	d044      	beq.n	80015f2 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800156c:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001570:	6865      	ldr	r5, [r4, #4]
 8001572:	431d      	orrs	r5, r3
 8001574:	6065      	str	r5, [r4, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001576:	684c      	ldr	r4, [r1, #4]
 8001578:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
 800157c:	d042      	beq.n	8001604 <HAL_GPIO_Init+0x206>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800157e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001582:	f2c4 0401 	movt	r4, #16385	; 0x4001
 8001586:	68a5      	ldr	r5, [r4, #8]
 8001588:	431d      	orrs	r5, r3
 800158a:	60a5      	str	r5, [r4, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800158c:	684c      	ldr	r4, [r1, #4]
 800158e:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
 8001592:	d040      	beq.n	8001616 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001598:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800159c:	68e5      	ldr	r5, [r4, #12]
 800159e:	432b      	orrs	r3, r5
 80015a0:	60e3      	str	r3, [r4, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 80015a2:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a4:	680b      	ldr	r3, [r1, #0]
 80015a6:	fa33 f402 	lsrs.w	r4, r3, r2
 80015aa:	d03d      	beq.n	8001628 <HAL_GPIO_Init+0x22a>
    ioposition = (0x01uL << position);
 80015ac:	2401      	movs	r4, #1
 80015ae:	4094      	lsls	r4, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b0:	4023      	ands	r3, r4
    if (iocurrent == ioposition)
 80015b2:	429c      	cmp	r4, r3
 80015b4:	d1f5      	bne.n	80015a2 <HAL_GPIO_Init+0x1a4>
      switch (GPIO_Init->Mode)
 80015b6:	684d      	ldr	r5, [r1, #4]
 80015b8:	2d12      	cmp	r5, #18
 80015ba:	d0a9      	beq.n	8001510 <HAL_GPIO_Init+0x112>
 80015bc:	f63f af7a 	bhi.w	80014b4 <HAL_GPIO_Init+0xb6>
 80015c0:	2d02      	cmp	r5, #2
 80015c2:	d0a2      	beq.n	800150a <HAL_GPIO_Init+0x10c>
 80015c4:	f67f af20 	bls.w	8001408 <HAL_GPIO_Init+0xa>
 80015c8:	2d03      	cmp	r5, #3
 80015ca:	d0a7      	beq.n	800151c <HAL_GPIO_Init+0x11e>
 80015cc:	2d11      	cmp	r5, #17
 80015ce:	f47f af20 	bne.w	8001412 <HAL_GPIO_Init+0x14>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d2:	68ce      	ldr	r6, [r1, #12]
 80015d4:	3604      	adds	r6, #4
          break;
 80015d6:	e71c      	b.n	8001412 <HAL_GPIO_Init+0x14>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015d8:	2401      	movs	r4, #1
 80015da:	e7ad      	b.n	8001538 <HAL_GPIO_Init+0x13a>
 80015dc:	2402      	movs	r4, #2
 80015de:	e7ab      	b.n	8001538 <HAL_GPIO_Init+0x13a>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80015e4:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80015e8:	6825      	ldr	r5, [r4, #0]
 80015ea:	ea25 0503 	bic.w	r5, r5, r3
 80015ee:	6025      	str	r5, [r4, #0]
 80015f0:	e7b6      	b.n	8001560 <HAL_GPIO_Init+0x162>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80015f6:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80015fa:	6865      	ldr	r5, [r4, #4]
 80015fc:	ea25 0503 	bic.w	r5, r5, r3
 8001600:	6065      	str	r5, [r4, #4]
 8001602:	e7b8      	b.n	8001576 <HAL_GPIO_Init+0x178>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001604:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001608:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800160c:	68a5      	ldr	r5, [r4, #8]
 800160e:	ea25 0503 	bic.w	r5, r5, r3
 8001612:	60a5      	str	r5, [r4, #8]
 8001614:	e7ba      	b.n	800158c <HAL_GPIO_Init+0x18e>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001616:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800161a:	f2c4 0401 	movt	r4, #16385	; 0x4001
 800161e:	68e5      	ldr	r5, [r4, #12]
 8001620:	ea25 0303 	bic.w	r3, r5, r3
 8001624:	60e3      	str	r3, [r4, #12]
 8001626:	e7bc      	b.n	80015a2 <HAL_GPIO_Init+0x1a4>
  }
}
 8001628:	b002      	add	sp, #8
 800162a:	bcf0      	pop	{r4, r5, r6, r7}
 800162c:	4770      	bx	lr

0800162e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800162e:	b912      	cbnz	r2, 8001636 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001630:	0409      	lsls	r1, r1, #16
 8001632:	6101      	str	r1, [r0, #16]
  }
}
 8001634:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001636:	6101      	str	r1, [r0, #16]
 8001638:	4770      	bx	lr

0800163a <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800163a:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800163c:	f240 0300 	movw	r3, #0
 8001640:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f644 52d3 	movw	r2, #19923	; 0x4dd3
 800164a:	f2c1 0262 	movt	r2, #4194	; 0x1062
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	0a5b      	lsrs	r3, r3, #9
 8001654:	fb00 f003 	mul.w	r0, r0, r3
 8001658:	9001      	str	r0, [sp, #4]
  do
  {
    __NOP();
 800165a:	bf00      	nop
  }
  while (Delay --);
 800165c:	9b01      	ldr	r3, [sp, #4]
 800165e:	1e5a      	subs	r2, r3, #1
 8001660:	9201      	str	r2, [sp, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f9      	bne.n	800165a <RCC_Delay+0x20>
}
 8001666:	b002      	add	sp, #8
 8001668:	4770      	bx	lr

0800166a <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800166a:	2800      	cmp	r0, #0
 800166c:	f000 826b 	beq.w	8001b46 <HAL_RCC_OscConfig+0x4dc>
{
 8001670:	b570      	push	{r4, r5, r6, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001676:	6803      	ldr	r3, [r0, #0]
 8001678:	f013 0f01 	tst.w	r3, #1
 800167c:	d038      	beq.n	80016f0 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800167e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001682:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b04      	cmp	r3, #4
 800168e:	d023      	beq.n	80016d8 <HAL_RCC_OscConfig+0x6e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001694:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f003 030c 	and.w	r3, r3, #12
 800169e:	2b08      	cmp	r3, #8
 80016a0:	d012      	beq.n	80016c8 <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	6863      	ldr	r3, [r4, #4]
 80016a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a8:	d054      	beq.n	8001754 <HAL_RCC_OscConfig+0xea>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d16e      	bne.n	800178c <HAL_RCC_OscConfig+0x122>
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e04d      	b.n	8001764 <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80016d6:	d0e4      	beq.n	80016a2 <HAL_RCC_OscConfig+0x38>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80016e6:	d003      	beq.n	80016f0 <HAL_RCC_OscConfig+0x86>
 80016e8:	6863      	ldr	r3, [r4, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 822d 	beq.w	8001b4a <HAL_RCC_OscConfig+0x4e0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	f013 0f02 	tst.w	r3, #2
 80016f6:	f000 8098 	beq.w	800182a <HAL_RCC_OscConfig+0x1c0>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f013 0f0c 	tst.w	r3, #12
 8001708:	d077      	beq.n	80017fa <HAL_RCC_OscConfig+0x190>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800170a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800170e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 030c 	and.w	r3, r3, #12
 8001718:	2b08      	cmp	r3, #8
 800171a:	d066      	beq.n	80017ea <HAL_RCC_OscConfig+0x180>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800171c:	6923      	ldr	r3, [r4, #16]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 80ae 	beq.w	8001880 <HAL_RCC_OscConfig+0x216>
        __HAL_RCC_HSI_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	f2c4 2342 	movt	r3, #16962	; 0x4242
 800172a:	2201      	movs	r2, #1
 800172c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800172e:	f7ff f8c2 	bl	80008b6 <HAL_GetTick>
 8001732:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001738:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f013 0f02 	tst.w	r3, #2
 8001742:	f040 8091 	bne.w	8001868 <HAL_RCC_OscConfig+0x1fe>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff f8b6 	bl	80008b6 <HAL_GetTick>
 800174a:	1b40      	subs	r0, r0, r5
 800174c:	2802      	cmp	r0, #2
 800174e:	d9f1      	bls.n	8001734 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8001750:	2003      	movs	r0, #3
 8001752:	e1fd      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001762:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001764:	6863      	ldr	r3, [r4, #4]
 8001766:	b373      	cbz	r3, 80017c6 <HAL_RCC_OscConfig+0x15c>
        tickstart = HAL_GetTick();
 8001768:	f7ff f8a5 	bl	80008b6 <HAL_GetTick>
 800176c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800177c:	d1b8      	bne.n	80016f0 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177e:	f7ff f89a 	bl	80008b6 <HAL_GetTick>
 8001782:	1b40      	subs	r0, r0, r5
 8001784:	2864      	cmp	r0, #100	; 0x64
 8001786:	d9f2      	bls.n	800176e <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8001788:	2003      	movs	r0, #3
 800178a:	e1e1      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800178c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001790:	d00c      	beq.n	80017ac <HAL_RCC_OscConfig+0x142>
 8001792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001796:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e7db      	b.n	8001764 <HAL_RCC_OscConfig+0xfa>
 80017ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e7ce      	b.n	8001764 <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 80017c6:	f7ff f876 	bl	80008b6 <HAL_GetTick>
 80017ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80017da:	d089      	beq.n	80016f0 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f86b 	bl	80008b6 <HAL_GetTick>
 80017e0:	1b40      	subs	r0, r0, r5
 80017e2:	2864      	cmp	r0, #100	; 0x64
 80017e4:	d9f2      	bls.n	80017cc <HAL_RCC_OscConfig+0x162>
            return HAL_TIMEOUT;
 80017e6:	2003      	movs	r0, #3
 80017e8:	e1b2      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80017f8:	d190      	bne.n	800171c <HAL_RCC_OscConfig+0xb2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f013 0f02 	tst.w	r3, #2
 8001808:	d004      	beq.n	8001814 <HAL_RCC_OscConfig+0x1aa>
 800180a:	6923      	ldr	r3, [r4, #16]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d001      	beq.n	8001814 <HAL_RCC_OscConfig+0x1aa>
        return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
 8001812:	e19d      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001814:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001818:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800181c:	6813      	ldr	r3, [r2, #0]
 800181e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001822:	6961      	ldr	r1, [r4, #20]
 8001824:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001828:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	f013 0f08 	tst.w	r3, #8
 8001830:	d040      	beq.n	80018b4 <HAL_RCC_OscConfig+0x24a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001832:	69a3      	ldr	r3, [r4, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d072      	beq.n	800191e <HAL_RCC_OscConfig+0x2b4>
      __HAL_RCC_LSI_ENABLE();
 8001838:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800183c:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001844:	f7ff f837 	bl	80008b6 <HAL_GetTick>
 8001848:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001854:	f013 0f02 	tst.w	r3, #2
 8001858:	d129      	bne.n	80018ae <HAL_RCC_OscConfig+0x244>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff f82c 	bl	80008b6 <HAL_GetTick>
 800185e:	1b40      	subs	r0, r0, r5
 8001860:	2802      	cmp	r0, #2
 8001862:	d9f2      	bls.n	800184a <HAL_RCC_OscConfig+0x1e0>
          return HAL_TIMEOUT;
 8001864:	2003      	movs	r0, #3
 8001866:	e173      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800186c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001870:	6813      	ldr	r3, [r2, #0]
 8001872:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001876:	6961      	ldr	r1, [r4, #20]
 8001878:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e7d4      	b.n	800182a <HAL_RCC_OscConfig+0x1c0>
        __HAL_RCC_HSI_DISABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800188a:	f7ff f814 	bl	80008b6 <HAL_GetTick>
 800188e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f013 0f02 	tst.w	r3, #2
 800189e:	d0c4      	beq.n	800182a <HAL_RCC_OscConfig+0x1c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a0:	f7ff f809 	bl	80008b6 <HAL_GetTick>
 80018a4:	1b40      	subs	r0, r0, r5
 80018a6:	2802      	cmp	r0, #2
 80018a8:	d9f2      	bls.n	8001890 <HAL_RCC_OscConfig+0x226>
            return HAL_TIMEOUT;
 80018aa:	2003      	movs	r0, #3
 80018ac:	e150      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
      RCC_Delay(1);
 80018ae:	2001      	movs	r0, #1
 80018b0:	f7ff fec3 	bl	800163a <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018b4:	6823      	ldr	r3, [r4, #0]
 80018b6:	f013 0f04 	tst.w	r3, #4
 80018ba:	f000 80b3 	beq.w	8001a24 <HAL_RCC_OscConfig+0x3ba>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80018cc:	d13f      	bne.n	800194e <HAL_RCC_OscConfig+0x2e4>
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80018d6:	69da      	ldr	r2, [r3, #28]
 80018d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018dc:	61da      	str	r2, [r3, #28]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80018e8:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80018ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80018f8:	d02b      	beq.n	8001952 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fa:	68e3      	ldr	r3, [r4, #12]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d042      	beq.n	8001986 <HAL_RCC_OscConfig+0x31c>
 8001900:	2b00      	cmp	r3, #0
 8001902:	d15e      	bne.n	80019c2 <HAL_RCC_OscConfig+0x358>
 8001904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001908:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800190c:	6a1a      	ldr	r2, [r3, #32]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	621a      	str	r2, [r3, #32]
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	f022 0204 	bic.w	r2, r2, #4
 800191a:	621a      	str	r2, [r3, #32]
 800191c:	e03b      	b.n	8001996 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_LSI_DISABLE();
 800191e:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8001922:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800192a:	f7fe ffc4 	bl	80008b6 <HAL_GetTick>
 800192e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001934:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193a:	f013 0f02 	tst.w	r3, #2
 800193e:	d0b9      	beq.n	80018b4 <HAL_RCC_OscConfig+0x24a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001940:	f7fe ffb9 	bl	80008b6 <HAL_GetTick>
 8001944:	1b40      	subs	r0, r0, r5
 8001946:	2802      	cmp	r0, #2
 8001948:	d9f2      	bls.n	8001930 <HAL_RCC_OscConfig+0x2c6>
          return HAL_TIMEOUT;
 800194a:	2003      	movs	r0, #3
 800194c:	e100      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
    FlagStatus       pwrclkchanged = RESET;
 800194e:	2500      	movs	r5, #0
 8001950:	e7cb      	b.n	80018ea <HAL_RCC_OscConfig+0x280>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001952:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001956:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001960:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001962:	f7fe ffa8 	bl	80008b6 <HAL_GetTick>
 8001966:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001968:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800196c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001976:	d1c0      	bne.n	80018fa <HAL_RCC_OscConfig+0x290>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001978:	f7fe ff9d 	bl	80008b6 <HAL_GetTick>
 800197c:	1b80      	subs	r0, r0, r6
 800197e:	2864      	cmp	r0, #100	; 0x64
 8001980:	d9f2      	bls.n	8001968 <HAL_RCC_OscConfig+0x2fe>
          return HAL_TIMEOUT;
 8001982:	2003      	movs	r0, #3
 8001984:	e0e4      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001996:	68e3      	ldr	r3, [r4, #12]
 8001998:	b37b      	cbz	r3, 80019fa <HAL_RCC_OscConfig+0x390>
      tickstart = HAL_GetTick();
 800199a:	f7fe ff8c 	bl	80008b6 <HAL_GetTick>
 800199e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	f013 0f02 	tst.w	r3, #2
 80019ae:	d138      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7fe ff81 	bl	80008b6 <HAL_GetTick>
 80019b4:	1b80      	subs	r0, r0, r6
 80019b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80019ba:	4298      	cmp	r0, r3
 80019bc:	d9f0      	bls.n	80019a0 <HAL_RCC_OscConfig+0x336>
          return HAL_TIMEOUT;
 80019be:	2003      	movs	r0, #3
 80019c0:	e0c6      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c2:	2b05      	cmp	r3, #5
 80019c4:	d00c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x376>
 80019c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019ce:	6a1a      	ldr	r2, [r3, #32]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	621a      	str	r2, [r3, #32]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	f022 0204 	bic.w	r2, r2, #4
 80019dc:	621a      	str	r2, [r3, #32]
 80019de:	e7da      	b.n	8001996 <HAL_RCC_OscConfig+0x32c>
 80019e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80019e8:	6a1a      	ldr	r2, [r3, #32]
 80019ea:	f042 0204 	orr.w	r2, r2, #4
 80019ee:	621a      	str	r2, [r3, #32]
 80019f0:	6a1a      	ldr	r2, [r3, #32]
 80019f2:	f042 0201 	orr.w	r2, r2, #1
 80019f6:	621a      	str	r2, [r3, #32]
 80019f8:	e7cd      	b.n	8001996 <HAL_RCC_OscConfig+0x32c>
      tickstart = HAL_GetTick();
 80019fa:	f7fe ff5c 	bl	80008b6 <HAL_GetTick>
 80019fe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a08:	6a1b      	ldr	r3, [r3, #32]
 8001a0a:	f013 0f02 	tst.w	r3, #2
 8001a0e:	d008      	beq.n	8001a22 <HAL_RCC_OscConfig+0x3b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7fe ff51 	bl	80008b6 <HAL_GetTick>
 8001a14:	1b80      	subs	r0, r0, r6
 8001a16:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a1a:	4298      	cmp	r0, r3
 8001a1c:	d9f0      	bls.n	8001a00 <HAL_RCC_OscConfig+0x396>
          return HAL_TIMEOUT;
 8001a1e:	2003      	movs	r0, #3
 8001a20:	e096      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
    if (pwrclkchanged == SET)
 8001a22:	bb2d      	cbnz	r5, 8001a70 <HAL_RCC_OscConfig+0x406>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a24:	69e3      	ldr	r3, [r4, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8091 	beq.w	8001b4e <HAL_RCC_OscConfig+0x4e4>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001a34:	6852      	ldr	r2, [r2, #4]
 8001a36:	f002 020c 	and.w	r2, r2, #12
 8001a3a:	2a08      	cmp	r2, #8
 8001a3c:	d06e      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4b2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d01f      	beq.n	8001a82 <HAL_RCC_OscConfig+0x418>
        __HAL_RCC_PLL_DISABLE();
 8001a42:	2360      	movs	r3, #96	; 0x60
 8001a44:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a4c:	f7fe ff33 	bl	80008b6 <HAL_GetTick>
 8001a50:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001a60:	d05a      	beq.n	8001b18 <HAL_RCC_OscConfig+0x4ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7fe ff28 	bl	80008b6 <HAL_GetTick>
 8001a66:	1b00      	subs	r0, r0, r4
 8001a68:	2802      	cmp	r0, #2
 8001a6a:	d9f2      	bls.n	8001a52 <HAL_RCC_OscConfig+0x3e8>
            return HAL_TIMEOUT;
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	e06f      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a78:	69da      	ldr	r2, [r3, #28]
 8001a7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001a7e:	61da      	str	r2, [r3, #28]
 8001a80:	e7d0      	b.n	8001a24 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_PLL_DISABLE();
 8001a82:	2360      	movs	r3, #96	; 0x60
 8001a84:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a8c:	f7fe ff13 	bl	80008b6 <HAL_GetTick>
 8001a90:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aa0:	d006      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x446>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7fe ff08 	bl	80008b6 <HAL_GetTick>
 8001aa6:	1b40      	subs	r0, r0, r5
 8001aa8:	2802      	cmp	r0, #2
 8001aaa:	d9f2      	bls.n	8001a92 <HAL_RCC_OscConfig+0x428>
            return HAL_TIMEOUT;
 8001aac:	2003      	movs	r0, #3
 8001aae:	e04f      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ab0:	6a23      	ldr	r3, [r4, #32]
 8001ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab6:	d022      	beq.n	8001afe <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001abc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ac0:	6853      	ldr	r3, [r2, #4]
 8001ac2:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001ac6:	6a21      	ldr	r1, [r4, #32]
 8001ac8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001aca:	4301      	orrs	r1, r0
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	2360      	movs	r3, #96	; 0x60
 8001ad2:	f2c4 2342 	movt	r3, #16962	; 0x4242
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ada:	f7fe feec 	bl	80008b6 <HAL_GetTick>
 8001ade:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aee:	d111      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7fe fee1 	bl	80008b6 <HAL_GetTick>
 8001af4:	1b00      	subs	r0, r0, r4
 8001af6:	2802      	cmp	r0, #2
 8001af8:	d9f2      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x476>
            return HAL_TIMEOUT;
 8001afa:	2003      	movs	r0, #3
 8001afc:	e028      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001b06:	6853      	ldr	r3, [r2, #4]
 8001b08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b0c:	68a1      	ldr	r1, [r4, #8]
 8001b0e:	430b      	orrs	r3, r1
 8001b10:	6053      	str	r3, [r2, #4]
 8001b12:	e7d1      	b.n	8001ab8 <HAL_RCC_OscConfig+0x44e>
  return HAL_OK;
 8001b14:	2000      	movs	r0, #0
 8001b16:	e01b      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e019      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d019      	beq.n	8001b54 <HAL_RCC_OscConfig+0x4ea>
        pll_config = RCC->CFGR;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b28:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001b2e:	6a22      	ldr	r2, [r4, #32]
 8001b30:	4291      	cmp	r1, r2
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_OscConfig+0x4ce>
          return HAL_ERROR;
 8001b34:	2001      	movs	r0, #1
 8001b36:	e00b      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d00a      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4ee>
          return HAL_ERROR;
 8001b42:	2001      	movs	r0, #1
 8001b44:	e004      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
    return HAL_ERROR;
 8001b46:	2001      	movs	r0, #1
}
 8001b48:	4770      	bx	lr
        return HAL_ERROR;
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 8001b4e:	2000      	movs	r0, #0
}
 8001b50:	b002      	add	sp, #8
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001b54:	2001      	movs	r0, #1
 8001b56:	e7fb      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>
  return HAL_OK;
 8001b58:	2000      	movs	r0, #0
 8001b5a:	e7f9      	b.n	8001b50 <HAL_RCC_OscConfig+0x4e6>

08001b5c <HAL_RCC_GetSysClockFreq>:
{
 8001b5c:	b410      	push	{r4}
 8001b5e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b60:	f642 1448 	movw	r4, #10568	; 0x2948
 8001b64:	f6c0 0400 	movt	r4, #2048	; 0x800
 8001b68:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b6c:	f10d 0c18 	add.w	ip, sp, #24
 8001b70:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b74:	8a23      	ldrh	r3, [r4, #16]
 8001b76:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001b82:	685a      	ldr	r2, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b84:	f002 030c 	and.w	r3, r2, #12
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d123      	bne.n	8001bd4 <HAL_RCC_GetSysClockFreq+0x78>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b8c:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8001b90:	4463      	add	r3, ip
 8001b92:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b96:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001b9a:	d108      	bne.n	8001bae <HAL_RCC_GetSysClockFreq+0x52>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b9c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001ba0:	f2c0 003d 	movt	r0, #61	; 0x3d
 8001ba4:	fb00 f001 	mul.w	r0, r0, r1
}
 8001ba8:	b007      	add	sp, #28
 8001baa:	bc10      	pop	{r4}
 8001bac:	4770      	bx	lr
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001bbc:	4462      	add	r2, ip
 8001bbe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bc2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001bc6:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001bca:	fb03 f001 	mul.w	r0, r3, r1
 8001bce:	fbb0 f0f2 	udiv	r0, r0, r2
 8001bd2:	e7e9      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x4c>
      sysclockfreq = HSE_VALUE;
 8001bd4:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8001bd8:	f2c0 007a 	movt	r0, #122	; 0x7a
  return sysclockfreq;
 8001bdc:	e7e4      	b.n	8001ba8 <HAL_RCC_GetSysClockFreq+0x4c>

08001bde <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001bde:	2800      	cmp	r0, #0
 8001be0:	f000 80da 	beq.w	8001d98 <HAL_RCC_ClockConfig+0x1ba>
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	428b      	cmp	r3, r1
 8001bf8:	d20f      	bcs.n	8001c1a <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	f022 0207 	bic.w	r2, r2, #7
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	428b      	cmp	r3, r1
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x3c>
    return HAL_ERROR;
 8001c16:	2001      	movs	r0, #1
}
 8001c18:	bd70      	pop	{r4, r5, r6, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1a:	6823      	ldr	r3, [r4, #0]
 8001c1c:	f013 0f02 	tst.w	r3, #2
 8001c20:	d020      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x86>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c22:	f013 0f04 	tst.w	r3, #4
 8001c26:	d007      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001c36:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	f013 0f08 	tst.w	r3, #8
 8001c3e:	d007      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8001c4e:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c58:	6853      	ldr	r3, [r2, #4]
 8001c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c5e:	68a0      	ldr	r0, [r4, #8]
 8001c60:	4303      	orrs	r3, r0
 8001c62:	6053      	str	r3, [r2, #4]
 8001c64:	460d      	mov	r5, r1
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	f013 0f01 	tst.w	r3, #1
 8001c6c:	d041      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x114>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	6863      	ldr	r3, [r4, #4]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d02a      	beq.n	8001cca <HAL_RCC_ClockConfig+0xec>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d032      	beq.n	8001cde <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c80:	6812      	ldr	r2, [r2, #0]
 8001c82:	f012 0f02 	tst.w	r2, #2
 8001c86:	f000 8089 	beq.w	8001d9c <HAL_RCC_ClockConfig+0x1be>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001c92:	6851      	ldr	r1, [r2, #4]
 8001c94:	f021 0103 	bic.w	r1, r1, #3
 8001c98:	430b      	orrs	r3, r1
 8001c9a:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 8001c9c:	f7fe fe0b 	bl	80008b6 <HAL_GetTick>
 8001ca0:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	6862      	ldr	r2, [r4, #4]
 8001cb2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cb6:	d01c      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb8:	f7fe fdfd 	bl	80008b6 <HAL_GetTick>
 8001cbc:	1b80      	subs	r0, r0, r6
 8001cbe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cc2:	4298      	cmp	r0, r3
 8001cc4:	d9ed      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0xc4>
        return HAL_TIMEOUT;
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	e7a6      	b.n	8001c18 <HAL_RCC_ClockConfig+0x3a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001cd8:	d1d7      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e79c      	b.n	8001c18 <HAL_RCC_ClockConfig+0x3a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ce2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001cec:	d1cd      	bne.n	8001c8a <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8001cee:	2001      	movs	r0, #1
 8001cf0:	e792      	b.n	8001c18 <HAL_RCC_ClockConfig+0x3a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	42ab      	cmp	r3, r5
 8001d02:	d90f      	bls.n	8001d24 <HAL_RCC_ClockConfig+0x146>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	f022 0207 	bic.w	r2, r2, #7
 8001d12:	432a      	orrs	r2, r5
 8001d14:	601a      	str	r2, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	42ab      	cmp	r3, r5
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 8001d20:	2001      	movs	r0, #1
 8001d22:	e779      	b.n	8001c18 <HAL_RCC_ClockConfig+0x3a>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	f013 0f04 	tst.w	r3, #4
 8001d2a:	d009      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x162>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d34:	6853      	ldr	r3, [r2, #4]
 8001d36:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d3a:	68e1      	ldr	r1, [r4, #12]
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	f013 0f08 	tst.w	r3, #8
 8001d46:	d00a      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x180>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d4c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001d50:	6853      	ldr	r3, [r2, #4]
 8001d52:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001d56:	6921      	ldr	r1, [r4, #16]
 8001d58:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d5c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d5e:	f7ff fefd 	bl	8001b5c <HAL_RCC_GetSysClockFreq>
 8001d62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d70:	f642 126c 	movw	r2, #10604	; 0x296c
 8001d74:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	40d8      	lsrs	r0, r3
 8001d7c:	f240 0300 	movw	r3, #0
 8001d80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d84:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001d86:	f240 0308 	movw	r3, #8
 8001d8a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d8e:	6818      	ldr	r0, [r3, #0]
 8001d90:	f7fe fd49 	bl	8000826 <HAL_InitTick>
  return HAL_OK;
 8001d94:	2000      	movs	r0, #0
 8001d96:	e73f      	b.n	8001c18 <HAL_RCC_ClockConfig+0x3a>
    return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
}
 8001d9a:	4770      	bx	lr
        return HAL_ERROR;
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	e73b      	b.n	8001c18 <HAL_RCC_ClockConfig+0x3a>

08001da0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8001da0:	f240 0300 	movw	r3, #0
 8001da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
}
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	4770      	bx	lr

08001dac <HAL_RCC_GetPCLK1Freq>:
{
 8001dac:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dae:	f7ff fff7 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001db2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001db6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001dc0:	f642 127c 	movw	r2, #10620	; 0x297c
 8001dc4:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dca:	40d8      	lsrs	r0, r3
 8001dcc:	bd08      	pop	{r3, pc}

08001dce <HAL_RCC_GetPCLK2Freq>:
{
 8001dce:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dd0:	f7ff ffe6 	bl	8001da0 <HAL_RCC_GetHCLKFreq>
 8001dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001de2:	f642 127c 	movw	r2, #10620	; 0x297c
 8001de6:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001dea:	5cd3      	ldrb	r3, [r2, r3]
}
 8001dec:	40d8      	lsrs	r0, r3
 8001dee:	bd08      	pop	{r3, pc}

08001df0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001df0:	b570      	push	{r4, r5, r6, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001df6:	6803      	ldr	r3, [r0, #0]
 8001df8:	f013 0f01 	tst.w	r3, #1
 8001dfc:	d049      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001e0c:	d160      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e16:	69da      	ldr	r2, [r3, #28]
 8001e18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e1c:	61da      	str	r2, [r3, #28]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001e28:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001e38:	d04c      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e42:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e44:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001e48:	d017      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001e4a:	6862      	ldr	r2, [r4, #4]
 8001e4c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d012      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e5c:	6a19      	ldr	r1, [r3, #32]
 8001e5e:	f421 7040 	bic.w	r0, r1, #768	; 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e62:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8001e66:	f2c4 2242 	movt	r2, #16962	; 0x4242
 8001e6a:	2601      	movs	r6, #1
 8001e6c:	6016      	str	r6, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6e:	2600      	movs	r6, #0
 8001e70:	6016      	str	r6, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e72:	6218      	str	r0, [r3, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e74:	f011 0f01 	tst.w	r1, #1
 8001e78:	d146      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x118>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e7e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001e82:	6a13      	ldr	r3, [r2, #32]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	6861      	ldr	r1, [r4, #4]
 8001e8a:	430b      	orrs	r3, r1
 8001e8c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e8e:	2d00      	cmp	r5, #0
 8001e90:	d14e      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x140>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e92:	6823      	ldr	r3, [r4, #0]
 8001e94:	f013 0f02 	tst.w	r3, #2
 8001e98:	d009      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ea2:	6853      	ldr	r3, [r2, #4]
 8001ea4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ea8:	68a1      	ldr	r1, [r4, #8]
 8001eaa:	430b      	orrs	r3, r1
 8001eac:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	f013 0f10 	tst.w	r3, #16
 8001eb4:	d045      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x152>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ebe:	6853      	ldr	r3, [r2, #4]
 8001ec0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ec4:	68e1      	ldr	r1, [r4, #12]
 8001ec6:	430b      	orrs	r3, r1
 8001ec8:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001eca:	2000      	movs	r0, #0
}
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001ed0:	2500      	movs	r5, #0
 8001ed2:	e7aa      	b.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001ed8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ee4:	f7fe fce7 	bl	80008b6 <HAL_GetTick>
 8001ee8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eea:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001eee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001ef8:	d19f      	bne.n	8001e3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001efa:	f7fe fcdc 	bl	80008b6 <HAL_GetTick>
 8001efe:	1b80      	subs	r0, r0, r6
 8001f00:	2864      	cmp	r0, #100	; 0x64
 8001f02:	d9f2      	bls.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0xfa>
          return HAL_TIMEOUT;
 8001f04:	2003      	movs	r0, #3
 8001f06:	e7e1      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 8001f08:	f7fe fcd5 	bl	80008b6 <HAL_GetTick>
 8001f0c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	f013 0f02 	tst.w	r3, #2
 8001f1c:	d1ad      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f1e:	f7fe fcca 	bl	80008b6 <HAL_GetTick>
 8001f22:	1b80      	subs	r0, r0, r6
 8001f24:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f28:	4298      	cmp	r0, r3
 8001f2a:	d9f0      	bls.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x11e>
            return HAL_TIMEOUT;
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	e7cd      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xdc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001f3e:	61da      	str	r2, [r3, #28]
 8001f40:	e7a7      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  return HAL_OK;
 8001f42:	2000      	movs	r0, #0
 8001f44:	e7c2      	b.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xdc>

08001f46 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f46:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f48:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f4a:	6a04      	ldr	r4, [r0, #32]
 8001f4c:	f024 0401 	bic.w	r4, r4, #1
 8001f50:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f52:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f54:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f58:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f5c:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001f60:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f62:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f64:	6203      	str	r3, [r0, #32]
}
 8001f66:	bc10      	pop	{r4}
 8001f68:	4770      	bx	lr

08001f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f6a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f6c:	6a03      	ldr	r3, [r0, #32]
 8001f6e:	f023 0310 	bic.w	r3, r3, #16
 8001f72:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f74:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001f76:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f78:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f7c:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f80:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f84:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f88:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001f8a:	6203      	str	r3, [r0, #32]
}
 8001f8c:	bc10      	pop	{r4}
 8001f8e:	4770      	bx	lr

08001f90 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f90:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f96:	4319      	orrs	r1, r3
 8001f98:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f9c:	6081      	str	r1, [r0, #8]
}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fa0:	6802      	ldr	r2, [r0, #0]
 8001fa2:	68d3      	ldr	r3, [r2, #12]
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001faa:	6802      	ldr	r2, [r0, #0]
 8001fac:	6893      	ldr	r3, [r2, #8]
 8001fae:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	4770      	bx	lr

08001fc2 <HAL_TIM_PeriodElapsedCallback>:
}
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIM_IC_CaptureCallback>:
}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001fc8:	4770      	bx	lr

08001fca <HAL_TIM_TriggerCallback>:
}
 8001fca:	4770      	bx	lr

08001fcc <HAL_TIM_IRQHandler>:
{
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd0:	6803      	ldr	r3, [r0, #0]
 8001fd2:	691a      	ldr	r2, [r3, #16]
 8001fd4:	f012 0f02 	tst.w	r2, #2
 8001fd8:	d011      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fda:	68da      	ldr	r2, [r3, #12]
 8001fdc:	f012 0f02 	tst.w	r2, #2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fe2:	f06f 0202 	mvn.w	r2, #2
 8001fe6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fec:	6803      	ldr	r3, [r0, #0]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	f013 0f03 	tst.w	r3, #3
 8001ff4:	d070      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	f7ff ffe6 	bl	8001fc6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ffe:	6823      	ldr	r3, [r4, #0]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	f012 0f04 	tst.w	r2, #4
 8002006:	d012      	beq.n	800202e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	f012 0f04 	tst.w	r2, #4
 800200e:	d00e      	beq.n	800202e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002010:	f06f 0204 	mvn.w	r2, #4
 8002014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002016:	2302      	movs	r3, #2
 8002018:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800201a:	6823      	ldr	r3, [r4, #0]
 800201c:	699b      	ldr	r3, [r3, #24]
 800201e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002022:	d05f      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002024:	4620      	mov	r0, r4
 8002026:	f7ff ffce 	bl	8001fc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	2300      	movs	r3, #0
 800202c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	f012 0f08 	tst.w	r2, #8
 8002036:	d012      	beq.n	800205e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	f012 0f08 	tst.w	r2, #8
 800203e:	d00e      	beq.n	800205e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002040:	f06f 0208 	mvn.w	r2, #8
 8002044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002046:	2304      	movs	r3, #4
 8002048:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f013 0f03 	tst.w	r3, #3
 8002052:	d04e      	beq.n	80020f2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8002054:	4620      	mov	r0, r4
 8002056:	f7ff ffb6 	bl	8001fc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	2300      	movs	r3, #0
 800205c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	f012 0f10 	tst.w	r2, #16
 8002066:	d012      	beq.n	800208e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	f012 0f10 	tst.w	r2, #16
 800206e:	d00e      	beq.n	800208e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002070:	f06f 0210 	mvn.w	r2, #16
 8002074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002076:	2308      	movs	r3, #8
 8002078:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800207a:	6823      	ldr	r3, [r4, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002082:	d03d      	beq.n	8002100 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8002084:	4620      	mov	r0, r4
 8002086:	f7ff ff9e 	bl	8001fc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	2300      	movs	r3, #0
 800208c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	f012 0f01 	tst.w	r2, #1
 8002096:	d003      	beq.n	80020a0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	f012 0f01 	tst.w	r2, #1
 800209e:	d136      	bne.n	800210e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a0:	6823      	ldr	r3, [r4, #0]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020a8:	d003      	beq.n	80020b2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	f012 0f80 	tst.w	r2, #128	; 0x80
 80020b0:	d134      	bne.n	800211c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020ba:	d003      	beq.n	80020c4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	f012 0f40 	tst.w	r2, #64	; 0x40
 80020c2:	d132      	bne.n	800212a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020c4:	6823      	ldr	r3, [r4, #0]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	f012 0f20 	tst.w	r2, #32
 80020cc:	d003      	beq.n	80020d6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	f012 0f20 	tst.w	r2, #32
 80020d4:	d130      	bne.n	8002138 <HAL_TIM_IRQHandler+0x16c>
}
 80020d6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d8:	f7ff ff74 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020dc:	4620      	mov	r0, r4
 80020de:	f7ff ff73 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
 80020e2:	e78a      	b.n	8001ffa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e4:	4620      	mov	r0, r4
 80020e6:	f7ff ff6d 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020ea:	4620      	mov	r0, r4
 80020ec:	f7ff ff6c 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
 80020f0:	e79b      	b.n	800202a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f2:	4620      	mov	r0, r4
 80020f4:	f7ff ff66 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff ff65 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
 80020fe:	e7ac      	b.n	800205a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff ff5f 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff ff5e 	bl	8001fc8 <HAL_TIM_PWM_PulseFinishedCallback>
 800210c:	e7bd      	b.n	800208a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800210e:	f06f 0201 	mvn.w	r2, #1
 8002112:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002114:	4620      	mov	r0, r4
 8002116:	f7ff ff54 	bl	8001fc2 <HAL_TIM_PeriodElapsedCallback>
 800211a:	e7c1      	b.n	80020a0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800211c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002120:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002122:	4620      	mov	r0, r4
 8002124:	f000 f90c 	bl	8002340 <HAL_TIMEx_BreakCallback>
 8002128:	e7c3      	b.n	80020b2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800212a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800212e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002130:	4620      	mov	r0, r4
 8002132:	f7ff ff4a 	bl	8001fca <HAL_TIM_TriggerCallback>
 8002136:	e7c5      	b.n	80020c4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002138:	f06f 0220 	mvn.w	r2, #32
 800213c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800213e:	4620      	mov	r0, r4
 8002140:	f000 f8fd 	bl	800233e <HAL_TIMEx_CommutCallback>
}
 8002144:	e7c7      	b.n	80020d6 <HAL_TIM_IRQHandler+0x10a>

08002146 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002146:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002148:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800214c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002150:	4290      	cmp	r0, r2
 8002152:	d00e      	beq.n	8002172 <TIM_Base_SetConfig+0x2c>
 8002154:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002158:	d00b      	beq.n	8002172 <TIM_Base_SetConfig+0x2c>
 800215a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002162:	4290      	cmp	r0, r2
 8002164:	d005      	beq.n	8002172 <TIM_Base_SetConfig+0x2c>
 8002166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800216a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800216e:	4290      	cmp	r0, r2
 8002170:	d103      	bne.n	800217a <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002176:	684a      	ldr	r2, [r1, #4]
 8002178:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800217a:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800217e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8002182:	4290      	cmp	r0, r2
 8002184:	d00e      	beq.n	80021a4 <TIM_Base_SetConfig+0x5e>
 8002186:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800218a:	d00b      	beq.n	80021a4 <TIM_Base_SetConfig+0x5e>
 800218c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002190:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8002194:	4290      	cmp	r0, r2
 8002196:	d005      	beq.n	80021a4 <TIM_Base_SetConfig+0x5e>
 8002198:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800219c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80021a0:	4290      	cmp	r0, r2
 80021a2:	d103      	bne.n	80021ac <TIM_Base_SetConfig+0x66>
    tmpcr1 &= ~TIM_CR1_CKD;
 80021a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a8:	68ca      	ldr	r2, [r1, #12]
 80021aa:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021b0:	694a      	ldr	r2, [r1, #20]
 80021b2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80021b4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b6:	688b      	ldr	r3, [r1, #8]
 80021b8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021ba:	680b      	ldr	r3, [r1, #0]
 80021bc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021be:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80021c2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80021c6:	4298      	cmp	r0, r3
 80021c8:	d002      	beq.n	80021d0 <TIM_Base_SetConfig+0x8a>
  TIMx->EGR = TIM_EGR_UG;
 80021ca:	2301      	movs	r3, #1
 80021cc:	6143      	str	r3, [r0, #20]
}
 80021ce:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80021d0:	690b      	ldr	r3, [r1, #16]
 80021d2:	6303      	str	r3, [r0, #48]	; 0x30
 80021d4:	e7f9      	b.n	80021ca <TIM_Base_SetConfig+0x84>

080021d6 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80021d6:	b1a8      	cbz	r0, 8002204 <HAL_TIM_Base_Init+0x2e>
{
 80021d8:	b510      	push	{r4, lr}
 80021da:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80021dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021e0:	b15b      	cbz	r3, 80021fa <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 80021e2:	2302      	movs	r3, #2
 80021e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	1d21      	adds	r1, r4, #4
 80021ea:	6820      	ldr	r0, [r4, #0]
 80021ec:	f7ff ffab 	bl	8002146 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80021f0:	2301      	movs	r3, #1
 80021f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80021f6:	2000      	movs	r0, #0
}
 80021f8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80021fa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021fe:	f7fe f9f7 	bl	80005f0 <HAL_TIM_Base_MspInit>
 8002202:	e7ee      	b.n	80021e2 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002204:	2001      	movs	r0, #1
}
 8002206:	4770      	bx	lr

08002208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002208:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800220a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800220c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002210:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002214:	430b      	orrs	r3, r1
 8002216:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002218:	6083      	str	r3, [r0, #8]
}
 800221a:	bc10      	pop	{r4}
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800221e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002222:	2b01      	cmp	r3, #1
 8002224:	d066      	beq.n	80022f4 <HAL_TIM_ConfigClockSource+0xd6>
{
 8002226:	b510      	push	{r4, lr}
 8002228:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800222a:	2301      	movs	r3, #1
 800222c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002230:	2302      	movs	r3, #2
 8002232:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002236:	6802      	ldr	r2, [r0, #0]
 8002238:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800223a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800223e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002242:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002244:	680b      	ldr	r3, [r1, #0]
 8002246:	2b40      	cmp	r3, #64	; 0x40
 8002248:	d04a      	beq.n	80022e0 <HAL_TIM_ConfigClockSource+0xc2>
 800224a:	d913      	bls.n	8002274 <HAL_TIM_ConfigClockSource+0x56>
 800224c:	2b60      	cmp	r3, #96	; 0x60
 800224e:	d03d      	beq.n	80022cc <HAL_TIM_ConfigClockSource+0xae>
 8002250:	d91e      	bls.n	8002290 <HAL_TIM_ConfigClockSource+0x72>
 8002252:	2b70      	cmp	r3, #112	; 0x70
 8002254:	d028      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x8a>
 8002256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800225a:	d130      	bne.n	80022be <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 800225c:	68cb      	ldr	r3, [r1, #12]
 800225e:	684a      	ldr	r2, [r1, #4]
 8002260:	6889      	ldr	r1, [r1, #8]
 8002262:	6800      	ldr	r0, [r0, #0]
 8002264:	f7ff ffd0 	bl	8002208 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002268:	6822      	ldr	r2, [r4, #0]
 800226a:	6893      	ldr	r3, [r2, #8]
 800226c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002270:	6093      	str	r3, [r2, #8]
      break;
 8002272:	e024      	b.n	80022be <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002274:	2b10      	cmp	r3, #16
 8002276:	d006      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x68>
 8002278:	d904      	bls.n	8002284 <HAL_TIM_ConfigClockSource+0x66>
 800227a:	2b20      	cmp	r3, #32
 800227c:	d003      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x68>
 800227e:	2b30      	cmp	r3, #48	; 0x30
 8002280:	d001      	beq.n	8002286 <HAL_TIM_ConfigClockSource+0x68>
 8002282:	e01c      	b.n	80022be <HAL_TIM_ConfigClockSource+0xa0>
 8002284:	b9db      	cbnz	r3, 80022be <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002286:	4619      	mov	r1, r3
 8002288:	6820      	ldr	r0, [r4, #0]
 800228a:	f7ff fe81 	bl	8001f90 <TIM_ITRx_SetConfig>
      break;
 800228e:	e016      	b.n	80022be <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8002290:	2b50      	cmp	r3, #80	; 0x50
 8002292:	d114      	bne.n	80022be <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002294:	68ca      	ldr	r2, [r1, #12]
 8002296:	6849      	ldr	r1, [r1, #4]
 8002298:	6800      	ldr	r0, [r0, #0]
 800229a:	f7ff fe54 	bl	8001f46 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800229e:	2150      	movs	r1, #80	; 0x50
 80022a0:	6820      	ldr	r0, [r4, #0]
 80022a2:	f7ff fe75 	bl	8001f90 <TIM_ITRx_SetConfig>
      break;
 80022a6:	e00a      	b.n	80022be <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80022a8:	68cb      	ldr	r3, [r1, #12]
 80022aa:	684a      	ldr	r2, [r1, #4]
 80022ac:	6889      	ldr	r1, [r1, #8]
 80022ae:	6800      	ldr	r0, [r0, #0]
 80022b0:	f7ff ffaa 	bl	8002208 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80022b4:	6822      	ldr	r2, [r4, #0]
 80022b6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80022bc:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80022be:	2301      	movs	r3, #1
 80022c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80022ca:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022cc:	68ca      	ldr	r2, [r1, #12]
 80022ce:	6849      	ldr	r1, [r1, #4]
 80022d0:	6800      	ldr	r0, [r0, #0]
 80022d2:	f7ff fe4a 	bl	8001f6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022d6:	2160      	movs	r1, #96	; 0x60
 80022d8:	6820      	ldr	r0, [r4, #0]
 80022da:	f7ff fe59 	bl	8001f90 <TIM_ITRx_SetConfig>
      break;
 80022de:	e7ee      	b.n	80022be <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022e0:	68ca      	ldr	r2, [r1, #12]
 80022e2:	6849      	ldr	r1, [r1, #4]
 80022e4:	6800      	ldr	r0, [r0, #0]
 80022e6:	f7ff fe2e 	bl	8001f46 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022ea:	2140      	movs	r1, #64	; 0x40
 80022ec:	6820      	ldr	r0, [r4, #0]
 80022ee:	f7ff fe4f 	bl	8001f90 <TIM_ITRx_SetConfig>
      break;
 80022f2:	e7e4      	b.n	80022be <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 80022f4:	2002      	movs	r0, #2
}
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d01c      	beq.n	800233a <HAL_TIMEx_MasterConfigSynchronization+0x42>
{
 8002300:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(htim);
 8002302:	2601      	movs	r6, #1
 8002304:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002308:	2302      	movs	r3, #2
 800230a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800230e:	6802      	ldr	r2, [r0, #0]
 8002310:	6855      	ldr	r5, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002312:	6893      	ldr	r3, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002314:	f025 0570 	bic.w	r5, r5, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002318:	680c      	ldr	r4, [r1, #0]
 800231a:	432c      	orrs	r4, r5

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800231c:	f023 0580 	bic.w	r5, r3, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002320:	684b      	ldr	r3, [r1, #4]
 8002322:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002324:	6054      	str	r4, [r2, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002326:	6802      	ldr	r2, [r0, #0]
 8002328:	6093      	str	r3, [r2, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800232a:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800232e:	2300      	movs	r3, #0
 8002330:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002334:	4618      	mov	r0, r3
}
 8002336:	bc70      	pop	{r4, r5, r6}
 8002338:	4770      	bx	lr
  __HAL_LOCK(htim);
 800233a:	2002      	movs	r0, #2
}
 800233c:	4770      	bx	lr

0800233e <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800233e:	4770      	bx	lr

08002340 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002340:	4770      	bx	lr

08002342 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002342:	6802      	ldr	r2, [r0, #0]
 8002344:	68d3      	ldr	r3, [r2, #12]
 8002346:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800234a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800234c:	6802      	ldr	r2, [r0, #0]
 800234e:	6953      	ldr	r3, [r2, #20]
 8002350:	f023 0301 	bic.w	r3, r3, #1
 8002354:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002356:	2320      	movs	r3, #32
 8002358:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 800235c:	4770      	bx	lr

0800235e <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800235e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b21      	cmp	r3, #33	; 0x21
 8002366:	d12a      	bne.n	80023be <UART_Transmit_IT+0x60>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002368:	6883      	ldr	r3, [r0, #8]
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236e:	d016      	beq.n	800239e <UART_Transmit_IT+0x40>
        huart->pTxBuffPtr += 1U;
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002370:	6a03      	ldr	r3, [r0, #32]
 8002372:	1c5a      	adds	r2, r3, #1
 8002374:	6202      	str	r2, [r0, #32]
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	6803      	ldr	r3, [r0, #0]
 800237a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800237c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800237e:	3b01      	subs	r3, #1
 8002380:	b29b      	uxth	r3, r3
 8002382:	84c3      	strh	r3, [r0, #38]	; 0x26
 8002384:	b9eb      	cbnz	r3, 80023c2 <UART_Transmit_IT+0x64>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002386:	6802      	ldr	r2, [r0, #0]
 8002388:	68d3      	ldr	r3, [r2, #12]
 800238a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800238e:	60d3      	str	r3, [r2, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002390:	6802      	ldr	r2, [r0, #0]
 8002392:	68d3      	ldr	r3, [r2, #12]
 8002394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002398:	60d3      	str	r3, [r2, #12]
    }
    return HAL_OK;
 800239a:	2000      	movs	r0, #0
 800239c:	4770      	bx	lr
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800239e:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	6802      	ldr	r2, [r0, #0]
 80023a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023a8:	6053      	str	r3, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80023aa:	6903      	ldr	r3, [r0, #16]
 80023ac:	b91b      	cbnz	r3, 80023b6 <UART_Transmit_IT+0x58>
        huart->pTxBuffPtr += 2U;
 80023ae:	6a03      	ldr	r3, [r0, #32]
 80023b0:	3302      	adds	r3, #2
 80023b2:	6203      	str	r3, [r0, #32]
 80023b4:	e7e2      	b.n	800237c <UART_Transmit_IT+0x1e>
        huart->pTxBuffPtr += 1U;
 80023b6:	6a03      	ldr	r3, [r0, #32]
 80023b8:	3301      	adds	r3, #1
 80023ba:	6203      	str	r3, [r0, #32]
 80023bc:	e7de      	b.n	800237c <UART_Transmit_IT+0x1e>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2002      	movs	r0, #2
 80023c0:	4770      	bx	lr
    return HAL_OK;
 80023c2:	2000      	movs	r0, #0
  }
}
 80023c4:	4770      	bx	lr

080023c6 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c6:	b538      	push	{r3, r4, r5, lr}
 80023c8:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023ca:	6802      	ldr	r2, [r0, #0]
 80023cc:	6913      	ldr	r3, [r2, #16]
 80023ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d2:	68c1      	ldr	r1, [r0, #12]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6113      	str	r3, [r2, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023d8:	6883      	ldr	r3, [r0, #8]
 80023da:	6902      	ldr	r2, [r0, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	6942      	ldr	r2, [r0, #20]
 80023e0:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80023e2:	6801      	ldr	r1, [r0, #0]
 80023e4:	68cb      	ldr	r3, [r1, #12]
 80023e6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023ea:	f023 030c 	bic.w	r3, r3, #12
 80023ee:	4313      	orrs	r3, r2
 80023f0:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023f2:	6802      	ldr	r2, [r0, #0]
 80023f4:	6953      	ldr	r3, [r2, #20]
 80023f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023fa:	6981      	ldr	r1, [r0, #24]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6153      	str	r3, [r2, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002400:	6802      	ldr	r2, [r0, #0]
 8002402:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002406:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800240a:	429a      	cmp	r2, r3
 800240c:	d022      	beq.n	8002454 <UART_SetConfig+0x8e>
    pclk = HAL_RCC_GetPCLK2Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800240e:	f7ff fccd 	bl	8001dac <HAL_RCC_GetPCLK1Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002412:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002416:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800241a:	6863      	ldr	r3, [r4, #4]
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002422:	f248 551f 	movw	r5, #34079	; 0x851f
 8002426:	f2c5 15eb 	movt	r5, #20971	; 0x51eb
 800242a:	fba5 3200 	umull	r3, r2, r5, r0
 800242e:	0951      	lsrs	r1, r2, #5
 8002430:	2264      	movs	r2, #100	; 0x64
 8002432:	fb02 0211 	mls	r2, r2, r1, r0
 8002436:	0113      	lsls	r3, r2, #4
 8002438:	3332      	adds	r3, #50	; 0x32
 800243a:	fba5 2303 	umull	r2, r3, r5, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002444:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	6821      	ldr	r1, [r4, #0]
 800244e:	4413      	add	r3, r2
 8002450:	608b      	str	r3, [r1, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8002452:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002454:	f7ff fcbb 	bl	8001dce <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002458:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800245c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002460:	6863      	ldr	r3, [r4, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb0 f0f3 	udiv	r0, r0, r3
 8002468:	f248 551f 	movw	r5, #34079	; 0x851f
 800246c:	f2c5 15eb 	movt	r5, #20971	; 0x51eb
 8002470:	fba5 3200 	umull	r3, r2, r5, r0
 8002474:	0951      	lsrs	r1, r2, #5
 8002476:	2264      	movs	r2, #100	; 0x64
 8002478:	fb02 0211 	mls	r2, r2, r1, r0
 800247c:	0113      	lsls	r3, r2, #4
 800247e:	3332      	adds	r3, #50	; 0x32
 8002480:	fba5 2303 	umull	r2, r3, r5, r3
 8002484:	095b      	lsrs	r3, r3, #5
 8002486:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800248a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	6821      	ldr	r1, [r4, #0]
 8002494:	4413      	add	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
 8002498:	e7db      	b.n	8002452 <UART_SetConfig+0x8c>

0800249a <UART_WaitOnFlagUntilTimeout>:
{
 800249a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249e:	4605      	mov	r5, r0
 80024a0:	460f      	mov	r7, r1
 80024a2:	4616      	mov	r6, r2
 80024a4:	4698      	mov	r8, r3
 80024a6:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024a8:	682b      	ldr	r3, [r5, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	ea37 0303 	bics.w	r3, r7, r3
 80024b0:	bf0c      	ite	eq
 80024b2:	2301      	moveq	r3, #1
 80024b4:	2300      	movne	r3, #0
 80024b6:	42b3      	cmp	r3, r6
 80024b8:	d11d      	bne.n	80024f6 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80024ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80024be:	d0f3      	beq.n	80024a8 <UART_WaitOnFlagUntilTimeout+0xe>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80024c0:	b12c      	cbz	r4, 80024ce <UART_WaitOnFlagUntilTimeout+0x34>
 80024c2:	f7fe f9f8 	bl	80008b6 <HAL_GetTick>
 80024c6:	eba0 0008 	sub.w	r0, r0, r8
 80024ca:	42a0      	cmp	r0, r4
 80024cc:	d9ec      	bls.n	80024a8 <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80024ce:	682a      	ldr	r2, [r5, #0]
 80024d0:	68d3      	ldr	r3, [r2, #12]
 80024d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80024d6:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024d8:	682a      	ldr	r2, [r5, #0]
 80024da:	6953      	ldr	r3, [r2, #20]
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80024e2:	2320      	movs	r3, #32
 80024e4:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024e8:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80024ec:	2300      	movs	r3, #0
 80024ee:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
        return HAL_TIMEOUT;
 80024f2:	2003      	movs	r0, #3
 80024f4:	e000      	b.n	80024f8 <UART_WaitOnFlagUntilTimeout+0x5e>
  return HAL_OK;
 80024f6:	2000      	movs	r0, #0
}
 80024f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080024fc <HAL_UART_Init>:
  if (huart == NULL)
 80024fc:	b358      	cbz	r0, 8002556 <HAL_UART_Init+0x5a>
{
 80024fe:	b510      	push	{r4, lr}
 8002500:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002502:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002506:	b30b      	cbz	r3, 800254c <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002508:	2324      	movs	r3, #36	; 0x24
 800250a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	68d3      	ldr	r3, [r2, #12]
 8002512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002516:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002518:	4620      	mov	r0, r4
 800251a:	f7ff ff54 	bl	80023c6 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800251e:	6822      	ldr	r2, [r4, #0]
 8002520:	6913      	ldr	r3, [r2, #16]
 8002522:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002526:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002528:	6822      	ldr	r2, [r4, #0]
 800252a:	6953      	ldr	r3, [r2, #20]
 800252c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002530:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002532:	6822      	ldr	r2, [r4, #0]
 8002534:	68d3      	ldr	r3, [r2, #12]
 8002536:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800253a:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253c:	2000      	movs	r0, #0
 800253e:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002540:	2320      	movs	r3, #32
 8002542:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002546:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 800254a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800254c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002550:	f7fe f86d 	bl	800062e <HAL_UART_MspInit>
 8002554:	e7d8      	b.n	8002508 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002556:	2001      	movs	r0, #1
}
 8002558:	4770      	bx	lr

0800255a <HAL_UART_Transmit>:
{
 800255a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002562:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b20      	cmp	r3, #32
 800256a:	d155      	bne.n	8002618 <HAL_UART_Transmit+0xbe>
 800256c:	4604      	mov	r4, r0
 800256e:	460d      	mov	r5, r1
 8002570:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002572:	2900      	cmp	r1, #0
 8002574:	d055      	beq.n	8002622 <HAL_UART_Transmit+0xc8>
 8002576:	2a00      	cmp	r2, #0
 8002578:	d055      	beq.n	8002626 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800257a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800257e:	2b01      	cmp	r3, #1
 8002580:	d053      	beq.n	800262a <HAL_UART_Transmit+0xd0>
 8002582:	2301      	movs	r3, #1
 8002584:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002588:	2300      	movs	r3, #0
 800258a:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800258c:	2321      	movs	r3, #33	; 0x21
 800258e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002592:	f7fe f990 	bl	80008b6 <HAL_GetTick>
 8002596:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002598:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800259c:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025a0:	e010      	b.n	80025c4 <HAL_UART_Transmit+0x6a>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a2:	9600      	str	r6, [sp, #0]
 80025a4:	463b      	mov	r3, r7
 80025a6:	2200      	movs	r2, #0
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	4620      	mov	r0, r4
 80025ac:	f7ff ff75 	bl	800249a <UART_WaitOnFlagUntilTimeout>
 80025b0:	2800      	cmp	r0, #0
 80025b2:	d13c      	bne.n	800262e <HAL_UART_Transmit+0xd4>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80025b4:	882b      	ldrh	r3, [r5, #0]
 80025b6:	6822      	ldr	r2, [r4, #0]
 80025b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025bc:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80025be:	6923      	ldr	r3, [r4, #16]
 80025c0:	b9c3      	cbnz	r3, 80025f4 <HAL_UART_Transmit+0x9a>
          pData += 2U;
 80025c2:	3502      	adds	r5, #2
    while (huart->TxXferCount > 0U)
 80025c4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	b1b3      	cbz	r3, 80025f8 <HAL_UART_Transmit+0x9e>
      huart->TxXferCount--;
 80025ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025d2:	68a3      	ldr	r3, [r4, #8]
 80025d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d8:	d0e3      	beq.n	80025a2 <HAL_UART_Transmit+0x48>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025da:	9600      	str	r6, [sp, #0]
 80025dc:	463b      	mov	r3, r7
 80025de:	2200      	movs	r2, #0
 80025e0:	2180      	movs	r1, #128	; 0x80
 80025e2:	4620      	mov	r0, r4
 80025e4:	f7ff ff59 	bl	800249a <UART_WaitOnFlagUntilTimeout>
 80025e8:	bb18      	cbnz	r0, 8002632 <HAL_UART_Transmit+0xd8>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025ea:	782a      	ldrb	r2, [r5, #0]
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	3501      	adds	r5, #1
 80025f2:	e7e7      	b.n	80025c4 <HAL_UART_Transmit+0x6a>
          pData += 1U;
 80025f4:	3501      	adds	r5, #1
 80025f6:	e7e5      	b.n	80025c4 <HAL_UART_Transmit+0x6a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025f8:	9600      	str	r6, [sp, #0]
 80025fa:	463b      	mov	r3, r7
 80025fc:	2200      	movs	r2, #0
 80025fe:	2140      	movs	r1, #64	; 0x40
 8002600:	4620      	mov	r0, r4
 8002602:	f7ff ff4a 	bl	800249a <UART_WaitOnFlagUntilTimeout>
 8002606:	4603      	mov	r3, r0
 8002608:	b9a8      	cbnz	r0, 8002636 <HAL_UART_Transmit+0xdc>
    huart->gState = HAL_UART_STATE_READY;
 800260a:	2220      	movs	r2, #32
 800260c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002610:	2200      	movs	r2, #0
 8002612:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    return HAL_OK;
 8002616:	e000      	b.n	800261a <HAL_UART_Transmit+0xc0>
    return HAL_BUSY;
 8002618:	2302      	movs	r3, #2
}
 800261a:	4618      	mov	r0, r3
 800261c:	b002      	add	sp, #8
 800261e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e7f9      	b.n	800261a <HAL_UART_Transmit+0xc0>
 8002626:	2301      	movs	r3, #1
 8002628:	e7f7      	b.n	800261a <HAL_UART_Transmit+0xc0>
    __HAL_LOCK(huart);
 800262a:	2302      	movs	r3, #2
 800262c:	e7f5      	b.n	800261a <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e7f3      	b.n	800261a <HAL_UART_Transmit+0xc0>
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e7f1      	b.n	800261a <HAL_UART_Transmit+0xc0>
      return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e7ef      	b.n	800261a <HAL_UART_Transmit+0xc0>

0800263a <HAL_UART_TxCpltCallback>:
}
 800263a:	4770      	bx	lr

0800263c <UART_EndTransmit_IT>:
{
 800263c:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800263e:	6801      	ldr	r1, [r0, #0]
 8002640:	68cb      	ldr	r3, [r1, #12]
 8002642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002646:	60cb      	str	r3, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002648:	2320      	movs	r3, #32
 800264a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800264e:	f7ff fff4 	bl	800263a <HAL_UART_TxCpltCallback>
}
 8002652:	2000      	movs	r0, #0
 8002654:	bd08      	pop	{r3, pc}

08002656 <HAL_UART_RxCpltCallback>:
}
 8002656:	4770      	bx	lr

08002658 <UART_Receive_IT>:
{
 8002658:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800265a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b22      	cmp	r3, #34	; 0x22
 8002662:	d145      	bne.n	80026f0 <UART_Receive_IT+0x98>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002664:	6883      	ldr	r3, [r0, #8]
 8002666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266a:	d00e      	beq.n	800268a <UART_Receive_IT+0x32>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800266c:	6903      	ldr	r3, [r0, #16]
 800266e:	bb03      	cbnz	r3, 80026b2 <UART_Receive_IT+0x5a>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002670:	6803      	ldr	r3, [r0, #0]
 8002672:	685a      	ldr	r2, [r3, #4]
 8002674:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	6281      	str	r1, [r0, #40]	; 0x28
 800267a:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 800267c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800267e:	3b01      	subs	r3, #1
 8002680:	b29b      	uxth	r3, r3
 8002682:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8002684:	b1f3      	cbz	r3, 80026c4 <UART_Receive_IT+0x6c>
    return HAL_OK;
 8002686:	2000      	movs	r0, #0
 8002688:	e033      	b.n	80026f2 <UART_Receive_IT+0x9a>
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800268a:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 800268c:	6903      	ldr	r3, [r0, #16]
 800268e:	b943      	cbnz	r3, 80026a2 <UART_Receive_IT+0x4a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 2U;
 800269a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800269c:	3302      	adds	r3, #2
 800269e:	6283      	str	r3, [r0, #40]	; 0x28
 80026a0:	e7ec      	b.n	800267c <UART_Receive_IT+0x24>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80026a2:	6803      	ldr	r3, [r0, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	8013      	strh	r3, [r2, #0]
        huart->pRxBuffPtr += 1U;
 80026aa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026ac:	3301      	adds	r3, #1
 80026ae:	6283      	str	r3, [r0, #40]	; 0x28
 80026b0:	e7e4      	b.n	800267c <UART_Receive_IT+0x24>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026b2:	6803      	ldr	r3, [r0, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80026b8:	1c51      	adds	r1, r2, #1
 80026ba:	6281      	str	r1, [r0, #40]	; 0x28
 80026bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c0:	7013      	strb	r3, [r2, #0]
 80026c2:	e7db      	b.n	800267c <UART_Receive_IT+0x24>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026c4:	6802      	ldr	r2, [r0, #0]
 80026c6:	68d3      	ldr	r3, [r2, #12]
 80026c8:	f023 0320 	bic.w	r3, r3, #32
 80026cc:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026ce:	6802      	ldr	r2, [r0, #0]
 80026d0:	68d3      	ldr	r3, [r2, #12]
 80026d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026d6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026d8:	6802      	ldr	r2, [r0, #0]
 80026da:	6953      	ldr	r3, [r2, #20]
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80026e2:	2320      	movs	r3, #32
 80026e4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80026e8:	f7ff ffb5 	bl	8002656 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80026ec:	2000      	movs	r0, #0
 80026ee:	e000      	b.n	80026f2 <UART_Receive_IT+0x9a>
    return HAL_BUSY;
 80026f0:	2002      	movs	r0, #2
}
 80026f2:	bd08      	pop	{r3, pc}

080026f4 <HAL_UART_ErrorCallback>:
}
 80026f4:	4770      	bx	lr

080026f6 <HAL_UART_IRQHandler>:
{
 80026f6:	b510      	push	{r4, lr}
 80026f8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026fa:	6802      	ldr	r2, [r0, #0]
 80026fc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026fe:	68d1      	ldr	r1, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002700:	6952      	ldr	r2, [r2, #20]
  if (errorflags == RESET)
 8002702:	f013 000f 	ands.w	r0, r3, #15
 8002706:	d105      	bne.n	8002714 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002708:	f013 0f20 	tst.w	r3, #32
 800270c:	d002      	beq.n	8002714 <HAL_UART_IRQHandler+0x1e>
 800270e:	f011 0f20 	tst.w	r1, #32
 8002712:	d156      	bne.n	80027c2 <HAL_UART_IRQHandler+0xcc>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002714:	2800      	cmp	r0, #0
 8002716:	d06a      	beq.n	80027ee <HAL_UART_IRQHandler+0xf8>
 8002718:	f012 0201 	ands.w	r2, r2, #1
 800271c:	d102      	bne.n	8002724 <HAL_UART_IRQHandler+0x2e>
 800271e:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002722:	d064      	beq.n	80027ee <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002724:	f013 0f01 	tst.w	r3, #1
 8002728:	d006      	beq.n	8002738 <HAL_UART_IRQHandler+0x42>
 800272a:	f411 7f80 	tst.w	r1, #256	; 0x100
 800272e:	d003      	beq.n	8002738 <HAL_UART_IRQHandler+0x42>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002730:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002732:	f040 0001 	orr.w	r0, r0, #1
 8002736:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002738:	f013 0f04 	tst.w	r3, #4
 800273c:	d004      	beq.n	8002748 <HAL_UART_IRQHandler+0x52>
 800273e:	b11a      	cbz	r2, 8002748 <HAL_UART_IRQHandler+0x52>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002740:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002742:	f040 0002 	orr.w	r0, r0, #2
 8002746:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002748:	f013 0f02 	tst.w	r3, #2
 800274c:	d004      	beq.n	8002758 <HAL_UART_IRQHandler+0x62>
 800274e:	b11a      	cbz	r2, 8002758 <HAL_UART_IRQHandler+0x62>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002750:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002752:	f040 0004 	orr.w	r0, r0, #4
 8002756:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002758:	f013 0f08 	tst.w	r3, #8
 800275c:	d004      	beq.n	8002768 <HAL_UART_IRQHandler+0x72>
 800275e:	b11a      	cbz	r2, 8002768 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002760:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002762:	f042 0208 	orr.w	r2, r2, #8
 8002766:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002768:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800276a:	2a00      	cmp	r2, #0
 800276c:	d04b      	beq.n	8002806 <HAL_UART_IRQHandler+0x110>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800276e:	f013 0f20 	tst.w	r3, #32
 8002772:	d002      	beq.n	800277a <HAL_UART_IRQHandler+0x84>
 8002774:	f011 0f20 	tst.w	r1, #32
 8002778:	d127      	bne.n	80027ca <HAL_UART_IRQHandler+0xd4>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002782:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002784:	f012 0f08 	tst.w	r2, #8
 8002788:	d100      	bne.n	800278c <HAL_UART_IRQHandler+0x96>
 800278a:	b353      	cbz	r3, 80027e2 <HAL_UART_IRQHandler+0xec>
        UART_EndRxTransfer(huart);
 800278c:	4620      	mov	r0, r4
 800278e:	f7ff fdd8 	bl	8002342 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	f012 0f40 	tst.w	r2, #64	; 0x40
 800279a:	d01e      	beq.n	80027da <HAL_UART_IRQHandler+0xe4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027a2:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80027a4:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80027a6:	b1a2      	cbz	r2, 80027d2 <HAL_UART_IRQHandler+0xdc>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027a8:	f642 0319 	movw	r3, #10265	; 0x2819
 80027ac:	f6c0 0300 	movt	r3, #2048	; 0x800
 80027b0:	6353      	str	r3, [r2, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027b2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80027b4:	f7fe fd14 	bl	80011e0 <HAL_DMA_Abort_IT>
 80027b8:	b328      	cbz	r0, 8002806 <HAL_UART_IRQHandler+0x110>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80027bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80027be:	4798      	blx	r3
 80027c0:	e021      	b.n	8002806 <HAL_UART_IRQHandler+0x110>
      UART_Receive_IT(huart);
 80027c2:	4620      	mov	r0, r4
 80027c4:	f7ff ff48 	bl	8002658 <UART_Receive_IT>
      return;
 80027c8:	e01d      	b.n	8002806 <HAL_UART_IRQHandler+0x110>
        UART_Receive_IT(huart);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff ff44 	bl	8002658 <UART_Receive_IT>
 80027d0:	e7d3      	b.n	800277a <HAL_UART_IRQHandler+0x84>
            HAL_UART_ErrorCallback(huart);
 80027d2:	4620      	mov	r0, r4
 80027d4:	f7ff ff8e 	bl	80026f4 <HAL_UART_ErrorCallback>
 80027d8:	e015      	b.n	8002806 <HAL_UART_IRQHandler+0x110>
          HAL_UART_ErrorCallback(huart);
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff ff8a 	bl	80026f4 <HAL_UART_ErrorCallback>
 80027e0:	e011      	b.n	8002806 <HAL_UART_IRQHandler+0x110>
        HAL_UART_ErrorCallback(huart);
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff ff86 	bl	80026f4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	63e3      	str	r3, [r4, #60]	; 0x3c
 80027ec:	e00b      	b.n	8002806 <HAL_UART_IRQHandler+0x110>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027ee:	f013 0f80 	tst.w	r3, #128	; 0x80
 80027f2:	d002      	beq.n	80027fa <HAL_UART_IRQHandler+0x104>
 80027f4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80027f8:	d106      	bne.n	8002808 <HAL_UART_IRQHandler+0x112>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027fe:	d002      	beq.n	8002806 <HAL_UART_IRQHandler+0x110>
 8002800:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002804:	d104      	bne.n	8002810 <HAL_UART_IRQHandler+0x11a>
}
 8002806:	bd10      	pop	{r4, pc}
    UART_Transmit_IT(huart);
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fda8 	bl	800235e <UART_Transmit_IT>
    return;
 800280e:	e7fa      	b.n	8002806 <HAL_UART_IRQHandler+0x110>
    UART_EndTransmit_IT(huart);
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff ff13 	bl	800263c <UART_EndTransmit_IT>
    return;
 8002816:	e7f6      	b.n	8002806 <HAL_UART_IRQHandler+0x110>

08002818 <UART_DMAAbortOnError>:
{
 8002818:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800281a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800281c:	2300      	movs	r3, #0
 800281e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002820:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002822:	f7ff ff67 	bl	80026f4 <HAL_UART_ErrorCallback>
}
 8002826:	bd08      	pop	{r3, pc}

08002828 <__libc_init_array>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	2500      	movs	r5, #0
 800282c:	4e0c      	ldr	r6, [pc, #48]	; (8002860 <__libc_init_array+0x38>)
 800282e:	4c0d      	ldr	r4, [pc, #52]	; (8002864 <__libc_init_array+0x3c>)
 8002830:	1ba4      	subs	r4, r4, r6
 8002832:	10a4      	asrs	r4, r4, #2
 8002834:	42a5      	cmp	r5, r4
 8002836:	d109      	bne.n	800284c <__libc_init_array+0x24>
 8002838:	f000 f87a 	bl	8002930 <_init>
 800283c:	2500      	movs	r5, #0
 800283e:	4e0a      	ldr	r6, [pc, #40]	; (8002868 <__libc_init_array+0x40>)
 8002840:	4c0a      	ldr	r4, [pc, #40]	; (800286c <__libc_init_array+0x44>)
 8002842:	1ba4      	subs	r4, r4, r6
 8002844:	10a4      	asrs	r4, r4, #2
 8002846:	42a5      	cmp	r5, r4
 8002848:	d105      	bne.n	8002856 <__libc_init_array+0x2e>
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002850:	4798      	blx	r3
 8002852:	3501      	adds	r5, #1
 8002854:	e7ee      	b.n	8002834 <__libc_init_array+0xc>
 8002856:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800285a:	4798      	blx	r3
 800285c:	3501      	adds	r5, #1
 800285e:	e7f2      	b.n	8002846 <__libc_init_array+0x1e>
 8002860:	080029ac 	.word	0x080029ac
 8002864:	080029ac 	.word	0x080029ac
 8002868:	080029ac 	.word	0x080029ac
 800286c:	080029b0 	.word	0x080029b0

08002870 <__itoa>:
 8002870:	1e93      	subs	r3, r2, #2
 8002872:	2b22      	cmp	r3, #34	; 0x22
 8002874:	b510      	push	{r4, lr}
 8002876:	460c      	mov	r4, r1
 8002878:	d904      	bls.n	8002884 <__itoa+0x14>
 800287a:	2300      	movs	r3, #0
 800287c:	461c      	mov	r4, r3
 800287e:	700b      	strb	r3, [r1, #0]
 8002880:	4620      	mov	r0, r4
 8002882:	bd10      	pop	{r4, pc}
 8002884:	2a0a      	cmp	r2, #10
 8002886:	d109      	bne.n	800289c <__itoa+0x2c>
 8002888:	2800      	cmp	r0, #0
 800288a:	da07      	bge.n	800289c <__itoa+0x2c>
 800288c:	232d      	movs	r3, #45	; 0x2d
 800288e:	700b      	strb	r3, [r1, #0]
 8002890:	2101      	movs	r1, #1
 8002892:	4240      	negs	r0, r0
 8002894:	4421      	add	r1, r4
 8002896:	f000 f80d 	bl	80028b4 <__utoa>
 800289a:	e7f1      	b.n	8002880 <__itoa+0x10>
 800289c:	2100      	movs	r1, #0
 800289e:	e7f9      	b.n	8002894 <__itoa+0x24>

080028a0 <itoa>:
 80028a0:	f7ff bfe6 	b.w	8002870 <__itoa>

080028a4 <memset>:
 80028a4:	4603      	mov	r3, r0
 80028a6:	4402      	add	r2, r0
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d100      	bne.n	80028ae <memset+0xa>
 80028ac:	4770      	bx	lr
 80028ae:	f803 1b01 	strb.w	r1, [r3], #1
 80028b2:	e7f9      	b.n	80028a8 <memset+0x4>

080028b4 <__utoa>:
 80028b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b6:	b08b      	sub	sp, #44	; 0x2c
 80028b8:	4605      	mov	r5, r0
 80028ba:	460c      	mov	r4, r1
 80028bc:	466e      	mov	r6, sp
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <__utoa+0x78>)
 80028c0:	f103 0c20 	add.w	ip, r3, #32
 80028c4:	4637      	mov	r7, r6
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	6859      	ldr	r1, [r3, #4]
 80028ca:	3308      	adds	r3, #8
 80028cc:	c703      	stmia	r7!, {r0, r1}
 80028ce:	4563      	cmp	r3, ip
 80028d0:	463e      	mov	r6, r7
 80028d2:	d1f7      	bne.n	80028c4 <__utoa+0x10>
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	791b      	ldrb	r3, [r3, #4]
 80028d8:	6038      	str	r0, [r7, #0]
 80028da:	713b      	strb	r3, [r7, #4]
 80028dc:	1e93      	subs	r3, r2, #2
 80028de:	2b22      	cmp	r3, #34	; 0x22
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	d904      	bls.n	80028f0 <__utoa+0x3c>
 80028e6:	7023      	strb	r3, [r4, #0]
 80028e8:	461c      	mov	r4, r3
 80028ea:	4620      	mov	r0, r4
 80028ec:	b00b      	add	sp, #44	; 0x2c
 80028ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f0:	1e66      	subs	r6, r4, #1
 80028f2:	fbb5 f0f2 	udiv	r0, r5, r2
 80028f6:	fb02 5510 	mls	r5, r2, r0, r5
 80028fa:	af0a      	add	r7, sp, #40	; 0x28
 80028fc:	443d      	add	r5, r7
 80028fe:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8002902:	1c59      	adds	r1, r3, #1
 8002904:	f806 5f01 	strb.w	r5, [r6, #1]!
 8002908:	4605      	mov	r5, r0
 800290a:	b968      	cbnz	r0, 8002928 <__utoa+0x74>
 800290c:	4622      	mov	r2, r4
 800290e:	5460      	strb	r0, [r4, r1]
 8002910:	4423      	add	r3, r4
 8002912:	1b19      	subs	r1, r3, r4
 8002914:	1b10      	subs	r0, r2, r4
 8002916:	4281      	cmp	r1, r0
 8002918:	dde7      	ble.n	80028ea <__utoa+0x36>
 800291a:	7811      	ldrb	r1, [r2, #0]
 800291c:	7818      	ldrb	r0, [r3, #0]
 800291e:	f802 0b01 	strb.w	r0, [r2], #1
 8002922:	f803 1901 	strb.w	r1, [r3], #-1
 8002926:	e7f4      	b.n	8002912 <__utoa+0x5e>
 8002928:	460b      	mov	r3, r1
 800292a:	e7e2      	b.n	80028f2 <__utoa+0x3e>
 800292c:	08002984 	.word	0x08002984

08002930 <_init>:
 8002930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002932:	bf00      	nop
 8002934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002936:	bc08      	pop	{r3}
 8002938:	469e      	mov	lr, r3
 800293a:	4770      	bx	lr

0800293c <_fini>:
 800293c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293e:	bf00      	nop
 8002940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002942:	bc08      	pop	{r3}
 8002944:	469e      	mov	lr, r3
 8002946:	4770      	bx	lr
