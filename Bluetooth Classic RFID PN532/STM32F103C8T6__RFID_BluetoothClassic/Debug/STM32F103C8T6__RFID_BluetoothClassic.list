
STM32F103C8T6__RFID_BluetoothClassic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08004bf4  08004bf4  00014bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e80  08004e80  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e80  08004e80  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e80  08004e80  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e84  08004e84  00014e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08004ef8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004ef8  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bc8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002595  00000000  00000000  00030c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  000331f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00034128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000165ff  00000000  00000000  00034f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b51e  00000000  00000000  0004b52f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075ca3  00000000  00000000  00056a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc6f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b0  00000000  00000000  000cc76c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bdc 	.word	0x08004bdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004bdc 	.word	0x08004bdc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b0ce      	sub	sp, #312	; 0x138
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f001 f9b7 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8c7 	bl	80002f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9b9 	bl	80004e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f909 	bl	8000384 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000172:	f000 f93d 	bl	80003f0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000176:	f000 f989 	bl	800048c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 800017a:	20c8      	movs	r0, #200	; 0xc8
 800017c:	f001 fa0c 	bl	8001598 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000186:	4857      	ldr	r0, [pc, #348]	; (80002e4 <main+0x188>)
 8000188:	f001 fd06 	bl	8001b98 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800018c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000190:	f001 fa02 	bl	8001598 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 8000194:	2232      	movs	r2, #50	; 0x32
 8000196:	2100      	movs	r1, #0
 8000198:	4853      	ldr	r0, [pc, #332]	; (80002e8 <main+0x18c>)
 800019a:	f003 fc55 	bl	8003a48 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 800019e:	4853      	ldr	r0, [pc, #332]	; (80002ec <main+0x190>)
 80001a0:	f002 fbe4 	bl	800296c <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80001a4:	4b52      	ldr	r3, [pc, #328]	; (80002f0 <main+0x194>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	68da      	ldr	r2, [r3, #12]
 80001aa:	4b51      	ldr	r3, [pc, #324]	; (80002f0 <main+0x194>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f042 0220 	orr.w	r2, r2, #32
 80001b2:	60da      	str	r2, [r3, #12]

  uint8_t buff[255];
  uint8_t uid[MIFARE_UID_MAX_LENGTH];
  int32_t uid_len = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

  PN532 pn532;
  PN532_SPI_Init(&pn532);
 80001ba:	f107 030c 	add.w	r3, r7, #12
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 ff10 	bl	8000fe4 <PN532_SPI_Init>
  PN532_GetFirmwareVersion(&pn532, buff);
 80001c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80001c8:	f107 030c 	add.w	r3, r7, #12
 80001cc:	4611      	mov	r1, r2
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 fd18 	bl	8000c04 <PN532_GetFirmwareVersion>
  if (PN532_GetFirmwareVersion(&pn532, buff) != PN532_STATUS_OK)
 80001d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	4611      	mov	r1, r2
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 fd10 	bl	8000c04 <PN532_GetFirmwareVersion>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d012      	beq.n	8000210 <main+0xb4>
  {
    while(1)
    {
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f0:	483c      	ldr	r0, [pc, #240]	; (80002e4 <main+0x188>)
 80001f2:	f001 fcd1 	bl	8001b98 <HAL_GPIO_WritePin>
    	HAL_Delay(250);
 80001f6:	20fa      	movs	r0, #250	; 0xfa
 80001f8:	f001 f9ce 	bl	8001598 <HAL_Delay>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80001fc:	2200      	movs	r2, #0
 80001fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000202:	4838      	ldr	r0, [pc, #224]	; (80002e4 <main+0x188>)
 8000204:	f001 fcc8 	bl	8001b98 <HAL_GPIO_WritePin>
    	HAL_Delay(250);
 8000208:	20fa      	movs	r0, #250	; 0xfa
 800020a:	f001 f9c5 	bl	8001598 <HAL_Delay>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 800020e:	e7ec      	b.n	80001ea <main+0x8e>
    }
  }
  PN532_SamConfiguration(&pn532);
 8000210:	f107 030c 	add.w	r3, r7, #12
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fd19 	bl	8000c4c <PN532_SamConfiguration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	memset(uid, 0, sizeof(uid));
 800021a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800021e:	220a      	movs	r2, #10
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fc10 	bl	8003a48 <memset>
	    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000228:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800022c:	f107 000c 	add.w	r0, r7, #12
 8000230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000234:	2200      	movs	r2, #0
 8000236:	f000 fd2b 	bl	8000c90 <PN532_ReadPassiveTarget>
 800023a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	    if (uid_len != PN532_STATUS_ERROR)
 800023e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000246:	d0e8      	beq.n	800021a <main+0xbe>
	    {
	    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000248:	2200      	movs	r2, #0
 800024a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024e:	4825      	ldr	r0, [pc, #148]	; (80002e4 <main+0x188>)
 8000250:	f001 fca2 	bl	8001b98 <HAL_GPIO_WritePin>
	    	memset(buffer, 0, sizeof(buffer));
 8000254:	2232      	movs	r2, #50	; 0x32
 8000256:	2100      	movs	r1, #0
 8000258:	4823      	ldr	r0, [pc, #140]	; (80002e8 <main+0x18c>)
 800025a:	f003 fbf5 	bl	8003a48 <memset>
	    	char stringForHex[5];
	    	for(uint8_t i=0; i<uid_len; i++)
 800025e:	2300      	movs	r3, #0
 8000260:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000264:	e01a      	b.n	800029c <main+0x140>
	    	{
	    		memset(stringForHex, 0, sizeof(stringForHex));
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2205      	movs	r2, #5
 800026a:	2100      	movs	r1, #0
 800026c:	4618      	mov	r0, r3
 800026e:	f003 fbeb 	bl	8003a48 <memset>
	    		sprintf(stringForHex, "%d ", (unsigned char)uid[i]);
 8000272:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000276:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800027a:	5cd3      	ldrb	r3, [r2, r3]
 800027c:	461a      	mov	r2, r3
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	491c      	ldr	r1, [pc, #112]	; (80002f4 <main+0x198>)
 8000282:	4618      	mov	r0, r3
 8000284:	f003 fc00 	bl	8003a88 <siprintf>
	    		strcat(buffer, stringForHex);
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4816      	ldr	r0, [pc, #88]	; (80002e8 <main+0x18c>)
 800028e:	f003 fc1b 	bl	8003ac8 <strcat>
	    	for(uint8_t i=0; i<uid_len; i++)
 8000292:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000296:	3301      	adds	r3, #1
 8000298:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800029c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80002a0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80002a4:	429a      	cmp	r2, r3
 80002a6:	dcde      	bgt.n	8000266 <main+0x10a>
	    	}
	    	buffer[strlen(buffer)-1] = '\n';
 80002a8:	480f      	ldr	r0, [pc, #60]	; (80002e8 <main+0x18c>)
 80002aa:	f7ff ff4f 	bl	800014c <strlen>
 80002ae:	4603      	mov	r3, r0
 80002b0:	3b01      	subs	r3, #1
 80002b2:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <main+0x18c>)
 80002b4:	210a      	movs	r1, #10
 80002b6:	54d1      	strb	r1, [r2, r3]
	    	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 80002b8:	480b      	ldr	r0, [pc, #44]	; (80002e8 <main+0x18c>)
 80002ba:	f7ff ff47 	bl	800014c <strlen>
 80002be:	4603      	mov	r3, r0
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002c6:	4908      	ldr	r1, [pc, #32]	; (80002e8 <main+0x18c>)
 80002c8:	4809      	ldr	r0, [pc, #36]	; (80002f0 <main+0x194>)
 80002ca:	f002 fefa 	bl	80030c2 <HAL_UART_Transmit>
	    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80002ce:	2201      	movs	r2, #1
 80002d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002d4:	4803      	ldr	r0, [pc, #12]	; (80002e4 <main+0x188>)
 80002d6:	f001 fc5f 	bl	8001b98 <HAL_GPIO_WritePin>
	    	HAL_Delay(1000);
 80002da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002de:	f001 f95b 	bl	8001598 <HAL_Delay>
	  	memset(uid, 0, sizeof(uid));
 80002e2:	e79a      	b.n	800021a <main+0xbe>
 80002e4:	40011000 	.word	0x40011000
 80002e8:	20000174 	.word	0x20000174
 80002ec:	200000f4 	.word	0x200000f4
 80002f0:	20000134 	.word	0x20000134
 80002f4:	08004bf4 	.word	0x08004bf4

080002f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b090      	sub	sp, #64	; 0x40
 80002fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	2228      	movs	r2, #40	; 0x28
 8000304:	2100      	movs	r1, #0
 8000306:	4618      	mov	r0, r3
 8000308:	f003 fb9e 	bl	8003a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	2200      	movs	r2, #0
 8000310:	601a      	str	r2, [r3, #0]
 8000312:	605a      	str	r2, [r3, #4]
 8000314:	609a      	str	r2, [r3, #8]
 8000316:	60da      	str	r2, [r3, #12]
 8000318:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800031a:	2301      	movs	r3, #1
 800031c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000324:	2300      	movs	r3, #0
 8000326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000328:	2301      	movs	r3, #1
 800032a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800032c:	2302      	movs	r3, #2
 800032e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000334:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000336:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800033a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4618      	mov	r0, r3
 8000342:	f001 fc41 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800034c:	f000 f95a 	bl	8000604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000350:	230f      	movs	r3, #15
 8000352:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	2302      	movs	r3, #2
 8000356:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000358:	2300      	movs	r3, #0
 800035a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800035c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000366:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2102      	movs	r1, #2
 800036c:	4618      	mov	r0, r3
 800036e:	f001 feab 	bl	80020c8 <HAL_RCC_ClockConfig>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000378:	f000 f944 	bl	8000604 <Error_Handler>
  }
}
 800037c:	bf00      	nop
 800037e:	3740      	adds	r7, #64	; 0x40
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000388:	4b17      	ldr	r3, [pc, #92]	; (80003e8 <MX_SPI1_Init+0x64>)
 800038a:	4a18      	ldr	r2, [pc, #96]	; (80003ec <MX_SPI1_Init+0x68>)
 800038c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800038e:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <MX_SPI1_Init+0x64>)
 8000390:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000394:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000396:	4b14      	ldr	r3, [pc, #80]	; (80003e8 <MX_SPI1_Init+0x64>)
 8000398:	2200      	movs	r2, #0
 800039a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <MX_SPI1_Init+0x64>)
 800039e:	2200      	movs	r2, #0
 80003a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003a2:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003b8:	2220      	movs	r2, #32
 80003ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80003bc:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003c8:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003ce:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003d0:	220a      	movs	r2, #10
 80003d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003d4:	4804      	ldr	r0, [pc, #16]	; (80003e8 <MX_SPI1_Init+0x64>)
 80003d6:	f002 f813 	bl	8002400 <HAL_SPI_Init>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003e0:	f000 f910 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	2000009c 	.word	0x2000009c
 80003ec:	40013000 	.word	0x40013000

080003f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003f6:	f107 0308 	add.w	r3, r7, #8
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000404:	463b      	mov	r3, r7
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800040c:	4b1e      	ldr	r3, [pc, #120]	; (8000488 <MX_TIM2_Init+0x98>)
 800040e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000412:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <MX_TIM2_Init+0x98>)
 8000416:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800041a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b1a      	ldr	r3, [pc, #104]	; (8000488 <MX_TIM2_Init+0x98>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000422:	4b19      	ldr	r3, [pc, #100]	; (8000488 <MX_TIM2_Init+0x98>)
 8000424:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000428:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800042a:	4b17      	ldr	r3, [pc, #92]	; (8000488 <MX_TIM2_Init+0x98>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000430:	4b15      	ldr	r3, [pc, #84]	; (8000488 <MX_TIM2_Init+0x98>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000436:	4814      	ldr	r0, [pc, #80]	; (8000488 <MX_TIM2_Init+0x98>)
 8000438:	f002 fa6d 	bl	8002916 <HAL_TIM_Base_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000442:	f000 f8df 	bl	8000604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800044a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800044c:	f107 0308 	add.w	r3, r7, #8
 8000450:	4619      	mov	r1, r3
 8000452:	480d      	ldr	r0, [pc, #52]	; (8000488 <MX_TIM2_Init+0x98>)
 8000454:	f002 fbb5 	bl	8002bc2 <HAL_TIM_ConfigClockSource>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800045e:	f000 f8d1 	bl	8000604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000462:	2300      	movs	r3, #0
 8000464:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000466:	2300      	movs	r3, #0
 8000468:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800046a:	463b      	mov	r3, r7
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <MX_TIM2_Init+0x98>)
 8000470:	f002 fd84 	bl	8002f7c <HAL_TIMEx_MasterConfigSynchronization>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800047a:	f000 f8c3 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3718      	adds	r7, #24
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	200000f4 	.word	0x200000f4

0800048c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 8000492:	4a12      	ldr	r2, [pc, #72]	; (80004dc <MX_USART2_UART_Init+0x50>)
 8000494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000496:	4b10      	ldr	r3, [pc, #64]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 8000498:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800049c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b08      	ldr	r3, [pc, #32]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c2:	4805      	ldr	r0, [pc, #20]	; (80004d8 <MX_USART2_UART_Init+0x4c>)
 80004c4:	f002 fdb0 	bl	8003028 <HAL_UART_Init>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ce:	f000 f899 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	20000134 	.word	0x20000134
 80004dc:	40004400 	.word	0x40004400

080004e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b088      	sub	sp, #32
 80004e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f4:	4b40      	ldr	r3, [pc, #256]	; (80005f8 <MX_GPIO_Init+0x118>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a3f      	ldr	r2, [pc, #252]	; (80005f8 <MX_GPIO_Init+0x118>)
 80004fa:	f043 0310 	orr.w	r3, r3, #16
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b3d      	ldr	r3, [pc, #244]	; (80005f8 <MX_GPIO_Init+0x118>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0310 	and.w	r3, r3, #16
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800050c:	4b3a      	ldr	r3, [pc, #232]	; (80005f8 <MX_GPIO_Init+0x118>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a39      	ldr	r2, [pc, #228]	; (80005f8 <MX_GPIO_Init+0x118>)
 8000512:	f043 0320 	orr.w	r3, r3, #32
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b37      	ldr	r3, [pc, #220]	; (80005f8 <MX_GPIO_Init+0x118>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0320 	and.w	r3, r3, #32
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b34      	ldr	r3, [pc, #208]	; (80005f8 <MX_GPIO_Init+0x118>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a33      	ldr	r2, [pc, #204]	; (80005f8 <MX_GPIO_Init+0x118>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b31      	ldr	r3, [pc, #196]	; (80005f8 <MX_GPIO_Init+0x118>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053c:	4b2e      	ldr	r3, [pc, #184]	; (80005f8 <MX_GPIO_Init+0x118>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a2d      	ldr	r2, [pc, #180]	; (80005f8 <MX_GPIO_Init+0x118>)
 8000542:	f043 0308 	orr.w	r3, r3, #8
 8000546:	6193      	str	r3, [r2, #24]
 8000548:	4b2b      	ldr	r3, [pc, #172]	; (80005f8 <MX_GPIO_Init+0x118>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f003 0308 	and.w	r3, r3, #8
 8000550:	603b      	str	r3, [r7, #0]
 8000552:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000554:	2201      	movs	r2, #1
 8000556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055a:	4828      	ldr	r0, [pc, #160]	; (80005fc <MX_GPIO_Init+0x11c>)
 800055c:	f001 fb1c 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <MX_GPIO_Init+0x11c>)
 8000568:	f001 fb16 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 800056c:	2201      	movs	r2, #1
 800056e:	2101      	movs	r1, #1
 8000570:	4823      	ldr	r0, [pc, #140]	; (8000600 <MX_GPIO_Init+0x120>)
 8000572:	f001 fb11 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800057c:	4820      	ldr	r0, [pc, #128]	; (8000600 <MX_GPIO_Init+0x120>)
 800057e:	f001 fb0b 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BluetoothReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BluetoothReset_Pin;
 8000582:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000590:	2303      	movs	r3, #3
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4818      	ldr	r0, [pc, #96]	; (80005fc <MX_GPIO_Init+0x11c>)
 800059c:	f001 f9a2 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SS_Pin RFID_Reset_Pin */
  GPIO_InitStruct.Pin = RFID_SS_Pin|RFID_Reset_Pin;
 80005a0:	f240 4301 	movw	r3, #1025	; 0x401
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ae:	2303      	movs	r3, #3
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	4811      	ldr	r0, [pc, #68]	; (8000600 <MX_GPIO_Init+0x120>)
 80005ba:	f001 f993 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_IRQ_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 80005be:	2302      	movs	r3, #2
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <MX_GPIO_Init+0x120>)
 80005d2:	f001 f987 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80005d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005dc:	2300      	movs	r3, #0
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	4619      	mov	r1, r3
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_GPIO_Init+0x120>)
 80005ec:	f001 f97a 	bl	80018e4 <HAL_GPIO_Init>

}
 80005f0:	bf00      	nop
 80005f2:	3720      	adds	r7, #32
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40011000 	.word	0x40011000
 8000600:	40010c00 	.word	0x40010c00

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000610:	b480      	push	{r7}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	4613      	mov	r3, r2
 800061c:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 800061e:	2300      	movs	r3, #0
 8000620:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000622:	2300      	movs	r3, #0
 8000624:	75bb      	strb	r3, [r7, #22]
 8000626:	e012      	b.n	800064e <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000628:	7dbb      	ldrb	r3, [r7, #22]
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	781a      	ldrb	r2, [r3, #0]
 8000630:	7dbb      	ldrb	r3, [r7, #22]
 8000632:	68b9      	ldr	r1, [r7, #8]
 8000634:	440b      	add	r3, r1
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	429a      	cmp	r2, r3
 800063a:	d103      	bne.n	8000644 <string_compare+0x34>
	   	  		  comVAR++;
 800063c:	7dfb      	ldrb	r3, [r7, #23]
 800063e:	3301      	adds	r3, #1
 8000640:	75fb      	strb	r3, [r7, #23]
 8000642:	e001      	b.n	8000648 <string_compare+0x38>
	   	  	  else comVAR=0;
 8000644:	2300      	movs	r3, #0
 8000646:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000648:	7dbb      	ldrb	r3, [r7, #22]
 800064a:	3301      	adds	r3, #1
 800064c:	75bb      	strb	r3, [r7, #22]
 800064e:	7dbb      	ldrb	r3, [r7, #22]
 8000650:	b29b      	uxth	r3, r3
 8000652:	88fa      	ldrh	r2, [r7, #6]
 8000654:	429a      	cmp	r2, r3
 8000656:	d8e7      	bhi.n	8000628 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	b29b      	uxth	r3, r3
 800065c:	88fa      	ldrh	r2, [r7, #6]
 800065e:	429a      	cmp	r2, r3
 8000660:	d101      	bne.n	8000666 <string_compare+0x56>
		 	return 1;
 8000662:	2301      	movs	r3, #1
 8000664:	e000      	b.n	8000668 <string_compare+0x58>
	 else 	return 0;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	371c      	adds	r7, #28
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr
	...

08000674 <Message_handler>:

void Message_handler()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000678:	2206      	movs	r2, #6
 800067a:	4927      	ldr	r1, [pc, #156]	; (8000718 <Message_handler+0xa4>)
 800067c:	4827      	ldr	r0, [pc, #156]	; (800071c <Message_handler+0xa8>)
 800067e:	f7ff ffc7 	bl	8000610 <string_compare>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00d      	beq.n	80006a4 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068e:	4824      	ldr	r0, [pc, #144]	; (8000720 <Message_handler+0xac>)
 8000690:	f001 fa82 	bl	8001b98 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000694:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000698:	220b      	movs	r2, #11
 800069a:	4922      	ldr	r1, [pc, #136]	; (8000724 <Message_handler+0xb0>)
 800069c:	4822      	ldr	r0, [pc, #136]	; (8000728 <Message_handler+0xb4>)
 800069e:	f002 fd10 	bl	80030c2 <HAL_UART_Transmit>
 80006a2:	e02c      	b.n	80006fe <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 80006a4:	2207      	movs	r2, #7
 80006a6:	4921      	ldr	r1, [pc, #132]	; (800072c <Message_handler+0xb8>)
 80006a8:	481c      	ldr	r0, [pc, #112]	; (800071c <Message_handler+0xa8>)
 80006aa:	f7ff ffb1 	bl	8000610 <string_compare>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00d      	beq.n	80006d0 <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ba:	4819      	ldr	r0, [pc, #100]	; (8000720 <Message_handler+0xac>)
 80006bc:	f001 fa6c 	bl	8001b98 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 80006c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c4:	220c      	movs	r2, #12
 80006c6:	491a      	ldr	r1, [pc, #104]	; (8000730 <Message_handler+0xbc>)
 80006c8:	4817      	ldr	r0, [pc, #92]	; (8000728 <Message_handler+0xb4>)
 80006ca:	f002 fcfa 	bl	80030c2 <HAL_UART_Transmit>
 80006ce:	e016      	b.n	80006fe <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <Message_handler+0xa8>)
 80006d2:	f7ff fd3b 	bl	800014c <strlen>
 80006d6:	4603      	mov	r3, r0
 80006d8:	461a      	mov	r2, r3
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <Message_handler+0xa8>)
 80006dc:	4413      	add	r3, r2
 80006de:	4915      	ldr	r1, [pc, #84]	; (8000734 <Message_handler+0xc0>)
 80006e0:	461a      	mov	r2, r3
 80006e2:	460b      	mov	r3, r1
 80006e4:	881b      	ldrh	r3, [r3, #0]
 80006e6:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 80006e8:	480c      	ldr	r0, [pc, #48]	; (800071c <Message_handler+0xa8>)
 80006ea:	f7ff fd2f 	bl	800014c <strlen>
 80006ee:	4603      	mov	r3, r0
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006f6:	4909      	ldr	r1, [pc, #36]	; (800071c <Message_handler+0xa8>)
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <Message_handler+0xb4>)
 80006fa:	f002 fce2 	bl	80030c2 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 80006fe:	2232      	movs	r2, #50	; 0x32
 8000700:	2100      	movs	r1, #0
 8000702:	4806      	ldr	r0, [pc, #24]	; (800071c <Message_handler+0xa8>)
 8000704:	f003 f9a0 	bl	8003a48 <memset>
	buffer_index = 0;
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <Message_handler+0xc4>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <Message_handler+0xc8>)
 8000710:	2200      	movs	r2, #0
 8000712:	701a      	strb	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	08004bf8 	.word	0x08004bf8
 800071c:	20000174 	.word	0x20000174
 8000720:	40011000 	.word	0x40011000
 8000724:	08004c00 	.word	0x08004c00
 8000728:	20000134 	.word	0x20000134
 800072c:	08004c0c 	.word	0x08004c0c
 8000730:	08004c14 	.word	0x08004c14
 8000734:	08004c24 	.word	0x08004c24
 8000738:	2000008d 	.word	0x2000008d
 800073c:	2000008c 	.word	0x2000008c

08000740 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000740:	b580      	push	{r7, lr}
 8000742:	b0c8      	sub	sp, #288	; 0x120
 8000744:	af00      	add	r7, sp, #0
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	6018      	str	r0, [r3, #0]
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	6019      	str	r1, [r3, #0]
 8000752:	1dbb      	adds	r3, r7, #6
 8000754:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000756:	1dbb      	adds	r3, r7, #6
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	2bff      	cmp	r3, #255	; 0xff
 800075c:	d803      	bhi.n	8000766 <PN532_WriteFrame+0x26>
 800075e:	1dbb      	adds	r3, r7, #6
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <PN532_WriteFrame+0x2c>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	e080      	b.n	800086e <PN532_WriteFrame+0x12e>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 800078a:	2300      	movs	r3, #0
 800078c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000790:	e00e      	b.n	80007b0 <PN532_WriteFrame+0x70>
        checksum += frame[i];
 8000792:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000796:	f107 0214 	add.w	r2, r7, #20
 800079a:	5cd2      	ldrb	r2, [r2, r3]
 800079c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80007a0:	4413      	add	r3, r2
 80007a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 80007a6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007aa:	3301      	adds	r3, #1
 80007ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80007b0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d9ec      	bls.n	8000792 <PN532_WriteFrame+0x52>
    }
    frame[3] = length & 0xFF;
 80007b8:	1dbb      	adds	r3, r7, #6
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80007c4:	1dbb      	adds	r3, r7, #6
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	425b      	negs	r3, r3
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80007da:	e01d      	b.n	8000818 <PN532_WriteFrame+0xd8>
        frame[5 + i] = data[i];
 80007dc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80007e0:	f107 0208 	add.w	r2, r7, #8
 80007e4:	6812      	ldr	r2, [r2, #0]
 80007e6:	441a      	add	r2, r3
 80007e8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80007ec:	3305      	adds	r3, #5
 80007ee:	7811      	ldrb	r1, [r2, #0]
 80007f0:	f107 0214 	add.w	r2, r7, #20
 80007f4:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 80007f6:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80007fa:	f107 0208 	add.w	r2, r7, #8
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	4413      	add	r3, r2
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000808:	4413      	add	r3, r2
 800080a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 800080e:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000812:	3301      	adds	r3, #1
 8000814:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000818:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800081c:	b29b      	uxth	r3, r3
 800081e:	1dba      	adds	r2, r7, #6
 8000820:	8812      	ldrh	r2, [r2, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d8da      	bhi.n	80007dc <PN532_WriteFrame+0x9c>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000826:	1dbb      	adds	r3, r7, #6
 8000828:	881b      	ldrh	r3, [r3, #0]
 800082a:	3305      	adds	r3, #5
 800082c:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000830:	43d2      	mvns	r2, r2
 8000832:	b2d1      	uxtb	r1, r2
 8000834:	f107 0214 	add.w	r2, r7, #20
 8000838:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 800083a:	1dbb      	adds	r3, r7, #6
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	3306      	adds	r3, #6
 8000840:	f107 0214 	add.w	r2, r7, #20
 8000844:	2100      	movs	r1, #0
 8000846:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	1dba      	adds	r2, r7, #6
 8000852:	8812      	ldrh	r2, [r2, #0]
 8000854:	3207      	adds	r2, #7
 8000856:	b291      	uxth	r1, r2
 8000858:	f107 0214 	add.w	r2, r7, #20
 800085c:	4610      	mov	r0, r2
 800085e:	4798      	blx	r3
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d002      	beq.n	800086c <PN532_WriteFrame+0x12c>
        return PN532_STATUS_ERROR;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	e000      	b.n	800086e <PN532_WriteFrame+0x12e>
    }
    return PN532_STATUS_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}

08000878 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000878:	b580      	push	{r7, lr}
 800087a:	b0c8      	sub	sp, #288	; 0x120
 800087c:	af00      	add	r7, sp, #0
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	6018      	str	r0, [r3, #0]
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	6019      	str	r1, [r3, #0]
 800088a:	1dbb      	adds	r3, r7, #6
 800088c:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	1dba      	adds	r2, r7, #6
 800089e:	8812      	ldrh	r2, [r2, #0]
 80008a0:	3207      	adds	r2, #7
 80008a2:	b291      	uxth	r1, r2
 80008a4:	f107 0214 	add.w	r2, r7, #20
 80008a8:	4610      	mov	r0, r2
 80008aa:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 80008b2:	e014      	b.n	80008de <PN532_ReadFrame+0x66>
        offset += 1;
 80008b4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008b8:	3301      	adds	r3, #1
 80008ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 80008be:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	3308      	adds	r3, #8
 80008c8:	429a      	cmp	r2, r3
 80008ca:	db08      	blt.n	80008de <PN532_ReadFrame+0x66>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	695b      	ldr	r3, [r3, #20]
 80008d4:	484e      	ldr	r0, [pc, #312]	; (8000a10 <PN532_ReadFrame+0x198>)
 80008d6:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	e093      	b.n	8000a06 <PN532_ReadFrame+0x18e>
    while (buff[offset] == 0x00) {
 80008de:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008e2:	f107 0214 	add.w	r2, r7, #20
 80008e6:	5cd3      	ldrb	r3, [r2, r3]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d0e3      	beq.n	80008b4 <PN532_ReadFrame+0x3c>
        }
    }
    if (buff[offset] != 0xFF) {
 80008ec:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008f0:	f107 0214 	add.w	r2, r7, #20
 80008f4:	5cd3      	ldrb	r3, [r2, r3]
 80008f6:	2bff      	cmp	r3, #255	; 0xff
 80008f8:	d008      	beq.n	800090c <PN532_ReadFrame+0x94>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4843      	ldr	r0, [pc, #268]	; (8000a10 <PN532_ReadFrame+0x198>)
 8000904:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e07c      	b.n	8000a06 <PN532_ReadFrame+0x18e>
    }
    offset += 1;
 800090c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000910:	3301      	adds	r3, #1
 8000912:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8000916:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 800091a:	1dbb      	adds	r3, r7, #6
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	3308      	adds	r3, #8
 8000920:	429a      	cmp	r2, r3
 8000922:	db08      	blt.n	8000936 <PN532_ReadFrame+0xbe>
        pn532->log("Response contains no data!");
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	4839      	ldr	r0, [pc, #228]	; (8000a14 <PN532_ReadFrame+0x19c>)
 800092e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000930:	f04f 33ff 	mov.w	r3, #4294967295
 8000934:	e067      	b.n	8000a06 <PN532_ReadFrame+0x18e>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000936:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800093a:	f107 0214 	add.w	r2, r7, #20
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000944:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000948:	3301      	adds	r3, #1
 800094a:	f107 0214 	add.w	r2, r7, #20
 800094e:	5cd2      	ldrb	r2, [r2, r3]
 8000950:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000954:	4413      	add	r3, r2
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d008      	beq.n	800096e <PN532_ReadFrame+0xf6>
        pn532->log("Response length checksum did not match length!");
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	482c      	ldr	r0, [pc, #176]	; (8000a18 <PN532_ReadFrame+0x1a0>)
 8000966:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	e04b      	b.n	8000a06 <PN532_ReadFrame+0x18e>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000974:	e012      	b.n	800099c <PN532_ReadFrame+0x124>
        checksum += buff[offset + 2 + i];
 8000976:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800097a:	1c9a      	adds	r2, r3, #2
 800097c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000980:	4413      	add	r3, r2
 8000982:	f107 0214 	add.w	r2, r7, #20
 8000986:	5cd2      	ldrb	r2, [r2, r3]
 8000988:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800098c:	4413      	add	r3, r2
 800098e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000992:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000996:	3301      	adds	r3, #1
 8000998:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800099c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 80009a0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80009a4:	3301      	adds	r3, #1
 80009a6:	429a      	cmp	r2, r3
 80009a8:	dbe5      	blt.n	8000976 <PN532_ReadFrame+0xfe>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 80009aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d008      	beq.n	80009c4 <PN532_ReadFrame+0x14c>
        pn532->log("Response checksum did not match expected checksum");
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4818      	ldr	r0, [pc, #96]	; (8000a1c <PN532_ReadFrame+0x1a4>)
 80009bc:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009be:	f04f 33ff 	mov.w	r3, #4294967295
 80009c2:	e020      	b.n	8000a06 <PN532_ReadFrame+0x18e>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80009ca:	e014      	b.n	80009f6 <PN532_ReadFrame+0x17e>
        response[i] = buff[offset + 2 + i];
 80009cc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80009d0:	1c9a      	adds	r2, r3, #2
 80009d2:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80009d6:	441a      	add	r2, r3
 80009d8:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80009dc:	f107 0108 	add.w	r1, r7, #8
 80009e0:	6809      	ldr	r1, [r1, #0]
 80009e2:	440b      	add	r3, r1
 80009e4:	f107 0114 	add.w	r1, r7, #20
 80009e8:	5c8a      	ldrb	r2, [r1, r2]
 80009ea:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 80009ec:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80009f0:	3301      	adds	r3, #1
 80009f2:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80009f6:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 80009fa:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3e4      	bcc.n	80009cc <PN532_ReadFrame+0x154>
    }
    return frame_len;
 8000a02:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	08004c28 	.word	0x08004c28
 8000a14:	08004c5c 	.word	0x08004c5c
 8000a18:	08004c78 	.word	0x08004c78
 8000a1c:	08004ca8 	.word	0x08004ca8

08000a20 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000a20:	b590      	push	{r4, r7, lr}
 8000a22:	b0c7      	sub	sp, #284	; 0x11c
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	f107 040c 	add.w	r4, r7, #12
 8000a2a:	6020      	str	r0, [r4, #0]
 8000a2c:	4608      	mov	r0, r1
 8000a2e:	1d39      	adds	r1, r7, #4
 8000a30:	600a      	str	r2, [r1, #0]
 8000a32:	4619      	mov	r1, r3
 8000a34:	f107 030b 	add.w	r3, r7, #11
 8000a38:	4602      	mov	r2, r0
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	460a      	mov	r2, r1
 8000a42:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	22d4      	movs	r2, #212	; 0xd4
 8000a4a:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	f107 020b 	add.w	r2, r7, #11
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000a5e:	e010      	b.n	8000a82 <PN532_CallFunction+0x62>
        buff[2 + i] = params[i];
 8000a60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a64:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000a68:	441a      	add	r2, r3
 8000a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a6e:	3302      	adds	r3, #2
 8000a70:	7811      	ldrb	r1, [r2, #0]
 8000a72:	f107 0210 	add.w	r2, r7, #16
 8000a76:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000a78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000a82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d8e7      	bhi.n	8000a60 <PN532_CallFunction+0x40>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000a90:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000a94:	3302      	adds	r3, #2
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f107 0110 	add.w	r1, r7, #16
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	f7ff fe4d 	bl	8000740 <PN532_WriteFrame>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00d      	beq.n	8000ac8 <PN532_CallFunction+0xa8>
        pn532->wakeup();
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	691b      	ldr	r3, [r3, #16]
 8000ab4:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	484d      	ldr	r0, [pc, #308]	; (8000bf4 <PN532_CallFunction+0x1d4>)
 8000ac0:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac6:	e08f      	b.n	8000be8 <PN532_CallFunction+0x1c8>
    }
    if (!pn532->wait_ready(timeout)) {
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000ad4:	4798      	blx	r3
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	f083 0301 	eor.w	r3, r3, #1
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <PN532_CallFunction+0xc8>
        return PN532_STATUS_ERROR;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e07f      	b.n	8000be8 <PN532_CallFunction+0x1c8>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	f107 0210 	add.w	r2, r7, #16
 8000af4:	2106      	movs	r1, #6
 8000af6:	4610      	mov	r0, r2
 8000af8:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000afa:	2300      	movs	r3, #0
 8000afc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000b00:	e018      	b.n	8000b34 <PN532_CallFunction+0x114>
        if (PN532_ACK[i] != buff[i]) {
 8000b02:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000b06:	4a3c      	ldr	r2, [pc, #240]	; (8000bf8 <PN532_CallFunction+0x1d8>)
 8000b08:	5cd2      	ldrb	r2, [r2, r3]
 8000b0a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000b0e:	f107 0110 	add.w	r1, r7, #16
 8000b12:	5ccb      	ldrb	r3, [r1, r3]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d008      	beq.n	8000b2a <PN532_CallFunction+0x10a>
            pn532->log("Did not receive expected ACK from PN532!");
 8000b18:	f107 030c 	add.w	r3, r7, #12
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	4836      	ldr	r0, [pc, #216]	; (8000bfc <PN532_CallFunction+0x1dc>)
 8000b22:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	e05e      	b.n	8000be8 <PN532_CallFunction+0x1c8>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000b2a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000b2e:	3301      	adds	r3, #1
 8000b30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000b34:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000b38:	2b05      	cmp	r3, #5
 8000b3a:	d9e2      	bls.n	8000b02 <PN532_CallFunction+0xe2>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000b48:	4798      	blx	r3
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f083 0301 	eor.w	r3, r3, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d002      	beq.n	8000b5c <PN532_CallFunction+0x13c>
        return PN532_STATUS_ERROR;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e045      	b.n	8000be8 <PN532_CallFunction+0x1c8>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000b5c:	f107 0308 	add.w	r3, r7, #8
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	3302      	adds	r3, #2
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	f107 0110 	add.w	r1, r7, #16
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f7ff fe82 	bl	8000878 <PN532_ReadFrame>
 8000b74:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2bd5      	cmp	r3, #213	; 0xd5
 8000b80:	d109      	bne.n	8000b96 <PN532_CallFunction+0x176>
 8000b82:	f107 0310 	add.w	r3, r7, #16
 8000b86:	785b      	ldrb	r3, [r3, #1]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	f107 030b 	add.w	r3, r7, #11
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d008      	beq.n	8000ba8 <PN532_CallFunction+0x188>
        pn532->log("Received unexpected command response!");
 8000b96:	f107 030c 	add.w	r3, r7, #12
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	695b      	ldr	r3, [r3, #20]
 8000b9e:	4818      	ldr	r0, [pc, #96]	; (8000c00 <PN532_CallFunction+0x1e0>)
 8000ba0:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e01f      	b.n	8000be8 <PN532_CallFunction+0x1c8>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000bae:	e010      	b.n	8000bd2 <PN532_CallFunction+0x1b2>
        response[i] = buff[i + 2];
 8000bb0:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000bb4:	1c9a      	adds	r2, r3, #2
 8000bb6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000bba:	1d39      	adds	r1, r7, #4
 8000bbc:	6809      	ldr	r1, [r1, #0]
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f107 0110 	add.w	r1, r7, #16
 8000bc4:	5c8a      	ldrb	r2, [r1, r2]
 8000bc6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000bc8:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000bcc:	3301      	adds	r3, #1
 8000bce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000bd2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000bd6:	b29b      	uxth	r3, r3
 8000bd8:	f107 0208 	add.w	r2, r7, #8
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d8e6      	bhi.n	8000bb0 <PN532_CallFunction+0x190>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000be2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000be6:	3b02      	subs	r3, #2
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	08004cdc 	.word	0x08004cdc
 8000bf8:	08004dc8 	.word	0x08004dc8
 8000bfc:	08004cf0 	.word	0x08004cf0
 8000c00:	08004d1c 	.word	0x08004d1c

08000c04 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af04      	add	r7, sp, #16
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000c0e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c12:	9302      	str	r3, [sp, #8]
 8000c14:	2300      	movs	r3, #0
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	2300      	movs	r3, #0
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	2102      	movs	r1, #2
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff fefc 	bl	8000a20 <PN532_CallFunction>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c2e:	d106      	bne.n	8000c3e <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	695b      	ldr	r3, [r3, #20]
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <PN532_GetFirmwareVersion+0x44>)
 8000c36:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	e000      	b.n	8000c40 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	08004d44 	.word	0x08004d44

08000c4c <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af04      	add	r7, sp, #16
 8000c52:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <PN532_SamConfiguration+0x40>)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	8019      	strh	r1, [r3, #0]
 8000c60:	3302      	adds	r3, #2
 8000c62:	0c12      	lsrs	r2, r2, #16
 8000c64:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	9302      	str	r3, [sp, #8]
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2300      	movs	r3, #0
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2114      	movs	r1, #20
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff fecf 	bl	8000a20 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	08004d60 	.word	0x08004d60

08000c90 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b090      	sub	sp, #64	; 0x40
 8000c94:	af04      	add	r7, sp, #16
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	60b9      	str	r1, [r7, #8]
 8000c9a:	603b      	str	r3, [r7, #0]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000cac:	f107 0210 	add.w	r2, r7, #16
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	9302      	str	r3, [sp, #8]
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	9301      	str	r3, [sp, #4]
 8000cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	2313      	movs	r3, #19
 8000cc0:	214a      	movs	r1, #74	; 0x4a
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff feac 	bl	8000a20 <PN532_CallFunction>
 8000cc8:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	da02      	bge.n	8000cd6 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd4:	e02f      	b.n	8000d36 <PN532_ReadPassiveTarget+0xa6>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000cd6:	7c3b      	ldrb	r3, [r7, #16]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d006      	beq.n	8000cea <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	4817      	ldr	r0, [pc, #92]	; (8000d40 <PN532_ReadPassiveTarget+0xb0>)
 8000ce2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce8:	e025      	b.n	8000d36 <PN532_ReadPassiveTarget+0xa6>
    }
    if (buff[5] > 7) {
 8000cea:	7d7b      	ldrb	r3, [r7, #21]
 8000cec:	2b07      	cmp	r3, #7
 8000cee:	d906      	bls.n	8000cfe <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	695b      	ldr	r3, [r3, #20]
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <PN532_ReadPassiveTarget+0xb4>)
 8000cf6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfc:	e01b      	b.n	8000d36 <PN532_ReadPassiveTarget+0xa6>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d04:	e011      	b.n	8000d2a <PN532_ReadPassiveTarget+0x9a>
        response[i] = buff[6 + i];
 8000d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d0a:	1d9a      	adds	r2, r3, #6
 8000d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	440b      	add	r3, r1
 8000d14:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d18:	440a      	add	r2, r1
 8000d1a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000d1e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d24:	3301      	adds	r3, #1
 8000d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d2a:	7d7b      	ldrb	r3, [r7, #21]
 8000d2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3e8      	bcc.n	8000d06 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000d34:	7d7b      	ldrb	r3, [r7, #21]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3730      	adds	r7, #48	; 0x30
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	08004d64 	.word	0x08004d64
 8000d44:	08004d84 	.word	0x08004d84

08000d48 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d52:	480e      	ldr	r0, [pc, #56]	; (8000d8c <PN532_Reset+0x44>)
 8000d54:	f000 ff20 	bl	8001b98 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000d58:	2064      	movs	r0, #100	; 0x64
 8000d5a:	f000 fc1d 	bl	8001598 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d64:	4809      	ldr	r0, [pc, #36]	; (8000d8c <PN532_Reset+0x44>)
 8000d66:	f000 ff17 	bl	8001b98 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d6e:	f000 fc13 	bl	8001598 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d78:	4804      	ldr	r0, [pc, #16]	; (8000d8c <PN532_Reset+0x44>)
 8000d7a:	f000 ff0d 	bl	8001b98 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000d7e:	2064      	movs	r0, #100	; 0x64
 8000d80:	f000 fc0a 	bl	8001598 <HAL_Delay>
    return PN532_STATUS_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40010c00 	.word	0x40010c00

08000d90 <PN532_Log>:

void PN532_Log(const char* log) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000d98:	6879      	ldr	r1, [r7, #4]
 8000d9a:	4803      	ldr	r0, [pc, #12]	; (8000da8 <PN532_Log+0x18>)
 8000d9c:	f002 fe5c 	bl	8003a58 <iprintf>
}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	08004dac 	.word	0x08004dac

08000dac <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2101      	movs	r1, #1
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <spi_rw+0x48>)
 8000dbe:	f000 feeb 	bl	8001b98 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f000 fbe8 	bl	8001598 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	230a      	movs	r3, #10
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	6879      	ldr	r1, [r7, #4]
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <spi_rw+0x4c>)
 8000dd8:	f001 fb73 	bl	80024c2 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000ddc:	2001      	movs	r0, #1
 8000dde:	f000 fbdb 	bl	8001598 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8000de2:	2201      	movs	r2, #1
 8000de4:	2101      	movs	r1, #1
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <spi_rw+0x48>)
 8000de8:	f000 fed6 	bl	8001b98 <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40010c00 	.word	0x40010c00
 8000df8:	2000009c 	.word	0x2000009c

08000dfc <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8000dfc:	b5b0      	push	{r4, r5, r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	807b      	strh	r3, [r7, #2]
 8000e08:	466b      	mov	r3, sp
 8000e0a:	461d      	mov	r5, r3
    uint8_t frame[count + 1];
 8000e0c:	887b      	ldrh	r3, [r7, #2]
 8000e0e:	1c58      	adds	r0, r3, #1
 8000e10:	1e43      	subs	r3, r0, #1
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	4603      	mov	r3, r0
 8000e16:	4619      	mov	r1, r3
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 0300 	mov.w	r3, #0
 8000e20:	f04f 0400 	mov.w	r4, #0
 8000e24:	00d4      	lsls	r4, r2, #3
 8000e26:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e2a:	00cb      	lsls	r3, r1, #3
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	f04f 0400 	mov.w	r4, #0
 8000e3c:	00d4      	lsls	r4, r2, #3
 8000e3e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e42:	00cb      	lsls	r3, r1, #3
 8000e44:	4603      	mov	r3, r0
 8000e46:	3307      	adds	r3, #7
 8000e48:	08db      	lsrs	r3, r3, #3
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e50:	466b      	mov	r3, sp
 8000e52:	3300      	adds	r3, #0
 8000e54:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000e5c:	2005      	movs	r0, #5
 8000e5e:	f000 fb9b 	bl	8001598 <HAL_Delay>
    spi_rw(frame, count + 1);
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4610      	mov	r0, r2
 8000e70:	f7ff ff9c 	bl	8000dac <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	75fb      	strb	r3, [r7, #23]
 8000e78:	e00a      	b.n	8000e90 <PN532_SPI_ReadData+0x94>
        data[i] = frame[i + 1];
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	440b      	add	r3, r1
 8000e84:	68f9      	ldr	r1, [r7, #12]
 8000e86:	5c8a      	ldrb	r2, [r1, r2]
 8000e88:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000e8a:	7dfb      	ldrb	r3, [r7, #23]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	75fb      	strb	r3, [r7, #23]
 8000e90:	7dfb      	ldrb	r3, [r7, #23]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	887a      	ldrh	r2, [r7, #2]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d8ef      	bhi.n	8000e7a <PN532_SPI_ReadData+0x7e>
    }
    return PN532_STATUS_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	46ad      	mov	sp, r5
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bdb0      	pop	{r4, r5, r7, pc}

08000ea6 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8000ea6:	b5b0      	push	{r4, r5, r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
 8000eae:	460b      	mov	r3, r1
 8000eb0:	807b      	strh	r3, [r7, #2]
 8000eb2:	466b      	mov	r3, sp
 8000eb4:	461d      	mov	r5, r3
    uint8_t frame[count + 1];
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	1c58      	adds	r0, r3, #1
 8000eba:	1e43      	subs	r3, r0, #1
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 0200 	mov.w	r2, #0
 8000ec6:	f04f 0300 	mov.w	r3, #0
 8000eca:	f04f 0400 	mov.w	r4, #0
 8000ece:	00d4      	lsls	r4, r2, #3
 8000ed0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ed4:	00cb      	lsls	r3, r1, #3
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	f04f 0300 	mov.w	r3, #0
 8000ee2:	f04f 0400 	mov.w	r4, #0
 8000ee6:	00d4      	lsls	r4, r2, #3
 8000ee8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000eec:	00cb      	lsls	r3, r1, #3
 8000eee:	4603      	mov	r3, r0
 8000ef0:	3307      	adds	r3, #7
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	ebad 0d03 	sub.w	sp, sp, r3
 8000efa:	466b      	mov	r3, sp
 8000efc:	3300      	adds	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	75fb      	strb	r3, [r7, #23]
 8000f0a:	e00a      	b.n	8000f22 <PN532_SPI_WriteData+0x7c>
        frame[i + 1] = data[i];
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	441a      	add	r2, r3
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	3301      	adds	r3, #1
 8000f16:	7811      	ldrb	r1, [r2, #0]
 8000f18:	68fa      	ldr	r2, [r7, #12]
 8000f1a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	75fb      	strb	r3, [r7, #23]
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	887a      	ldrh	r2, [r7, #2]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8ef      	bhi.n	8000f0c <PN532_SPI_WriteData+0x66>
    }
    spi_rw(frame, count + 1);
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	887b      	ldrh	r3, [r7, #2]
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	4610      	mov	r0, r2
 8000f3a:	f7ff ff37 	bl	8000dac <spi_rw>
    return PN532_STATUS_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	46ad      	mov	sp, r5
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3718      	adds	r7, #24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bdb0      	pop	{r4, r5, r7, pc}

08000f4a <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8000f52:	2302      	movs	r3, #2
 8000f54:	723b      	strb	r3, [r7, #8]
 8000f56:	2300      	movs	r3, #0
 8000f58:	727b      	strb	r3, [r7, #9]
    uint32_t tickstart = HAL_GetTick();
 8000f5a:	f000 fb13 	bl	8001584 <HAL_GetTick>
 8000f5e:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8000f60:	e010      	b.n	8000f84 <PN532_SPI_WaitReady+0x3a>
        HAL_Delay(10);
 8000f62:	200a      	movs	r0, #10
 8000f64:	f000 fb18 	bl	8001598 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8000f68:	f107 0308 	add.w	r3, r7, #8
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff1c 	bl	8000dac <spi_rw>
        if (status[1] == _SPI_READY) {
 8000f74:	7a7b      	ldrb	r3, [r7, #9]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <PN532_SPI_WaitReady+0x34>
            return true;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00b      	b.n	8000f96 <PN532_SPI_WaitReady+0x4c>
        } else {
            HAL_Delay(5);
 8000f7e:	2005      	movs	r0, #5
 8000f80:	f000 fb0a 	bl	8001598 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8000f84:	f000 fafe 	bl	8001584 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8e6      	bhi.n	8000f62 <PN532_SPI_WaitReady+0x18>
        }
    }
    return false;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8000faa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fae:	f000 faf3 	bl	8001598 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <PN532_SPI_Wakeup+0x40>)
 8000fb8:	f000 fdee 	bl	8001b98 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f000 faeb 	bl	8001598 <HAL_Delay>
    spi_rw(data, 1);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff fef0 	bl	8000dac <spi_rw>
    HAL_Delay(1000);
 8000fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fd0:	f000 fae2 	bl	8001598 <HAL_Delay>
    return PN532_STATUS_OK;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a0c      	ldr	r2, [pc, #48]	; (8001020 <PN532_SPI_Init+0x3c>)
 8000ff0:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a0b      	ldr	r2, [pc, #44]	; (8001024 <PN532_SPI_Init+0x40>)
 8000ff6:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	; (8001028 <PN532_SPI_Init+0x44>)
 8000ffc:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <PN532_SPI_Init+0x48>)
 8001002:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <PN532_SPI_Init+0x4c>)
 8001008:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a09      	ldr	r2, [pc, #36]	; (8001034 <PN532_SPI_Init+0x50>)
 800100e:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	4798      	blx	r3
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	08000d49 	.word	0x08000d49
 8001024:	08000dfd 	.word	0x08000dfd
 8001028:	08000ea7 	.word	0x08000ea7
 800102c:	08000f4b 	.word	0x08000f4b
 8001030:	08000fa1 	.word	0x08000fa1
 8001034:	08000d91 	.word	0x08000d91

08001038 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	4a14      	ldr	r2, [pc, #80]	; (8001094 <HAL_MspInit+0x5c>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6193      	str	r3, [r2, #24]
 800104a:	4b12      	ldr	r3, [pc, #72]	; (8001094 <HAL_MspInit+0x5c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_MspInit+0x5c>)
 800105c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_MspInit+0x5c>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <HAL_MspInit+0x60>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_MspInit+0x60>)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000
 8001098:	40010000 	.word	0x40010000

0800109c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a1b      	ldr	r2, [pc, #108]	; (8001124 <HAL_SPI_MspInit+0x88>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d12f      	bne.n	800111c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 80010c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_SPI_MspInit+0x8c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010ec:	23a0      	movs	r3, #160	; 0xa0
 80010ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0310 	add.w	r3, r7, #16
 80010fc:	4619      	mov	r1, r3
 80010fe:	480b      	ldr	r0, [pc, #44]	; (800112c <HAL_SPI_MspInit+0x90>)
 8001100:	f000 fbf0 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001104:	2340      	movs	r3, #64	; 0x40
 8001106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	4619      	mov	r1, r3
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <HAL_SPI_MspInit+0x90>)
 8001118:	f000 fbe4 	bl	80018e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40013000 	.word	0x40013000
 8001128:	40021000 	.word	0x40021000
 800112c:	40010800 	.word	0x40010800

08001130 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001140:	d113      	bne.n	800116a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_TIM_Base_MspInit+0x44>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_TIM_Base_MspInit+0x44>)
 8001148:	f043 0301 	orr.w	r3, r3, #1
 800114c:	61d3      	str	r3, [r2, #28]
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_TIM_Base_MspInit+0x44>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	201c      	movs	r0, #28
 8001160:	f000 fb13 	bl	800178a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001164:	201c      	movs	r0, #28
 8001166:	f000 fb2c 	bl	80017c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a1f      	ldr	r2, [pc, #124]	; (8001210 <HAL_UART_MspInit+0x98>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d137      	bne.n	8001208 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001198:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_UART_MspInit+0x9c>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	4a1d      	ldr	r2, [pc, #116]	; (8001214 <HAL_UART_MspInit+0x9c>)
 800119e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a2:	61d3      	str	r3, [r2, #28]
 80011a4:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a17      	ldr	r2, [pc, #92]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_UART_MspInit+0x9c>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011c8:	2304      	movs	r3, #4
 80011ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0310 	add.w	r3, r7, #16
 80011d8:	4619      	mov	r1, r3
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <HAL_UART_MspInit+0xa0>)
 80011dc:	f000 fb82 	bl	80018e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011e0:	2308      	movs	r3, #8
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	4619      	mov	r1, r3
 80011f2:	4809      	ldr	r0, [pc, #36]	; (8001218 <HAL_UART_MspInit+0xa0>)
 80011f4:	f000 fb76 	bl	80018e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011f8:	2200      	movs	r2, #0
 80011fa:	2100      	movs	r1, #0
 80011fc:	2026      	movs	r0, #38	; 0x26
 80011fe:	f000 fac4 	bl	800178a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001202:	2026      	movs	r0, #38	; 0x26
 8001204:	f000 fadd 	bl	80017c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001208:	bf00      	nop
 800120a:	3720      	adds	r7, #32
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40004400 	.word	0x40004400
 8001214:	40021000 	.word	0x40021000
 8001218:	40010800 	.word	0x40010800

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <HardFault_Handler+0x4>

0800122e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <MemManage_Handler+0x4>

08001234 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <BusFault_Handler+0x4>

0800123a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <UsageFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr

08001258 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	bc80      	pop	{r7}
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f97a 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <TIM2_IRQHandler+0x30>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <TIM2_IRQHandler+0x18>
		timer_count++;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <TIM2_IRQHandler+0x34>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <TIM2_IRQHandler+0x34>)
 8001286:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <TIM2_IRQHandler+0x34>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b05      	cmp	r3, #5
 800128e:	d901      	bls.n	8001294 <TIM2_IRQHandler+0x24>
		Message_handler();
 8001290:	f7ff f9f0 	bl	8000674 <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001294:	4804      	ldr	r0, [pc, #16]	; (80012a8 <TIM2_IRQHandler+0x38>)
 8001296:	f001 fb8c 	bl	80029b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000174 	.word	0x20000174
 80012a4:	2000008c 	.word	0x2000008c
 80012a8:	200000f4 	.word	0x200000f4

080012ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <USART2_IRQHandler+0x3c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	b2d1      	uxtb	r1, r2
 80012b8:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <USART2_IRQHandler+0x3c>)
 80012ba:	7011      	strb	r1, [r2, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <USART2_IRQHandler+0x40>)
 80012c0:	18d1      	adds	r1, r2, r3
 80012c2:	230a      	movs	r3, #10
 80012c4:	2201      	movs	r2, #1
 80012c6:	480a      	ldr	r0, [pc, #40]	; (80012f0 <USART2_IRQHandler+0x44>)
 80012c8:	f001 ff94 	bl	80031f4 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <USART2_IRQHandler+0x3c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3b01      	subs	r3, #1
 80012d2:	4a06      	ldr	r2, [pc, #24]	; (80012ec <USART2_IRQHandler+0x40>)
 80012d4:	5cd3      	ldrb	r3, [r2, r3]
 80012d6:	2b0a      	cmp	r3, #10
 80012d8:	d101      	bne.n	80012de <USART2_IRQHandler+0x32>
		Message_handler();
 80012da:	f7ff f9cb 	bl	8000674 <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012de:	4804      	ldr	r0, [pc, #16]	; (80012f0 <USART2_IRQHandler+0x44>)
 80012e0:	f002 f82e 	bl	8003340 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2000008d 	.word	0x2000008d
 80012ec:	20000174 	.word	0x20000174
 80012f0:	20000134 	.word	0x20000134

080012f4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
 8001304:	e00a      	b.n	800131c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001306:	f3af 8000 	nop.w
 800130a:	4601      	mov	r1, r0
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	60ba      	str	r2, [r7, #8]
 8001312:	b2ca      	uxtb	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf0      	blt.n	8001306 <_read+0x12>
	}

return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	e009      	b.n	8001354 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	1c5a      	adds	r2, r3, #1
 8001344:	60ba      	str	r2, [r7, #8]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	3301      	adds	r3, #1
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	697a      	ldr	r2, [r7, #20]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	dbf1      	blt.n	8001340 <_write+0x12>
	}
	return len;
 800135c:	687b      	ldr	r3, [r7, #4]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_close>:

int _close(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800138c:	605a      	str	r2, [r3, #4]
	return 0;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr

0800139a <_isatty>:

int _isatty(int file)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
	return 1;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr

080013ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	60f8      	str	r0, [r7, #12]
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
	return 0;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
	...

080013c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x50>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x16>
		heap_end = &end;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <_sbrk+0x50>)
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <_sbrk+0x54>)
 80013dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <_sbrk+0x50>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <_sbrk+0x50>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	466a      	mov	r2, sp
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d907      	bls.n	8001402 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013f2:	f002 faff 	bl	80039f4 <__errno>
 80013f6:	4602      	mov	r2, r0
 80013f8:	230c      	movs	r3, #12
 80013fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	e006      	b.n	8001410 <_sbrk+0x48>
	}

	heap_end += incr;
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <_sbrk+0x50>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a03      	ldr	r2, [pc, #12]	; (8001418 <_sbrk+0x50>)
 800140c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000090 	.word	0x20000090
 800141c:	200001b0 	.word	0x200001b0

08001420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <SystemInit+0x5c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <SystemInit+0x5c>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <SystemInit+0x5c>)
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4911      	ldr	r1, [pc, #68]	; (800147c <SystemInit+0x5c>)
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <SystemInit+0x60>)
 8001438:	4013      	ands	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <SystemInit+0x5c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0e      	ldr	r2, [pc, #56]	; (800147c <SystemInit+0x5c>)
 8001442:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800144a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <SystemInit+0x5c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SystemInit+0x5c>)
 8001452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001456:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001458:	4b08      	ldr	r3, [pc, #32]	; (800147c <SystemInit+0x5c>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4a07      	ldr	r2, [pc, #28]	; (800147c <SystemInit+0x5c>)
 800145e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001462:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SystemInit+0x5c>)
 8001466:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800146a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800146c:	4b05      	ldr	r3, [pc, #20]	; (8001484 <SystemInit+0x64>)
 800146e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001472:	609a      	str	r2, [r3, #8]
#endif 
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	f8ff0000 	.word	0xf8ff0000
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001488:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800148a:	e003      	b.n	8001494 <LoopCopyDataInit>

0800148c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800148c:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800148e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001490:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001492:	3104      	adds	r1, #4

08001494 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001494:	480a      	ldr	r0, [pc, #40]	; (80014c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001498:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800149a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800149c:	d3f6      	bcc.n	800148c <CopyDataInit>
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80014a0:	e002      	b.n	80014a8 <LoopFillZerobss>

080014a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014a4:	f842 3b04 	str.w	r3, [r2], #4

080014a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014ac:	d3f9      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014ae:	f7ff ffb7 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f002 faa5 	bl	8003a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014b6:	f7fe fe51 	bl	800015c <main>
  bx lr
 80014ba:	4770      	bx	lr
  ldr r3, =_sidata
 80014bc:	08004e88 	.word	0x08004e88
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014c4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80014c8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80014cc:	200001b0 	.word	0x200001b0

080014d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC1_2_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_Init+0x28>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_Init+0x28>)
 80014de:	f043 0310 	orr.w	r3, r3, #16
 80014e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e4:	2003      	movs	r0, #3
 80014e6:	f000 f945 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f000 f808 	bl	8001500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f0:	f7ff fda2 	bl	8001038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40022000 	.word	0x40022000

08001500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_InitTick+0x54>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <HAL_InitTick+0x58>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	4619      	mov	r1, r3
 8001512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001516:	fbb3 f3f1 	udiv	r3, r3, r1
 800151a:	fbb2 f3f3 	udiv	r3, r2, r3
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f95d 	bl	80017de <HAL_SYSTICK_Config>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e00e      	b.n	800154c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d80a      	bhi.n	800154a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001534:	2200      	movs	r2, #0
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f000 f925 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001540:	4a06      	ldr	r2, [pc, #24]	; (800155c <HAL_InitTick+0x5c>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001546:	2300      	movs	r3, #0
 8001548:	e000      	b.n	800154c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000
 8001558:	20000008 	.word	0x20000008
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a03      	ldr	r2, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	20000008 	.word	0x20000008
 8001580:	200001a8 	.word	0x200001a8

08001584 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	200001a8 	.word	0x200001a8

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff0 	bl	8001584 <HAL_GetTick>
 80015a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_Delay+0x40>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4413      	add	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	bf00      	nop
 80015c0:	f7ff ffe0 	bl	8001584 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000008 	.word	0x20000008

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160e:	4a04      	ldr	r2, [pc, #16]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	60d3      	str	r3, [r2, #12]
}
 8001614:	bf00      	nop
 8001616:	3714      	adds	r7, #20
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed00 	.word	0xe000ed00

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4906      	ldr	r1, [pc, #24]	; (8001674 <__NVIC_EnableIRQ+0x34>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f7ff ff90 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff2d 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff42 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4603      	mov	r3, r0
 80017ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff35 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017d6:	bf00      	nop
 80017d8:	3708      	adds	r7, #8
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff ffa2 	bl	8001730 <SysTick_Config>
 80017ec:	4603      	mov	r3, r0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800180a:	2b02      	cmp	r3, #2
 800180c:	d005      	beq.n	800181a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
 8001818:	e051      	b.n	80018be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 020e 	bic.w	r2, r2, #14
 8001828:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <HAL_DMA_Abort_IT+0xd0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d029      	beq.n	8001898 <HAL_DMA_Abort_IT+0xa0>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a20      	ldr	r2, [pc, #128]	; (80018cc <HAL_DMA_Abort_IT+0xd4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d022      	beq.n	8001894 <HAL_DMA_Abort_IT+0x9c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1f      	ldr	r2, [pc, #124]	; (80018d0 <HAL_DMA_Abort_IT+0xd8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d01a      	beq.n	800188e <HAL_DMA_Abort_IT+0x96>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a1d      	ldr	r2, [pc, #116]	; (80018d4 <HAL_DMA_Abort_IT+0xdc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d012      	beq.n	8001888 <HAL_DMA_Abort_IT+0x90>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1c      	ldr	r2, [pc, #112]	; (80018d8 <HAL_DMA_Abort_IT+0xe0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d00a      	beq.n	8001882 <HAL_DMA_Abort_IT+0x8a>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a1a      	ldr	r2, [pc, #104]	; (80018dc <HAL_DMA_Abort_IT+0xe4>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d102      	bne.n	800187c <HAL_DMA_Abort_IT+0x84>
 8001876:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800187a:	e00e      	b.n	800189a <HAL_DMA_Abort_IT+0xa2>
 800187c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001880:	e00b      	b.n	800189a <HAL_DMA_Abort_IT+0xa2>
 8001882:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001886:	e008      	b.n	800189a <HAL_DMA_Abort_IT+0xa2>
 8001888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188c:	e005      	b.n	800189a <HAL_DMA_Abort_IT+0xa2>
 800188e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001892:	e002      	b.n	800189a <HAL_DMA_Abort_IT+0xa2>
 8001894:	2310      	movs	r3, #16
 8001896:	e000      	b.n	800189a <HAL_DMA_Abort_IT+0xa2>
 8001898:	2301      	movs	r3, #1
 800189a:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_DMA_Abort_IT+0xe8>)
 800189c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	4798      	blx	r3
    } 
  }
  return status;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020008 	.word	0x40020008
 80018cc:	4002001c 	.word	0x4002001c
 80018d0:	40020030 	.word	0x40020030
 80018d4:	40020044 	.word	0x40020044
 80018d8:	40020058 	.word	0x40020058
 80018dc:	4002006c 	.word	0x4002006c
 80018e0:	40020000 	.word	0x40020000

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b08b      	sub	sp, #44	; 0x2c
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f6:	e127      	b.n	8001b48 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018f8:	2201      	movs	r2, #1
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8116 	bne.w	8001b42 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b12      	cmp	r3, #18
 800191c:	d034      	beq.n	8001988 <HAL_GPIO_Init+0xa4>
 800191e:	2b12      	cmp	r3, #18
 8001920:	d80d      	bhi.n	800193e <HAL_GPIO_Init+0x5a>
 8001922:	2b02      	cmp	r3, #2
 8001924:	d02b      	beq.n	800197e <HAL_GPIO_Init+0x9a>
 8001926:	2b02      	cmp	r3, #2
 8001928:	d804      	bhi.n	8001934 <HAL_GPIO_Init+0x50>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d031      	beq.n	8001992 <HAL_GPIO_Init+0xae>
 800192e:	2b01      	cmp	r3, #1
 8001930:	d01c      	beq.n	800196c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001932:	e048      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001934:	2b03      	cmp	r3, #3
 8001936:	d043      	beq.n	80019c0 <HAL_GPIO_Init+0xdc>
 8001938:	2b11      	cmp	r3, #17
 800193a:	d01b      	beq.n	8001974 <HAL_GPIO_Init+0x90>
          break;
 800193c:	e043      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800193e:	4a89      	ldr	r2, [pc, #548]	; (8001b64 <HAL_GPIO_Init+0x280>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d026      	beq.n	8001992 <HAL_GPIO_Init+0xae>
 8001944:	4a87      	ldr	r2, [pc, #540]	; (8001b64 <HAL_GPIO_Init+0x280>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d806      	bhi.n	8001958 <HAL_GPIO_Init+0x74>
 800194a:	4a87      	ldr	r2, [pc, #540]	; (8001b68 <HAL_GPIO_Init+0x284>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d020      	beq.n	8001992 <HAL_GPIO_Init+0xae>
 8001950:	4a86      	ldr	r2, [pc, #536]	; (8001b6c <HAL_GPIO_Init+0x288>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01d      	beq.n	8001992 <HAL_GPIO_Init+0xae>
          break;
 8001956:	e036      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001958:	4a85      	ldr	r2, [pc, #532]	; (8001b70 <HAL_GPIO_Init+0x28c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d019      	beq.n	8001992 <HAL_GPIO_Init+0xae>
 800195e:	4a85      	ldr	r2, [pc, #532]	; (8001b74 <HAL_GPIO_Init+0x290>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d016      	beq.n	8001992 <HAL_GPIO_Init+0xae>
 8001964:	4a84      	ldr	r2, [pc, #528]	; (8001b78 <HAL_GPIO_Init+0x294>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_GPIO_Init+0xae>
          break;
 800196a:	e02c      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	623b      	str	r3, [r7, #32]
          break;
 8001972:	e028      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	3304      	adds	r3, #4
 800197a:	623b      	str	r3, [r7, #32]
          break;
 800197c:	e023      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	3308      	adds	r3, #8
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e01e      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	330c      	adds	r3, #12
 800198e:	623b      	str	r3, [r7, #32]
          break;
 8001990:	e019      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800199a:	2304      	movs	r3, #4
 800199c:	623b      	str	r3, [r7, #32]
          break;
 800199e:	e012      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d105      	bne.n	80019b4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a8:	2308      	movs	r3, #8
 80019aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	611a      	str	r2, [r3, #16]
          break;
 80019b2:	e008      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019b4:	2308      	movs	r3, #8
 80019b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	615a      	str	r2, [r3, #20]
          break;
 80019be:	e002      	b.n	80019c6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
          break;
 80019c4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2bff      	cmp	r3, #255	; 0xff
 80019ca:	d801      	bhi.n	80019d0 <HAL_GPIO_Init+0xec>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	e001      	b.n	80019d4 <HAL_GPIO_Init+0xf0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3304      	adds	r3, #4
 80019d4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	2bff      	cmp	r3, #255	; 0xff
 80019da:	d802      	bhi.n	80019e2 <HAL_GPIO_Init+0xfe>
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x104>
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	3b08      	subs	r3, #8
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	210f      	movs	r1, #15
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	401a      	ands	r2, r3
 80019fa:	6a39      	ldr	r1, [r7, #32]
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	431a      	orrs	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8096 	beq.w	8001b42 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a16:	4b59      	ldr	r3, [pc, #356]	; (8001b7c <HAL_GPIO_Init+0x298>)
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_GPIO_Init+0x298>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6193      	str	r3, [r2, #24]
 8001a22:	4b56      	ldr	r3, [pc, #344]	; (8001b7c <HAL_GPIO_Init+0x298>)
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a2e:	4a54      	ldr	r2, [pc, #336]	; (8001b80 <HAL_GPIO_Init+0x29c>)
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	; (8001b84 <HAL_GPIO_Init+0x2a0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d013      	beq.n	8001a82 <HAL_GPIO_Init+0x19e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4a      	ldr	r2, [pc, #296]	; (8001b88 <HAL_GPIO_Init+0x2a4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d00d      	beq.n	8001a7e <HAL_GPIO_Init+0x19a>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a49      	ldr	r2, [pc, #292]	; (8001b8c <HAL_GPIO_Init+0x2a8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x196>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a48      	ldr	r2, [pc, #288]	; (8001b90 <HAL_GPIO_Init+0x2ac>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_GPIO_Init+0x192>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e006      	b.n	8001a84 <HAL_GPIO_Init+0x1a0>
 8001a76:	2304      	movs	r3, #4
 8001a78:	e004      	b.n	8001a84 <HAL_GPIO_Init+0x1a0>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_Init+0x1a0>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_GPIO_Init+0x1a0>
 8001a82:	2300      	movs	r3, #0
 8001a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a86:	f002 0203 	and.w	r2, r2, #3
 8001a8a:	0092      	lsls	r2, r2, #2
 8001a8c:	4093      	lsls	r3, r2
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a94:	493a      	ldr	r1, [pc, #232]	; (8001b80 <HAL_GPIO_Init+0x29c>)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	089b      	lsrs	r3, r3, #2
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d006      	beq.n	8001abc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001aae:	4b39      	ldr	r3, [pc, #228]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4938      	ldr	r1, [pc, #224]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
 8001aba:	e006      	b.n	8001aca <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001abc:	4b35      	ldr	r3, [pc, #212]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4933      	ldr	r1, [pc, #204]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ad6:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	492e      	ldr	r1, [pc, #184]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
 8001ae2:	e006      	b.n	8001af2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ae4:	4b2b      	ldr	r3, [pc, #172]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	4929      	ldr	r1, [pc, #164]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001aee:	4013      	ands	r3, r2
 8001af0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	4924      	ldr	r1, [pc, #144]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
 8001b0a:	e006      	b.n	8001b1a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	491f      	ldr	r1, [pc, #124]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d006      	beq.n	8001b34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b26:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	491a      	ldr	r1, [pc, #104]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	60cb      	str	r3, [r1, #12]
 8001b32:	e006      	b.n	8001b42 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	4915      	ldr	r1, [pc, #84]	; (8001b94 <HAL_GPIO_Init+0x2b0>)
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	3301      	adds	r3, #1
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f47f aed0 	bne.w	80018f8 <HAL_GPIO_Init+0x14>
  }
}
 8001b58:	bf00      	nop
 8001b5a:	372c      	adds	r7, #44	; 0x2c
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bc80      	pop	{r7}
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	10210000 	.word	0x10210000
 8001b68:	10110000 	.word	0x10110000
 8001b6c:	10120000 	.word	0x10120000
 8001b70:	10310000 	.word	0x10310000
 8001b74:	10320000 	.word	0x10320000
 8001b78:	10220000 	.word	0x10220000
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40010000 	.word	0x40010000
 8001b84:	40010800 	.word	0x40010800
 8001b88:	40010c00 	.word	0x40010c00
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	40011400 	.word	0x40011400
 8001b94:	40010400 	.word	0x40010400

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	611a      	str	r2, [r3, #16]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e26c      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8087 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001be8:	4b92      	ldr	r3, [pc, #584]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d00c      	beq.n	8001c0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf4:	4b8f      	ldr	r3, [pc, #572]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d112      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5e>
 8001c00:	4b8c      	ldr	r3, [pc, #560]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0c:	d10b      	bne.n	8001c26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0e:	4b89      	ldr	r3, [pc, #548]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d06c      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x12c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d168      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e246      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c2e:	d106      	bne.n	8001c3e <HAL_RCC_OscConfig+0x76>
 8001c30:	4b80      	ldr	r3, [pc, #512]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a7f      	ldr	r2, [pc, #508]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e02e      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10c      	bne.n	8001c60 <HAL_RCC_OscConfig+0x98>
 8001c46:	4b7b      	ldr	r3, [pc, #492]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a7a      	ldr	r2, [pc, #488]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a77      	ldr	r2, [pc, #476]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c5c:	6013      	str	r3, [r2, #0]
 8001c5e:	e01d      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0xbc>
 8001c6a:	4b72      	ldr	r3, [pc, #456]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a71      	ldr	r2, [pc, #452]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b6f      	ldr	r3, [pc, #444]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a6e      	ldr	r2, [pc, #440]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e00b      	b.n	8001c9c <HAL_RCC_OscConfig+0xd4>
 8001c84:	4b6b      	ldr	r3, [pc, #428]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a6a      	ldr	r2, [pc, #424]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b68      	ldr	r3, [pc, #416]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a67      	ldr	r2, [pc, #412]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fc6e 	bl	8001584 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fc6a 	bl	8001584 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1fa      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0xe4>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fc5a 	bl	8001584 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fc56 	bl	8001584 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e1e6      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce6:	4b53      	ldr	r3, [pc, #332]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x10c>
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d063      	beq.n	8001dca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d02:	4b4c      	ldr	r3, [pc, #304]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00b      	beq.n	8001d26 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d0e:	4b49      	ldr	r3, [pc, #292]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d11c      	bne.n	8001d54 <HAL_RCC_OscConfig+0x18c>
 8001d1a:	4b46      	ldr	r3, [pc, #280]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d116      	bne.n	8001d54 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d005      	beq.n	8001d3e <HAL_RCC_OscConfig+0x176>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d001      	beq.n	8001d3e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e1ba      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d3e:	4b3d      	ldr	r3, [pc, #244]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4939      	ldr	r1, [pc, #228]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d52:	e03a      	b.n	8001dca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d020      	beq.n	8001d9e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d5c:	4b36      	ldr	r3, [pc, #216]	; (8001e38 <HAL_RCC_OscConfig+0x270>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fc0f 	bl	8001584 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fc0b 	bl	8001584 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e19b      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0302 	and.w	r3, r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4927      	ldr	r1, [pc, #156]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
 8001d9c:	e015      	b.n	8001dca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d9e:	4b26      	ldr	r3, [pc, #152]	; (8001e38 <HAL_RCC_OscConfig+0x270>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fbee 	bl	8001584 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dac:	f7ff fbea 	bl	8001584 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e17a      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d03a      	beq.n	8001e4c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d019      	beq.n	8001e12 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dde:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de4:	f7ff fbce 	bl	8001584 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7ff fbca 	bl	8001584 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e15a      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f000 fada 	bl	80023c4 <RCC_Delay>
 8001e10:	e01c      	b.n	8001e4c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff fbb4 	bl	8001584 <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e1e:	e00f      	b.n	8001e40 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e20:	f7ff fbb0 	bl	8001584 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d908      	bls.n	8001e40 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e140      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	42420000 	.word	0x42420000
 8001e3c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b9e      	ldr	r3, [pc, #632]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e9      	bne.n	8001e20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a6 	beq.w	8001fa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b97      	ldr	r3, [pc, #604]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10d      	bne.n	8001e86 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	4b94      	ldr	r3, [pc, #592]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	4a93      	ldr	r2, [pc, #588]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e74:	61d3      	str	r3, [r2, #28]
 8001e76:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e82:	2301      	movs	r3, #1
 8001e84:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e86:	4b8e      	ldr	r3, [pc, #568]	; (80020c0 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e92:	4b8b      	ldr	r3, [pc, #556]	; (80020c0 <HAL_RCC_OscConfig+0x4f8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a8a      	ldr	r2, [pc, #552]	; (80020c0 <HAL_RCC_OscConfig+0x4f8>)
 8001e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff fb71 	bl	8001584 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea6:	f7ff fb6d 	bl	8001584 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b64      	cmp	r3, #100	; 0x64
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0fd      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b81      	ldr	r3, [pc, #516]	; (80020c0 <HAL_RCC_OscConfig+0x4f8>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_OscConfig+0x312>
 8001ecc:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	f043 0301 	orr.w	r3, r3, #1
 8001ed6:	6213      	str	r3, [r2, #32]
 8001ed8:	e02d      	b.n	8001f36 <HAL_RCC_OscConfig+0x36e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0x334>
 8001ee2:	4b76      	ldr	r3, [pc, #472]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a75      	ldr	r2, [pc, #468]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	4b73      	ldr	r3, [pc, #460]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	4a72      	ldr	r2, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ef4:	f023 0304 	bic.w	r3, r3, #4
 8001ef8:	6213      	str	r3, [r2, #32]
 8001efa:	e01c      	b.n	8001f36 <HAL_RCC_OscConfig+0x36e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d10c      	bne.n	8001f1e <HAL_RCC_OscConfig+0x356>
 8001f04:	4b6d      	ldr	r3, [pc, #436]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a6c      	ldr	r2, [pc, #432]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	4a69      	ldr	r2, [pc, #420]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	6213      	str	r3, [r2, #32]
 8001f1c:	e00b      	b.n	8001f36 <HAL_RCC_OscConfig+0x36e>
 8001f1e:	4b67      	ldr	r3, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a66      	ldr	r2, [pc, #408]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f023 0301 	bic.w	r3, r3, #1
 8001f28:	6213      	str	r3, [r2, #32]
 8001f2a:	4b64      	ldr	r3, [pc, #400]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
 8001f2e:	4a63      	ldr	r2, [pc, #396]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	f023 0304 	bic.w	r3, r3, #4
 8001f34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d015      	beq.n	8001f6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb21 	bl	8001584 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f44:	e00a      	b.n	8001f5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f7ff fb1d 	bl	8001584 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e0ab      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	4b57      	ldr	r3, [pc, #348]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ee      	beq.n	8001f46 <HAL_RCC_OscConfig+0x37e>
 8001f68:	e014      	b.n	8001f94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7ff fb0b 	bl	8001584 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7ff fb07 	bl	8001584 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e095      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1ee      	bne.n	8001f72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f94:	7dfb      	ldrb	r3, [r7, #23]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d105      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b48      	ldr	r3, [pc, #288]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a47      	ldr	r2, [pc, #284]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8081 	beq.w	80020b2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb0:	4b42      	ldr	r3, [pc, #264]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b08      	cmp	r3, #8
 8001fba:	d061      	beq.n	8002080 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d146      	bne.n	8002052 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_OscConfig+0x4fc>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fca:	f7ff fadb 	bl	8001584 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd2:	f7ff fad7 	bl	8001584 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e067      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe4:	4b35      	ldr	r3, [pc, #212]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d108      	bne.n	800200c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	492d      	ldr	r1, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800200c:	4b2b      	ldr	r3, [pc, #172]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a19      	ldr	r1, [r3, #32]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	430b      	orrs	r3, r1
 800201e:	4927      	ldr	r1, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <HAL_RCC_OscConfig+0x4fc>)
 8002026:	2201      	movs	r2, #1
 8002028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202a:	f7ff faab 	bl	8001584 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002030:	e008      	b.n	8002044 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff faa7 	bl	8001584 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e037      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f0      	beq.n	8002032 <HAL_RCC_OscConfig+0x46a>
 8002050:	e02f      	b.n	80020b2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002052:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <HAL_RCC_OscConfig+0x4fc>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fa94 	bl	8001584 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff fa90 	bl	8001584 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e020      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002072:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x498>
 800207e:	e018      	b.n	80020b2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e013      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_RCC_OscConfig+0x4f4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	429a      	cmp	r2, r3
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40007000 	.word	0x40007000
 80020c4:	42420060 	.word	0x42420060

080020c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0d0      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020dc:	4b6a      	ldr	r3, [pc, #424]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d910      	bls.n	800210c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b67      	ldr	r3, [pc, #412]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	4965      	ldr	r1, [pc, #404]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b63      	ldr	r3, [pc, #396]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0b8      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d020      	beq.n	800215a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4a58      	ldr	r2, [pc, #352]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800212a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800212e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800213c:	4b53      	ldr	r3, [pc, #332]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	4a52      	ldr	r2, [pc, #328]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002148:	4b50      	ldr	r3, [pc, #320]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	494d      	ldr	r1, [pc, #308]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d040      	beq.n	80021e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216e:	4b47      	ldr	r3, [pc, #284]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d115      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e07f      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d107      	bne.n	8002196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d109      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e073      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002196:	4b3d      	ldr	r3, [pc, #244]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e06b      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021a6:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f023 0203 	bic.w	r2, r3, #3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	4936      	ldr	r1, [pc, #216]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021b8:	f7ff f9e4 	bl	8001584 <HAL_GetTick>
 80021bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c0:	f7ff f9e0 	bl	8001584 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e053      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d6:	4b2d      	ldr	r3, [pc, #180]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 020c 	and.w	r2, r3, #12
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d1eb      	bne.n	80021c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021e8:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d210      	bcs.n	8002218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f6:	4b24      	ldr	r3, [pc, #144]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f023 0207 	bic.w	r2, r3, #7
 80021fe:	4922      	ldr	r1, [pc, #136]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002206:	4b20      	ldr	r3, [pc, #128]	; (8002288 <HAL_RCC_ClockConfig+0x1c0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d001      	beq.n	8002218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e032      	b.n	800227e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0304 	and.w	r3, r3, #4
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4916      	ldr	r1, [pc, #88]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002232:	4313      	orrs	r3, r2
 8002234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d009      	beq.n	8002256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	490e      	ldr	r1, [pc, #56]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002256:	f000 f821 	bl	800229c <HAL_RCC_GetSysClockFreq>
 800225a:	4601      	mov	r1, r0
 800225c:	4b0b      	ldr	r3, [pc, #44]	; (800228c <HAL_RCC_ClockConfig+0x1c4>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_RCC_ClockConfig+0x1c8>)
 8002268:	5cd3      	ldrb	r3, [r2, r3]
 800226a:	fa21 f303 	lsr.w	r3, r1, r3
 800226e:	4a09      	ldr	r2, [pc, #36]	; (8002294 <HAL_RCC_ClockConfig+0x1cc>)
 8002270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002272:	4b09      	ldr	r3, [pc, #36]	; (8002298 <HAL_RCC_ClockConfig+0x1d0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7ff f942 	bl	8001500 <HAL_InitTick>

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000
 800228c:	40021000 	.word	0x40021000
 8002290:	08004dd0 	.word	0x08004dd0
 8002294:	20000000 	.word	0x20000000
 8002298:	20000004 	.word	0x20000004

0800229c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800229c:	b490      	push	{r4, r7}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022a4:	1d3c      	adds	r4, r7, #4
 80022a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ac:	4b28      	ldr	r3, [pc, #160]	; (8002350 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	; 0x24
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d002      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0x40>
 80022d6:	2b08      	cmp	r3, #8
 80022d8:	d003      	beq.n	80022e2 <HAL_RCC_GetSysClockFreq+0x46>
 80022da:	e02d      	b.n	8002338 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022dc:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022de:	623b      	str	r3, [r7, #32]
      break;
 80022e0:	e02d      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	0c9b      	lsrs	r3, r3, #18
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022ee:	4413      	add	r3, r2
 80022f0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022f4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d013      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	0c5b      	lsrs	r3, r3, #17
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800230e:	4413      	add	r3, r2
 8002310:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002314:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800231a:	fb02 f203 	mul.w	r2, r2, r3
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
 8002326:	e004      	b.n	8002332 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HAL_RCC_GetSysClockFreq+0xc0>)
 800232c:	fb02 f303 	mul.w	r3, r2, r3
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	623b      	str	r3, [r7, #32]
      break;
 8002336:	e002      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b07      	ldr	r3, [pc, #28]	; (8002358 <HAL_RCC_GetSysClockFreq+0xbc>)
 800233a:	623b      	str	r3, [r7, #32]
      break;
 800233c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800233e:	6a3b      	ldr	r3, [r7, #32]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bc90      	pop	{r4, r7}
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	08004db4 	.word	0x08004db4
 8002350:	08004dc4 	.word	0x08004dc4
 8002354:	40021000 	.word	0x40021000
 8002358:	007a1200 	.word	0x007a1200
 800235c:	003d0900 	.word	0x003d0900

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b02      	ldr	r3, [pc, #8]	; (8002370 <HAL_RCC_GetHCLKFreq+0x10>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr
 8002370:	20000000 	.word	0x20000000

08002374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002378:	f7ff fff2 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 800237c:	4601      	mov	r1, r0
 800237e:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	f003 0307 	and.w	r3, r3, #7
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800238a:	5cd3      	ldrb	r3, [r2, r3]
 800238c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002390:	4618      	mov	r0, r3
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40021000 	.word	0x40021000
 8002398:	08004de0 	.word	0x08004de0

0800239c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a0:	f7ff ffde 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a4:	4601      	mov	r1, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	0adb      	lsrs	r3, r3, #11
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4a03      	ldr	r2, [pc, #12]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08004de0 	.word	0x08004de0

080023c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023cc:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <RCC_Delay+0x34>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <RCC_Delay+0x38>)
 80023d2:	fba2 2303 	umull	r2, r3, r2, r3
 80023d6:	0a5b      	lsrs	r3, r3, #9
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023e0:	bf00      	nop
  }
  while (Delay --);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	60fa      	str	r2, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f9      	bne.n	80023e0 <RCC_Delay+0x1c>
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000
 80023fc:	10624dd3 	.word	0x10624dd3

08002400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e053      	b.n	80024ba <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7fe fe35 	bl	800109c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002448:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	ea42 0103 	orr.w	r1, r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	0c1a      	lsrs	r2, r3, #16
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f002 0204 	and.w	r2, r2, #4
 8002498:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69da      	ldr	r2, [r3, #28]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b08c      	sub	sp, #48	; 0x30
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024d0:	2301      	movs	r3, #1
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d101      	bne.n	80024e8 <HAL_SPI_TransmitReceive+0x26>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e18a      	b.n	80027fe <HAL_SPI_TransmitReceive+0x33c>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024f0:	f7ff f848 	bl	8001584 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800250a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800250e:	2b01      	cmp	r3, #1
 8002510:	d00f      	beq.n	8002532 <HAL_SPI_TransmitReceive+0x70>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002518:	d107      	bne.n	800252a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <HAL_SPI_TransmitReceive+0x68>
 8002522:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002526:	2b04      	cmp	r3, #4
 8002528:	d003      	beq.n	8002532 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800252a:	2302      	movs	r3, #2
 800252c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002530:	e15b      	b.n	80027ea <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d005      	beq.n	8002544 <HAL_SPI_TransmitReceive+0x82>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <HAL_SPI_TransmitReceive+0x82>
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d103      	bne.n	800254c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800254a:	e14e      	b.n	80027ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b04      	cmp	r3, #4
 8002556:	d003      	beq.n	8002560 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2205      	movs	r2, #5
 800255c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	887a      	ldrh	r2, [r7, #2]
 8002576:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	887a      	ldrh	r2, [r7, #2]
 8002582:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	887a      	ldrh	r2, [r7, #2]
 8002588:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d007      	beq.n	80025b4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025bc:	d178      	bne.n	80026b0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_SPI_TransmitReceive+0x10a>
 80025c6:	8b7b      	ldrh	r3, [r7, #26]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d166      	bne.n	800269a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	881a      	ldrh	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025dc:	1c9a      	adds	r2, r3, #2
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f0:	e053      	b.n	800269a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d11b      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x176>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_SPI_TransmitReceive+0x176>
 800260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d113      	bne.n	8002638 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	881a      	ldrh	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	1c9a      	adds	r2, r3, #2
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b01      	cmp	r3, #1
 8002644:	d119      	bne.n	800267a <HAL_SPI_TransmitReceive+0x1b8>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800264a:	b29b      	uxth	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d014      	beq.n	800267a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68da      	ldr	r2, [r3, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265a:	b292      	uxth	r2, r2
 800265c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002662:	1c9a      	adds	r2, r3, #2
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002676:	2301      	movs	r3, #1
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800267a:	f7fe ff83 	bl	8001584 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002686:	429a      	cmp	r2, r3
 8002688:	d807      	bhi.n	800269a <HAL_SPI_TransmitReceive+0x1d8>
 800268a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002690:	d003      	beq.n	800269a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002698:	e0a7      	b.n	80027ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269e:	b29b      	uxth	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1a6      	bne.n	80025f2 <HAL_SPI_TransmitReceive+0x130>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1a1      	bne.n	80025f2 <HAL_SPI_TransmitReceive+0x130>
 80026ae:	e07c      	b.n	80027aa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_SPI_TransmitReceive+0x1fc>
 80026b8:	8b7b      	ldrh	r3, [r7, #26]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d16b      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	330c      	adds	r3, #12
 80026c8:	7812      	ldrb	r2, [r2, #0]
 80026ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e4:	e057      	b.n	8002796 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d11c      	bne.n	800272e <HAL_SPI_TransmitReceive+0x26c>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d017      	beq.n	800272e <HAL_SPI_TransmitReceive+0x26c>
 80026fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d114      	bne.n	800272e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	330c      	adds	r3, #12
 800270e:	7812      	ldrb	r2, [r2, #0]
 8002710:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d119      	bne.n	8002770 <HAL_SPI_TransmitReceive+0x2ae>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d014      	beq.n	8002770 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68da      	ldr	r2, [r3, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800276c:	2301      	movs	r3, #1
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002770:	f7fe ff08 	bl	8001584 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800277c:	429a      	cmp	r2, r3
 800277e:	d803      	bhi.n	8002788 <HAL_SPI_TransmitReceive+0x2c6>
 8002780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002786:	d102      	bne.n	800278e <HAL_SPI_TransmitReceive+0x2cc>
 8002788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800278a:	2b00      	cmp	r3, #0
 800278c:	d103      	bne.n	8002796 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002794:	e029      	b.n	80027ea <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1a2      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x224>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d19d      	bne.n	80026e6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 f893 	bl	80028da <SPI_EndRxTxTransaction>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d006      	beq.n	80027c8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027c6:	e010      	b.n	80027ea <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10b      	bne.n	80027e8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	e000      	b.n	80027ea <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3730      	adds	r7, #48	; 0x30
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b084      	sub	sp, #16
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	603b      	str	r3, [r7, #0]
 8002812:	4613      	mov	r3, r2
 8002814:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002816:	e04c      	b.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d048      	beq.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002820:	f7fe feb0 	bl	8001584 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d902      	bls.n	8002836 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d13d      	bne.n	80028b2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002844:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800284e:	d111      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002858:	d004      	beq.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002862:	d107      	bne.n	8002874 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002872:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800287c:	d10f      	bne.n	800289e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800289c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e00f      	b.n	80028d2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d1a3      	bne.n	8002818 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af02      	add	r7, sp, #8
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2200      	movs	r2, #0
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff ff88 	bl	8002806 <SPI_WaitFlagStateUntilTimeout>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e000      	b.n	800290e <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b082      	sub	sp, #8
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e01d      	b.n	8002964 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d106      	bne.n	8002942 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7fe fbf7 	bl	8001130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2202      	movs	r2, #2
 8002946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3304      	adds	r3, #4
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f000 fa19 	bl	8002d8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 0307 	and.w	r3, r3, #7
 800298e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b06      	cmp	r3, #6
 8002994:	d007      	beq.n	80029a6 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 0201 	orr.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d122      	bne.n	8002a0e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d11b      	bne.n	8002a0e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f06f 0202 	mvn.w	r2, #2
 80029de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f9ad 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 80029fa:	e005      	b.n	8002a08 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f9a0 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f9af 	bl	8002d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b04      	cmp	r3, #4
 8002a1a:	d122      	bne.n	8002a62 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b04      	cmp	r3, #4
 8002a28:	d11b      	bne.n	8002a62 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f06f 0204 	mvn.w	r2, #4
 8002a32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f983 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002a4e:	e005      	b.n	8002a5c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f976 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f985 	bl	8002d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	f003 0308 	and.w	r3, r3, #8
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d122      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f06f 0208 	mvn.w	r2, #8
 8002a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f959 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002aa2:	e005      	b.n	8002ab0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f94c 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 f95b 	bl	8002d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d122      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d11b      	bne.n	8002b0a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0210 	mvn.w	r2, #16
 8002ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2208      	movs	r2, #8
 8002ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f92f 	bl	8002d54 <HAL_TIM_IC_CaptureCallback>
 8002af6:	e005      	b.n	8002b04 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f922 	bl	8002d42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f931 	bl	8002d66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d10e      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f06f 0201 	mvn.w	r2, #1
 8002b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f8fd 	bl	8002d30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d10e      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b4e:	2b80      	cmp	r3, #128	; 0x80
 8002b50:	d107      	bne.n	8002b62 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fa5a 	bl	8003016 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	d10e      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d107      	bne.n	8002b8e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f8f5 	bl	8002d78 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b20      	cmp	r3, #32
 8002b9a:	d10e      	bne.n	8002bba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	d107      	bne.n	8002bba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f06f 0220 	mvn.w	r2, #32
 8002bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fa25 	bl	8003004 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_ConfigClockSource+0x18>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e0a6      	b.n	8002d28 <HAL_TIM_ConfigClockSource+0x166>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bf8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c00:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d067      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x120>
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d80b      	bhi.n	8002c2e <HAL_TIM_ConfigClockSource+0x6c>
 8002c16:	2b10      	cmp	r3, #16
 8002c18:	d073      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x140>
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d802      	bhi.n	8002c24 <HAL_TIM_ConfigClockSource+0x62>
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d06f      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c22:	e078      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d06c      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x140>
 8002c28:	2b30      	cmp	r3, #48	; 0x30
 8002c2a:	d06a      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c2c:	e073      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c2e:	2b70      	cmp	r3, #112	; 0x70
 8002c30:	d00d      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0x8c>
 8002c32:	2b70      	cmp	r3, #112	; 0x70
 8002c34:	d804      	bhi.n	8002c40 <HAL_TIM_ConfigClockSource+0x7e>
 8002c36:	2b50      	cmp	r3, #80	; 0x50
 8002c38:	d033      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0xe0>
 8002c3a:	2b60      	cmp	r3, #96	; 0x60
 8002c3c:	d041      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c3e:	e06a      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c44:	d066      	beq.n	8002d14 <HAL_TIM_ConfigClockSource+0x152>
 8002c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c4a:	d017      	beq.n	8002c7c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c4c:	e063      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6899      	ldr	r1, [r3, #8]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f000 f96e 	bl	8002f3e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c70:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	609a      	str	r2, [r3, #8]
      break;
 8002c7a:	e04c      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6899      	ldr	r1, [r3, #8]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f000 f957 	bl	8002f3e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c9e:	609a      	str	r2, [r3, #8]
      break;
 8002ca0:	e039      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 f8ce 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2150      	movs	r1, #80	; 0x50
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f925 	bl	8002f0a <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e029      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 f8ec 	bl	8002eac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2160      	movs	r1, #96	; 0x60
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f915 	bl	8002f0a <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e019      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6859      	ldr	r1, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	f000 f8ae 	bl	8002e50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2140      	movs	r1, #64	; 0x40
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f000 f905 	bl	8002f0a <TIM_ITRx_SetConfig>
      break;
 8002d00:	e009      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f000 f8fc 	bl	8002f0a <TIM_ITRx_SetConfig>
      break;
 8002d12:	e000      	b.n	8002d16 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr

08002d66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
	...

08002d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a29      	ldr	r2, [pc, #164]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00b      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002daa:	d007      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0xbc>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0x30>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <TIM_Base_SetConfig+0xc0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d108      	bne.n	8002dce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a1c      	ldr	r2, [pc, #112]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d007      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <TIM_Base_SetConfig+0xbc>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <TIM_Base_SetConfig+0x62>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <TIM_Base_SetConfig+0xc0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d108      	bne.n	8002e00 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a07      	ldr	r2, [pc, #28]	; (8002e44 <TIM_Base_SetConfig+0xb8>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	615a      	str	r2, [r3, #20]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	40012c00 	.word	0x40012c00
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800

08002e50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b087      	sub	sp, #28
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f023 0201 	bic.w	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 030a 	bic.w	r3, r3, #10
 8002e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	621a      	str	r2, [r3, #32]
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 0210 	bic.w	r2, r3, #16
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ed6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	031b      	lsls	r3, r3, #12
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ee8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	621a      	str	r2, [r3, #32]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr

08002f0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b085      	sub	sp, #20
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
 8002f12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f043 0307 	orr.w	r3, r3, #7
 8002f2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	609a      	str	r2, [r3, #8]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr

08002f3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b087      	sub	sp, #28
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	021a      	lsls	r2, r3, #8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	609a      	str	r2, [r3, #8]
}
 8002f72:	bf00      	nop
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e032      	b.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fcc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e03f      	b.n	80030ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d106      	bne.n	8003054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fe f892 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2224      	movs	r2, #36	; 0x24
 8003058:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800306a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fbe7 	bl	8003840 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b088      	sub	sp, #32
 80030c6:	af02      	add	r7, sp, #8
 80030c8:	60f8      	str	r0, [r7, #12]
 80030ca:	60b9      	str	r1, [r7, #8]
 80030cc:	603b      	str	r3, [r7, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	2b20      	cmp	r3, #32
 80030e0:	f040 8083 	bne.w	80031ea <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_UART_Transmit+0x2e>
 80030ea:	88fb      	ldrh	r3, [r7, #6]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e07b      	b.n	80031ec <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Transmit+0x40>
 80030fe:	2302      	movs	r3, #2
 8003100:	e074      	b.n	80031ec <HAL_UART_Transmit+0x12a>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2221      	movs	r2, #33	; 0x21
 8003114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003118:	f7fe fa34 	bl	8001584 <HAL_GetTick>
 800311c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	88fa      	ldrh	r2, [r7, #6]
 8003122:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	88fa      	ldrh	r2, [r7, #6]
 8003128:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800312a:	e042      	b.n	80031b2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003142:	d122      	bne.n	800318a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2200      	movs	r2, #0
 800314c:	2180      	movs	r1, #128	; 0x80
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fa0d 	bl	800356e <UART_WaitOnFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e046      	b.n	80031ec <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003170:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	3302      	adds	r3, #2
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	e017      	b.n	80031b2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3301      	adds	r3, #1
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	e013      	b.n	80031b2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2200      	movs	r2, #0
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f9ea 	bl	800356e <UART_WaitOnFlagUntilTimeout>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e023      	b.n	80031ec <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	60ba      	str	r2, [r7, #8]
 80031aa:	781a      	ldrb	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1b7      	bne.n	800312c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	2200      	movs	r2, #0
 80031c4:	2140      	movs	r1, #64	; 0x40
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 f9d1 	bl	800356e <UART_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e00a      	b.n	80031ec <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031ea:	2302      	movs	r3, #2
  }
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af02      	add	r7, sp, #8
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b20      	cmp	r3, #32
 8003212:	f040 8090 	bne.w	8003336 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_UART_Receive+0x2e>
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e088      	b.n	8003338 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_UART_Receive+0x40>
 8003230:	2302      	movs	r3, #2
 8003232:	e081      	b.n	8003338 <HAL_UART_Receive+0x144>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2222      	movs	r2, #34	; 0x22
 8003246:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800324a:	f7fe f99b 	bl	8001584 <HAL_GetTick>
 800324e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	88fa      	ldrh	r2, [r7, #6]
 8003254:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	88fa      	ldrh	r2, [r7, #6]
 800325a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800325c:	e05c      	b.n	8003318 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	d12b      	bne.n	80032ce <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	2120      	movs	r1, #32
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f974 	bl	800356e <UART_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e053      	b.n	8003338 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10c      	bne.n	80032b6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	3302      	adds	r3, #2
 80032b2:	60bb      	str	r3, [r7, #8]
 80032b4:	e030      	b.n	8003318 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	b29b      	uxth	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	e024      	b.n	8003318 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2120      	movs	r1, #32
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f948 	bl	800356e <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e027      	b.n	8003338 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d108      	bne.n	8003302 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	60ba      	str	r2, [r7, #8]
 80032fc:	b2ca      	uxtb	r2, r1
 80032fe:	701a      	strb	r2, [r3, #0]
 8003300:	e00a      	b.n	8003318 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	1c59      	adds	r1, r3, #1
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d19d      	bne.n	800325e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2220      	movs	r2, #32
 8003326:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e000      	b.n	8003338 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003336:	2302      	movs	r3, #2
  }
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003364:	2300      	movs	r3, #0
 8003366:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10d      	bne.n	8003392 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <HAL_UART_IRQHandler+0x52>
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f9d7 	bl	800373e <UART_Receive_IT>
      return;
 8003390:	e0cc      	b.n	800352c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 80ab 	beq.w	80034f0 <HAL_UART_IRQHandler+0x1b0>
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d105      	bne.n	80033b0 <HAL_UART_IRQHandler+0x70>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 80a0 	beq.w	80034f0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_UART_IRQHandler+0x90>
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d005      	beq.n	80033d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_UART_IRQHandler+0xb0>
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	f043 0202 	orr.w	r2, r3, #2
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_UART_IRQHandler+0xd0>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_UART_IRQHandler+0xf0>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	f043 0208 	orr.w	r2, r3, #8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d078      	beq.n	800352a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f003 0320 	and.w	r3, r3, #32
 800343e:	2b00      	cmp	r3, #0
 8003440:	d007      	beq.n	8003452 <HAL_UART_IRQHandler+0x112>
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f976 	bl	800373e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d102      	bne.n	800347a <HAL_UART_IRQHandler+0x13a>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d031      	beq.n	80034de <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8c1 	bl	8003602 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d023      	beq.n	80034d6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800349c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d013      	beq.n	80034ce <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034aa:	4a22      	ldr	r2, [pc, #136]	; (8003534 <HAL_UART_IRQHandler+0x1f4>)
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe f9a0 	bl	80017f8 <HAL_DMA_Abort_IT>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d016      	beq.n	80034ec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034c8:	4610      	mov	r0, r2
 80034ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034cc:	e00e      	b.n	80034ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f844 	bl	800355c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d4:	e00a      	b.n	80034ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f840 	bl	800355c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	e006      	b.n	80034ec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f83c 	bl	800355c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80034ea:	e01e      	b.n	800352a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	bf00      	nop
    return;
 80034ee:	e01c      	b.n	800352a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d008      	beq.n	800350c <HAL_UART_IRQHandler+0x1cc>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f8ad 	bl	8003664 <UART_Transmit_IT>
    return;
 800350a:	e00f      	b.n	800352c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_UART_IRQHandler+0x1ec>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f8f4 	bl	800370e <UART_EndTransmit_IT>
    return;
 8003526:	bf00      	nop
 8003528:	e000      	b.n	800352c <HAL_UART_IRQHandler+0x1ec>
    return;
 800352a:	bf00      	nop
  }
}
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	0800363d 	.word	0x0800363d

08003538 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	bc80      	pop	{r7}
 8003548:	4770      	bx	lr

0800354a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	e02c      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d028      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d007      	beq.n	800359e <UART_WaitOnFlagUntilTimeout+0x30>
 800358e:	f7fd fff9 	bl	8001584 <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	429a      	cmp	r2, r3
 800359c:	d21d      	bcs.n	80035da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d0c3      	beq.n	8003580 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b083      	sub	sp, #12
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003618:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695a      	ldr	r2, [r3, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f022 0201 	bic.w	r2, r2, #1
 8003628:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2220      	movs	r2, #32
 800362e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr

0800363c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff ff80 	bl	800355c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b21      	cmp	r3, #33	; 0x21
 8003676:	d144      	bne.n	8003702 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003680:	d11a      	bne.n	80036b8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003696:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	621a      	str	r2, [r3, #32]
 80036aa:	e00e      	b.n	80036ca <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]
 80036b6:	e008      	b.n	80036ca <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	1c59      	adds	r1, r3, #1
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6211      	str	r1, [r2, #32]
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4619      	mov	r1, r3
 80036d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	bc80      	pop	{r7}
 800370c:	4770      	bx	lr

0800370e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003724:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2220      	movs	r2, #32
 800372a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ff02 	bl	8003538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b22      	cmp	r3, #34	; 0x22
 8003750:	d171      	bne.n	8003836 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375a:	d123      	bne.n	80037a4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10e      	bne.n	8003788 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	b29b      	uxth	r3, r3
 8003772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	1c9a      	adds	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
 8003786:	e029      	b.n	80037dc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	b29b      	uxth	r3, r3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	629a      	str	r2, [r3, #40]	; 0x28
 80037a2:	e01b      	b.n	80037dc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6858      	ldr	r0, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	1c59      	adds	r1, r3, #1
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6291      	str	r1, [r2, #40]	; 0x28
 80037bc:	b2c2      	uxtb	r2, r0
 80037be:	701a      	strb	r2, [r3, #0]
 80037c0:	e00c      	b.n	80037dc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	1c58      	adds	r0, r3, #1
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	6288      	str	r0, [r1, #40]	; 0x28
 80037d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	4619      	mov	r1, r3
 80037ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d120      	bne.n	8003832 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0220 	bic.w	r2, r2, #32
 80037fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800380e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f7ff fe8e 	bl	800354a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e002      	b.n	8003838 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	e000      	b.n	8003838 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	695b      	ldr	r3, [r3, #20]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800387a:	f023 030c 	bic.w	r3, r3, #12
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	68f9      	ldr	r1, [r7, #12]
 8003884:	430b      	orrs	r3, r1
 8003886:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a52      	ldr	r2, [pc, #328]	; (80039ec <UART_SetConfig+0x1ac>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d14e      	bne.n	8003946 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038a8:	f7fe fd78 	bl	800239c <HAL_RCC_GetPCLK2Freq>
 80038ac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ae:	68ba      	ldr	r2, [r7, #8]
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009a      	lsls	r2, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	4a4a      	ldr	r2, [pc, #296]	; (80039f0 <UART_SetConfig+0x1b0>)
 80038c6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ca:	095b      	lsrs	r3, r3, #5
 80038cc:	0119      	lsls	r1, r3, #4
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009a      	lsls	r2, r3, #2
 80038d8:	441a      	add	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038e4:	4b42      	ldr	r3, [pc, #264]	; (80039f0 <UART_SetConfig+0x1b0>)
 80038e6:	fba3 0302 	umull	r0, r3, r3, r2
 80038ea:	095b      	lsrs	r3, r3, #5
 80038ec:	2064      	movs	r0, #100	; 0x64
 80038ee:	fb00 f303 	mul.w	r3, r0, r3
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	3332      	adds	r3, #50	; 0x32
 80038f8:	4a3d      	ldr	r2, [pc, #244]	; (80039f0 <UART_SetConfig+0x1b0>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003904:	4419      	add	r1, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	009a      	lsls	r2, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	fbb2 f2f3 	udiv	r2, r2, r3
 800391c:	4b34      	ldr	r3, [pc, #208]	; (80039f0 <UART_SetConfig+0x1b0>)
 800391e:	fba3 0302 	umull	r0, r3, r3, r2
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	2064      	movs	r0, #100	; 0x64
 8003926:	fb00 f303 	mul.w	r3, r0, r3
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	3332      	adds	r3, #50	; 0x32
 8003930:	4a2f      	ldr	r2, [pc, #188]	; (80039f0 <UART_SetConfig+0x1b0>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	f003 020f 	and.w	r2, r3, #15
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	440a      	add	r2, r1
 8003942:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003944:	e04d      	b.n	80039e2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003946:	f7fe fd15 	bl	8002374 <HAL_RCC_GetPCLK1Freq>
 800394a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	009a      	lsls	r2, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003962:	4a23      	ldr	r2, [pc, #140]	; (80039f0 <UART_SetConfig+0x1b0>)
 8003964:	fba2 2303 	umull	r2, r3, r2, r3
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	0119      	lsls	r1, r3, #4
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	009a      	lsls	r2, r3, #2
 8003976:	441a      	add	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003982:	4b1b      	ldr	r3, [pc, #108]	; (80039f0 <UART_SetConfig+0x1b0>)
 8003984:	fba3 0302 	umull	r0, r3, r3, r2
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	2064      	movs	r0, #100	; 0x64
 800398c:	fb00 f303 	mul.w	r3, r0, r3
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	3332      	adds	r3, #50	; 0x32
 8003996:	4a16      	ldr	r2, [pc, #88]	; (80039f0 <UART_SetConfig+0x1b0>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a2:	4419      	add	r1, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	009a      	lsls	r2, r3, #2
 80039ae:	441a      	add	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ba:	4b0d      	ldr	r3, [pc, #52]	; (80039f0 <UART_SetConfig+0x1b0>)
 80039bc:	fba3 0302 	umull	r0, r3, r3, r2
 80039c0:	095b      	lsrs	r3, r3, #5
 80039c2:	2064      	movs	r0, #100	; 0x64
 80039c4:	fb00 f303 	mul.w	r3, r0, r3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	3332      	adds	r3, #50	; 0x32
 80039ce:	4a08      	ldr	r2, [pc, #32]	; (80039f0 <UART_SetConfig+0x1b0>)
 80039d0:	fba2 2303 	umull	r2, r3, r2, r3
 80039d4:	095b      	lsrs	r3, r3, #5
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	440a      	add	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]
}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40013800 	.word	0x40013800
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <__errno>:
 80039f4:	4b01      	ldr	r3, [pc, #4]	; (80039fc <__errno+0x8>)
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	2000000c 	.word	0x2000000c

08003a00 <__libc_init_array>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	2500      	movs	r5, #0
 8003a04:	4e0c      	ldr	r6, [pc, #48]	; (8003a38 <__libc_init_array+0x38>)
 8003a06:	4c0d      	ldr	r4, [pc, #52]	; (8003a3c <__libc_init_array+0x3c>)
 8003a08:	1ba4      	subs	r4, r4, r6
 8003a0a:	10a4      	asrs	r4, r4, #2
 8003a0c:	42a5      	cmp	r5, r4
 8003a0e:	d109      	bne.n	8003a24 <__libc_init_array+0x24>
 8003a10:	f001 f8e4 	bl	8004bdc <_init>
 8003a14:	2500      	movs	r5, #0
 8003a16:	4e0a      	ldr	r6, [pc, #40]	; (8003a40 <__libc_init_array+0x40>)
 8003a18:	4c0a      	ldr	r4, [pc, #40]	; (8003a44 <__libc_init_array+0x44>)
 8003a1a:	1ba4      	subs	r4, r4, r6
 8003a1c:	10a4      	asrs	r4, r4, #2
 8003a1e:	42a5      	cmp	r5, r4
 8003a20:	d105      	bne.n	8003a2e <__libc_init_array+0x2e>
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a28:	4798      	blx	r3
 8003a2a:	3501      	adds	r5, #1
 8003a2c:	e7ee      	b.n	8003a0c <__libc_init_array+0xc>
 8003a2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a32:	4798      	blx	r3
 8003a34:	3501      	adds	r5, #1
 8003a36:	e7f2      	b.n	8003a1e <__libc_init_array+0x1e>
 8003a38:	08004e80 	.word	0x08004e80
 8003a3c:	08004e80 	.word	0x08004e80
 8003a40:	08004e80 	.word	0x08004e80
 8003a44:	08004e84 	.word	0x08004e84

08003a48 <memset>:
 8003a48:	4603      	mov	r3, r0
 8003a4a:	4402      	add	r2, r0
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d100      	bne.n	8003a52 <memset+0xa>
 8003a50:	4770      	bx	lr
 8003a52:	f803 1b01 	strb.w	r1, [r3], #1
 8003a56:	e7f9      	b.n	8003a4c <memset+0x4>

08003a58 <iprintf>:
 8003a58:	b40f      	push	{r0, r1, r2, r3}
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <iprintf+0x2c>)
 8003a5c:	b513      	push	{r0, r1, r4, lr}
 8003a5e:	681c      	ldr	r4, [r3, #0]
 8003a60:	b124      	cbz	r4, 8003a6c <iprintf+0x14>
 8003a62:	69a3      	ldr	r3, [r4, #24]
 8003a64:	b913      	cbnz	r3, 8003a6c <iprintf+0x14>
 8003a66:	4620      	mov	r0, r4
 8003a68:	f000 f87e 	bl	8003b68 <__sinit>
 8003a6c:	ab05      	add	r3, sp, #20
 8003a6e:	9a04      	ldr	r2, [sp, #16]
 8003a70:	68a1      	ldr	r1, [r4, #8]
 8003a72:	4620      	mov	r0, r4
 8003a74:	9301      	str	r3, [sp, #4]
 8003a76:	f000 fad5 	bl	8004024 <_vfiprintf_r>
 8003a7a:	b002      	add	sp, #8
 8003a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a80:	b004      	add	sp, #16
 8003a82:	4770      	bx	lr
 8003a84:	2000000c 	.word	0x2000000c

08003a88 <siprintf>:
 8003a88:	b40e      	push	{r1, r2, r3}
 8003a8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a8e:	b500      	push	{lr}
 8003a90:	b09c      	sub	sp, #112	; 0x70
 8003a92:	ab1d      	add	r3, sp, #116	; 0x74
 8003a94:	9002      	str	r0, [sp, #8]
 8003a96:	9006      	str	r0, [sp, #24]
 8003a98:	9107      	str	r1, [sp, #28]
 8003a9a:	9104      	str	r1, [sp, #16]
 8003a9c:	4808      	ldr	r0, [pc, #32]	; (8003ac0 <siprintf+0x38>)
 8003a9e:	4909      	ldr	r1, [pc, #36]	; (8003ac4 <siprintf+0x3c>)
 8003aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aa4:	9105      	str	r1, [sp, #20]
 8003aa6:	6800      	ldr	r0, [r0, #0]
 8003aa8:	a902      	add	r1, sp, #8
 8003aaa:	9301      	str	r3, [sp, #4]
 8003aac:	f000 f99a 	bl	8003de4 <_svfiprintf_r>
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	9b02      	ldr	r3, [sp, #8]
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	b01c      	add	sp, #112	; 0x70
 8003ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003abc:	b003      	add	sp, #12
 8003abe:	4770      	bx	lr
 8003ac0:	2000000c 	.word	0x2000000c
 8003ac4:	ffff0208 	.word	0xffff0208

08003ac8 <strcat>:
 8003ac8:	4603      	mov	r3, r0
 8003aca:	b510      	push	{r4, lr}
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	1c5c      	adds	r4, r3, #1
 8003ad0:	b93a      	cbnz	r2, 8003ae2 <strcat+0x1a>
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ad8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003adc:	2a00      	cmp	r2, #0
 8003ade:	d1f9      	bne.n	8003ad4 <strcat+0xc>
 8003ae0:	bd10      	pop	{r4, pc}
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	e7f2      	b.n	8003acc <strcat+0x4>
	...

08003ae8 <std>:
 8003ae8:	2300      	movs	r3, #0
 8003aea:	b510      	push	{r4, lr}
 8003aec:	4604      	mov	r4, r0
 8003aee:	e9c0 3300 	strd	r3, r3, [r0]
 8003af2:	6083      	str	r3, [r0, #8]
 8003af4:	8181      	strh	r1, [r0, #12]
 8003af6:	6643      	str	r3, [r0, #100]	; 0x64
 8003af8:	81c2      	strh	r2, [r0, #14]
 8003afa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003afe:	6183      	str	r3, [r0, #24]
 8003b00:	4619      	mov	r1, r3
 8003b02:	2208      	movs	r2, #8
 8003b04:	305c      	adds	r0, #92	; 0x5c
 8003b06:	f7ff ff9f 	bl	8003a48 <memset>
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <std+0x38>)
 8003b0c:	6224      	str	r4, [r4, #32]
 8003b0e:	6263      	str	r3, [r4, #36]	; 0x24
 8003b10:	4b04      	ldr	r3, [pc, #16]	; (8003b24 <std+0x3c>)
 8003b12:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b14:	4b04      	ldr	r3, [pc, #16]	; (8003b28 <std+0x40>)
 8003b16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b18:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <std+0x44>)
 8003b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8003b1c:	bd10      	pop	{r4, pc}
 8003b1e:	bf00      	nop
 8003b20:	08004581 	.word	0x08004581
 8003b24:	080045a3 	.word	0x080045a3
 8003b28:	080045db 	.word	0x080045db
 8003b2c:	080045ff 	.word	0x080045ff

08003b30 <_cleanup_r>:
 8003b30:	4901      	ldr	r1, [pc, #4]	; (8003b38 <_cleanup_r+0x8>)
 8003b32:	f000 b885 	b.w	8003c40 <_fwalk_reent>
 8003b36:	bf00      	nop
 8003b38:	080048d9 	.word	0x080048d9

08003b3c <__sfmoreglue>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	2568      	movs	r5, #104	; 0x68
 8003b40:	1e4a      	subs	r2, r1, #1
 8003b42:	4355      	muls	r5, r2
 8003b44:	460e      	mov	r6, r1
 8003b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b4a:	f000 f897 	bl	8003c7c <_malloc_r>
 8003b4e:	4604      	mov	r4, r0
 8003b50:	b140      	cbz	r0, 8003b64 <__sfmoreglue+0x28>
 8003b52:	2100      	movs	r1, #0
 8003b54:	e9c0 1600 	strd	r1, r6, [r0]
 8003b58:	300c      	adds	r0, #12
 8003b5a:	60a0      	str	r0, [r4, #8]
 8003b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b60:	f7ff ff72 	bl	8003a48 <memset>
 8003b64:	4620      	mov	r0, r4
 8003b66:	bd70      	pop	{r4, r5, r6, pc}

08003b68 <__sinit>:
 8003b68:	6983      	ldr	r3, [r0, #24]
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	bb33      	cbnz	r3, 8003bbe <__sinit+0x56>
 8003b70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003b74:	6503      	str	r3, [r0, #80]	; 0x50
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <__sinit+0x58>)
 8003b78:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <__sinit+0x5c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6282      	str	r2, [r0, #40]	; 0x28
 8003b7e:	4298      	cmp	r0, r3
 8003b80:	bf04      	itt	eq
 8003b82:	2301      	moveq	r3, #1
 8003b84:	6183      	streq	r3, [r0, #24]
 8003b86:	f000 f81f 	bl	8003bc8 <__sfp>
 8003b8a:	6060      	str	r0, [r4, #4]
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f000 f81b 	bl	8003bc8 <__sfp>
 8003b92:	60a0      	str	r0, [r4, #8]
 8003b94:	4620      	mov	r0, r4
 8003b96:	f000 f817 	bl	8003bc8 <__sfp>
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	60e0      	str	r0, [r4, #12]
 8003b9e:	2104      	movs	r1, #4
 8003ba0:	6860      	ldr	r0, [r4, #4]
 8003ba2:	f7ff ffa1 	bl	8003ae8 <std>
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2109      	movs	r1, #9
 8003baa:	68a0      	ldr	r0, [r4, #8]
 8003bac:	f7ff ff9c 	bl	8003ae8 <std>
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	2112      	movs	r1, #18
 8003bb4:	68e0      	ldr	r0, [r4, #12]
 8003bb6:	f7ff ff97 	bl	8003ae8 <std>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61a3      	str	r3, [r4, #24]
 8003bbe:	bd10      	pop	{r4, pc}
 8003bc0:	08004de8 	.word	0x08004de8
 8003bc4:	08003b31 	.word	0x08003b31

08003bc8 <__sfp>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	4b1b      	ldr	r3, [pc, #108]	; (8003c38 <__sfp+0x70>)
 8003bcc:	4607      	mov	r7, r0
 8003bce:	681e      	ldr	r6, [r3, #0]
 8003bd0:	69b3      	ldr	r3, [r6, #24]
 8003bd2:	b913      	cbnz	r3, 8003bda <__sfp+0x12>
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff ffc7 	bl	8003b68 <__sinit>
 8003bda:	3648      	adds	r6, #72	; 0x48
 8003bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	d503      	bpl.n	8003bec <__sfp+0x24>
 8003be4:	6833      	ldr	r3, [r6, #0]
 8003be6:	b133      	cbz	r3, 8003bf6 <__sfp+0x2e>
 8003be8:	6836      	ldr	r6, [r6, #0]
 8003bea:	e7f7      	b.n	8003bdc <__sfp+0x14>
 8003bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003bf0:	b16d      	cbz	r5, 8003c0e <__sfp+0x46>
 8003bf2:	3468      	adds	r4, #104	; 0x68
 8003bf4:	e7f4      	b.n	8003be0 <__sfp+0x18>
 8003bf6:	2104      	movs	r1, #4
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f7ff ff9f 	bl	8003b3c <__sfmoreglue>
 8003bfe:	6030      	str	r0, [r6, #0]
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d1f1      	bne.n	8003be8 <__sfp+0x20>
 8003c04:	230c      	movs	r3, #12
 8003c06:	4604      	mov	r4, r0
 8003c08:	603b      	str	r3, [r7, #0]
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c0e:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <__sfp+0x74>)
 8003c10:	6665      	str	r5, [r4, #100]	; 0x64
 8003c12:	e9c4 5500 	strd	r5, r5, [r4]
 8003c16:	60a5      	str	r5, [r4, #8]
 8003c18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c20:	2208      	movs	r2, #8
 8003c22:	4629      	mov	r1, r5
 8003c24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c28:	f7ff ff0e 	bl	8003a48 <memset>
 8003c2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c34:	e7e9      	b.n	8003c0a <__sfp+0x42>
 8003c36:	bf00      	nop
 8003c38:	08004de8 	.word	0x08004de8
 8003c3c:	ffff0001 	.word	0xffff0001

08003c40 <_fwalk_reent>:
 8003c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c44:	4680      	mov	r8, r0
 8003c46:	4689      	mov	r9, r1
 8003c48:	2600      	movs	r6, #0
 8003c4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c4e:	b914      	cbnz	r4, 8003c56 <_fwalk_reent+0x16>
 8003c50:	4630      	mov	r0, r6
 8003c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003c5a:	3f01      	subs	r7, #1
 8003c5c:	d501      	bpl.n	8003c62 <_fwalk_reent+0x22>
 8003c5e:	6824      	ldr	r4, [r4, #0]
 8003c60:	e7f5      	b.n	8003c4e <_fwalk_reent+0xe>
 8003c62:	89ab      	ldrh	r3, [r5, #12]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d907      	bls.n	8003c78 <_fwalk_reent+0x38>
 8003c68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	d003      	beq.n	8003c78 <_fwalk_reent+0x38>
 8003c70:	4629      	mov	r1, r5
 8003c72:	4640      	mov	r0, r8
 8003c74:	47c8      	blx	r9
 8003c76:	4306      	orrs	r6, r0
 8003c78:	3568      	adds	r5, #104	; 0x68
 8003c7a:	e7ee      	b.n	8003c5a <_fwalk_reent+0x1a>

08003c7c <_malloc_r>:
 8003c7c:	b570      	push	{r4, r5, r6, lr}
 8003c7e:	1ccd      	adds	r5, r1, #3
 8003c80:	f025 0503 	bic.w	r5, r5, #3
 8003c84:	3508      	adds	r5, #8
 8003c86:	2d0c      	cmp	r5, #12
 8003c88:	bf38      	it	cc
 8003c8a:	250c      	movcc	r5, #12
 8003c8c:	2d00      	cmp	r5, #0
 8003c8e:	4606      	mov	r6, r0
 8003c90:	db01      	blt.n	8003c96 <_malloc_r+0x1a>
 8003c92:	42a9      	cmp	r1, r5
 8003c94:	d903      	bls.n	8003c9e <_malloc_r+0x22>
 8003c96:	230c      	movs	r3, #12
 8003c98:	6033      	str	r3, [r6, #0]
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	f000 feed 	bl	8004a7c <__malloc_lock>
 8003ca2:	4a21      	ldr	r2, [pc, #132]	; (8003d28 <_malloc_r+0xac>)
 8003ca4:	6814      	ldr	r4, [r2, #0]
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	b991      	cbnz	r1, 8003cd0 <_malloc_r+0x54>
 8003caa:	4c20      	ldr	r4, [pc, #128]	; (8003d2c <_malloc_r+0xb0>)
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	b91b      	cbnz	r3, 8003cb8 <_malloc_r+0x3c>
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	f000 fc55 	bl	8004560 <_sbrk_r>
 8003cb6:	6020      	str	r0, [r4, #0]
 8003cb8:	4629      	mov	r1, r5
 8003cba:	4630      	mov	r0, r6
 8003cbc:	f000 fc50 	bl	8004560 <_sbrk_r>
 8003cc0:	1c43      	adds	r3, r0, #1
 8003cc2:	d124      	bne.n	8003d0e <_malloc_r+0x92>
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	4630      	mov	r0, r6
 8003cc8:	6033      	str	r3, [r6, #0]
 8003cca:	f000 fed8 	bl	8004a7e <__malloc_unlock>
 8003cce:	e7e4      	b.n	8003c9a <_malloc_r+0x1e>
 8003cd0:	680b      	ldr	r3, [r1, #0]
 8003cd2:	1b5b      	subs	r3, r3, r5
 8003cd4:	d418      	bmi.n	8003d08 <_malloc_r+0x8c>
 8003cd6:	2b0b      	cmp	r3, #11
 8003cd8:	d90f      	bls.n	8003cfa <_malloc_r+0x7e>
 8003cda:	600b      	str	r3, [r1, #0]
 8003cdc:	18cc      	adds	r4, r1, r3
 8003cde:	50cd      	str	r5, [r1, r3]
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	f000 fecc 	bl	8004a7e <__malloc_unlock>
 8003ce6:	f104 000b 	add.w	r0, r4, #11
 8003cea:	1d23      	adds	r3, r4, #4
 8003cec:	f020 0007 	bic.w	r0, r0, #7
 8003cf0:	1ac3      	subs	r3, r0, r3
 8003cf2:	d0d3      	beq.n	8003c9c <_malloc_r+0x20>
 8003cf4:	425a      	negs	r2, r3
 8003cf6:	50e2      	str	r2, [r4, r3]
 8003cf8:	e7d0      	b.n	8003c9c <_malloc_r+0x20>
 8003cfa:	684b      	ldr	r3, [r1, #4]
 8003cfc:	428c      	cmp	r4, r1
 8003cfe:	bf16      	itet	ne
 8003d00:	6063      	strne	r3, [r4, #4]
 8003d02:	6013      	streq	r3, [r2, #0]
 8003d04:	460c      	movne	r4, r1
 8003d06:	e7eb      	b.n	8003ce0 <_malloc_r+0x64>
 8003d08:	460c      	mov	r4, r1
 8003d0a:	6849      	ldr	r1, [r1, #4]
 8003d0c:	e7cc      	b.n	8003ca8 <_malloc_r+0x2c>
 8003d0e:	1cc4      	adds	r4, r0, #3
 8003d10:	f024 0403 	bic.w	r4, r4, #3
 8003d14:	42a0      	cmp	r0, r4
 8003d16:	d005      	beq.n	8003d24 <_malloc_r+0xa8>
 8003d18:	1a21      	subs	r1, r4, r0
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	f000 fc20 	bl	8004560 <_sbrk_r>
 8003d20:	3001      	adds	r0, #1
 8003d22:	d0cf      	beq.n	8003cc4 <_malloc_r+0x48>
 8003d24:	6025      	str	r5, [r4, #0]
 8003d26:	e7db      	b.n	8003ce0 <_malloc_r+0x64>
 8003d28:	20000094 	.word	0x20000094
 8003d2c:	20000098 	.word	0x20000098

08003d30 <__ssputs_r>:
 8003d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d34:	688e      	ldr	r6, [r1, #8]
 8003d36:	4682      	mov	sl, r0
 8003d38:	429e      	cmp	r6, r3
 8003d3a:	460c      	mov	r4, r1
 8003d3c:	4690      	mov	r8, r2
 8003d3e:	4699      	mov	r9, r3
 8003d40:	d837      	bhi.n	8003db2 <__ssputs_r+0x82>
 8003d42:	898a      	ldrh	r2, [r1, #12]
 8003d44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d48:	d031      	beq.n	8003dae <__ssputs_r+0x7e>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	6825      	ldr	r5, [r4, #0]
 8003d4e:	6909      	ldr	r1, [r1, #16]
 8003d50:	1a6f      	subs	r7, r5, r1
 8003d52:	6965      	ldr	r5, [r4, #20]
 8003d54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d58:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d5c:	f109 0301 	add.w	r3, r9, #1
 8003d60:	443b      	add	r3, r7
 8003d62:	429d      	cmp	r5, r3
 8003d64:	bf38      	it	cc
 8003d66:	461d      	movcc	r5, r3
 8003d68:	0553      	lsls	r3, r2, #21
 8003d6a:	d530      	bpl.n	8003dce <__ssputs_r+0x9e>
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	f7ff ff85 	bl	8003c7c <_malloc_r>
 8003d72:	4606      	mov	r6, r0
 8003d74:	b950      	cbnz	r0, 8003d8c <__ssputs_r+0x5c>
 8003d76:	230c      	movs	r3, #12
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7c:	f8ca 3000 	str.w	r3, [sl]
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8c:	463a      	mov	r2, r7
 8003d8e:	6921      	ldr	r1, [r4, #16]
 8003d90:	f000 fe50 	bl	8004a34 <memcpy>
 8003d94:	89a3      	ldrh	r3, [r4, #12]
 8003d96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	6126      	str	r6, [r4, #16]
 8003da2:	443e      	add	r6, r7
 8003da4:	6026      	str	r6, [r4, #0]
 8003da6:	464e      	mov	r6, r9
 8003da8:	6165      	str	r5, [r4, #20]
 8003daa:	1bed      	subs	r5, r5, r7
 8003dac:	60a5      	str	r5, [r4, #8]
 8003dae:	454e      	cmp	r6, r9
 8003db0:	d900      	bls.n	8003db4 <__ssputs_r+0x84>
 8003db2:	464e      	mov	r6, r9
 8003db4:	4632      	mov	r2, r6
 8003db6:	4641      	mov	r1, r8
 8003db8:	6820      	ldr	r0, [r4, #0]
 8003dba:	f000 fe46 	bl	8004a4a <memmove>
 8003dbe:	68a3      	ldr	r3, [r4, #8]
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	1b9b      	subs	r3, r3, r6
 8003dc4:	60a3      	str	r3, [r4, #8]
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	441e      	add	r6, r3
 8003dca:	6026      	str	r6, [r4, #0]
 8003dcc:	e7dc      	b.n	8003d88 <__ssputs_r+0x58>
 8003dce:	462a      	mov	r2, r5
 8003dd0:	f000 fea2 	bl	8004b18 <_realloc_r>
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d1e2      	bne.n	8003da0 <__ssputs_r+0x70>
 8003dda:	6921      	ldr	r1, [r4, #16]
 8003ddc:	4650      	mov	r0, sl
 8003dde:	f000 fe4f 	bl	8004a80 <_free_r>
 8003de2:	e7c8      	b.n	8003d76 <__ssputs_r+0x46>

08003de4 <_svfiprintf_r>:
 8003de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de8:	461d      	mov	r5, r3
 8003dea:	898b      	ldrh	r3, [r1, #12]
 8003dec:	b09d      	sub	sp, #116	; 0x74
 8003dee:	061f      	lsls	r7, r3, #24
 8003df0:	4680      	mov	r8, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	4616      	mov	r6, r2
 8003df6:	d50f      	bpl.n	8003e18 <_svfiprintf_r+0x34>
 8003df8:	690b      	ldr	r3, [r1, #16]
 8003dfa:	b96b      	cbnz	r3, 8003e18 <_svfiprintf_r+0x34>
 8003dfc:	2140      	movs	r1, #64	; 0x40
 8003dfe:	f7ff ff3d 	bl	8003c7c <_malloc_r>
 8003e02:	6020      	str	r0, [r4, #0]
 8003e04:	6120      	str	r0, [r4, #16]
 8003e06:	b928      	cbnz	r0, 8003e14 <_svfiprintf_r+0x30>
 8003e08:	230c      	movs	r3, #12
 8003e0a:	f8c8 3000 	str.w	r3, [r8]
 8003e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e12:	e0c8      	b.n	8003fa6 <_svfiprintf_r+0x1c2>
 8003e14:	2340      	movs	r3, #64	; 0x40
 8003e16:	6163      	str	r3, [r4, #20]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e22:	2330      	movs	r3, #48	; 0x30
 8003e24:	f04f 0b01 	mov.w	fp, #1
 8003e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e2c:	9503      	str	r5, [sp, #12]
 8003e2e:	4637      	mov	r7, r6
 8003e30:	463d      	mov	r5, r7
 8003e32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e36:	b10b      	cbz	r3, 8003e3c <_svfiprintf_r+0x58>
 8003e38:	2b25      	cmp	r3, #37	; 0x25
 8003e3a:	d13e      	bne.n	8003eba <_svfiprintf_r+0xd6>
 8003e3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e40:	d00b      	beq.n	8003e5a <_svfiprintf_r+0x76>
 8003e42:	4653      	mov	r3, sl
 8003e44:	4632      	mov	r2, r6
 8003e46:	4621      	mov	r1, r4
 8003e48:	4640      	mov	r0, r8
 8003e4a:	f7ff ff71 	bl	8003d30 <__ssputs_r>
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f000 80a4 	beq.w	8003f9c <_svfiprintf_r+0x1b8>
 8003e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e56:	4453      	add	r3, sl
 8003e58:	9309      	str	r3, [sp, #36]	; 0x24
 8003e5a:	783b      	ldrb	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 809d 	beq.w	8003f9c <_svfiprintf_r+0x1b8>
 8003e62:	2300      	movs	r3, #0
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e6c:	9304      	str	r3, [sp, #16]
 8003e6e:	9307      	str	r3, [sp, #28]
 8003e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e74:	931a      	str	r3, [sp, #104]	; 0x68
 8003e76:	462f      	mov	r7, r5
 8003e78:	2205      	movs	r2, #5
 8003e7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003e7e:	4850      	ldr	r0, [pc, #320]	; (8003fc0 <_svfiprintf_r+0x1dc>)
 8003e80:	f000 fdca 	bl	8004a18 <memchr>
 8003e84:	9b04      	ldr	r3, [sp, #16]
 8003e86:	b9d0      	cbnz	r0, 8003ebe <_svfiprintf_r+0xda>
 8003e88:	06d9      	lsls	r1, r3, #27
 8003e8a:	bf44      	itt	mi
 8003e8c:	2220      	movmi	r2, #32
 8003e8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e92:	071a      	lsls	r2, r3, #28
 8003e94:	bf44      	itt	mi
 8003e96:	222b      	movmi	r2, #43	; 0x2b
 8003e98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e9c:	782a      	ldrb	r2, [r5, #0]
 8003e9e:	2a2a      	cmp	r2, #42	; 0x2a
 8003ea0:	d015      	beq.n	8003ece <_svfiprintf_r+0xea>
 8003ea2:	462f      	mov	r7, r5
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	250a      	movs	r5, #10
 8003ea8:	9a07      	ldr	r2, [sp, #28]
 8003eaa:	4639      	mov	r1, r7
 8003eac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eb0:	3b30      	subs	r3, #48	; 0x30
 8003eb2:	2b09      	cmp	r3, #9
 8003eb4:	d94d      	bls.n	8003f52 <_svfiprintf_r+0x16e>
 8003eb6:	b1b8      	cbz	r0, 8003ee8 <_svfiprintf_r+0x104>
 8003eb8:	e00f      	b.n	8003eda <_svfiprintf_r+0xf6>
 8003eba:	462f      	mov	r7, r5
 8003ebc:	e7b8      	b.n	8003e30 <_svfiprintf_r+0x4c>
 8003ebe:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <_svfiprintf_r+0x1dc>)
 8003ec0:	463d      	mov	r5, r7
 8003ec2:	1a80      	subs	r0, r0, r2
 8003ec4:	fa0b f000 	lsl.w	r0, fp, r0
 8003ec8:	4318      	orrs	r0, r3
 8003eca:	9004      	str	r0, [sp, #16]
 8003ecc:	e7d3      	b.n	8003e76 <_svfiprintf_r+0x92>
 8003ece:	9a03      	ldr	r2, [sp, #12]
 8003ed0:	1d11      	adds	r1, r2, #4
 8003ed2:	6812      	ldr	r2, [r2, #0]
 8003ed4:	9103      	str	r1, [sp, #12]
 8003ed6:	2a00      	cmp	r2, #0
 8003ed8:	db01      	blt.n	8003ede <_svfiprintf_r+0xfa>
 8003eda:	9207      	str	r2, [sp, #28]
 8003edc:	e004      	b.n	8003ee8 <_svfiprintf_r+0x104>
 8003ede:	4252      	negs	r2, r2
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	9207      	str	r2, [sp, #28]
 8003ee6:	9304      	str	r3, [sp, #16]
 8003ee8:	783b      	ldrb	r3, [r7, #0]
 8003eea:	2b2e      	cmp	r3, #46	; 0x2e
 8003eec:	d10c      	bne.n	8003f08 <_svfiprintf_r+0x124>
 8003eee:	787b      	ldrb	r3, [r7, #1]
 8003ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ef2:	d133      	bne.n	8003f5c <_svfiprintf_r+0x178>
 8003ef4:	9b03      	ldr	r3, [sp, #12]
 8003ef6:	3702      	adds	r7, #2
 8003ef8:	1d1a      	adds	r2, r3, #4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	9203      	str	r2, [sp, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	bfb8      	it	lt
 8003f02:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f06:	9305      	str	r3, [sp, #20]
 8003f08:	4d2e      	ldr	r5, [pc, #184]	; (8003fc4 <_svfiprintf_r+0x1e0>)
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	7839      	ldrb	r1, [r7, #0]
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 fd82 	bl	8004a18 <memchr>
 8003f14:	b138      	cbz	r0, 8003f26 <_svfiprintf_r+0x142>
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	1b40      	subs	r0, r0, r5
 8003f1a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f1e:	9b04      	ldr	r3, [sp, #16]
 8003f20:	3701      	adds	r7, #1
 8003f22:	4303      	orrs	r3, r0
 8003f24:	9304      	str	r3, [sp, #16]
 8003f26:	7839      	ldrb	r1, [r7, #0]
 8003f28:	2206      	movs	r2, #6
 8003f2a:	4827      	ldr	r0, [pc, #156]	; (8003fc8 <_svfiprintf_r+0x1e4>)
 8003f2c:	1c7e      	adds	r6, r7, #1
 8003f2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f32:	f000 fd71 	bl	8004a18 <memchr>
 8003f36:	2800      	cmp	r0, #0
 8003f38:	d038      	beq.n	8003fac <_svfiprintf_r+0x1c8>
 8003f3a:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <_svfiprintf_r+0x1e8>)
 8003f3c:	bb13      	cbnz	r3, 8003f84 <_svfiprintf_r+0x1a0>
 8003f3e:	9b03      	ldr	r3, [sp, #12]
 8003f40:	3307      	adds	r3, #7
 8003f42:	f023 0307 	bic.w	r3, r3, #7
 8003f46:	3308      	adds	r3, #8
 8003f48:	9303      	str	r3, [sp, #12]
 8003f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f4c:	444b      	add	r3, r9
 8003f4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f50:	e76d      	b.n	8003e2e <_svfiprintf_r+0x4a>
 8003f52:	fb05 3202 	mla	r2, r5, r2, r3
 8003f56:	2001      	movs	r0, #1
 8003f58:	460f      	mov	r7, r1
 8003f5a:	e7a6      	b.n	8003eaa <_svfiprintf_r+0xc6>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	250a      	movs	r5, #10
 8003f60:	4619      	mov	r1, r3
 8003f62:	3701      	adds	r7, #1
 8003f64:	9305      	str	r3, [sp, #20]
 8003f66:	4638      	mov	r0, r7
 8003f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f6c:	3a30      	subs	r2, #48	; 0x30
 8003f6e:	2a09      	cmp	r2, #9
 8003f70:	d903      	bls.n	8003f7a <_svfiprintf_r+0x196>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0c8      	beq.n	8003f08 <_svfiprintf_r+0x124>
 8003f76:	9105      	str	r1, [sp, #20]
 8003f78:	e7c6      	b.n	8003f08 <_svfiprintf_r+0x124>
 8003f7a:	fb05 2101 	mla	r1, r5, r1, r2
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4607      	mov	r7, r0
 8003f82:	e7f0      	b.n	8003f66 <_svfiprintf_r+0x182>
 8003f84:	ab03      	add	r3, sp, #12
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	4622      	mov	r2, r4
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <_svfiprintf_r+0x1ec>)
 8003f8c:	a904      	add	r1, sp, #16
 8003f8e:	4640      	mov	r0, r8
 8003f90:	f3af 8000 	nop.w
 8003f94:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f98:	4681      	mov	r9, r0
 8003f9a:	d1d6      	bne.n	8003f4a <_svfiprintf_r+0x166>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	065b      	lsls	r3, r3, #25
 8003fa0:	f53f af35 	bmi.w	8003e0e <_svfiprintf_r+0x2a>
 8003fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fa6:	b01d      	add	sp, #116	; 0x74
 8003fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fac:	ab03      	add	r3, sp, #12
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <_svfiprintf_r+0x1ec>)
 8003fb4:	a904      	add	r1, sp, #16
 8003fb6:	4640      	mov	r0, r8
 8003fb8:	f000 f9c0 	bl	800433c <_printf_i>
 8003fbc:	e7ea      	b.n	8003f94 <_svfiprintf_r+0x1b0>
 8003fbe:	bf00      	nop
 8003fc0:	08004e4c 	.word	0x08004e4c
 8003fc4:	08004e52 	.word	0x08004e52
 8003fc8:	08004e56 	.word	0x08004e56
 8003fcc:	00000000 	.word	0x00000000
 8003fd0:	08003d31 	.word	0x08003d31

08003fd4 <__sfputc_r>:
 8003fd4:	6893      	ldr	r3, [r2, #8]
 8003fd6:	b410      	push	{r4}
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	da07      	bge.n	8003ff0 <__sfputc_r+0x1c>
 8003fe0:	6994      	ldr	r4, [r2, #24]
 8003fe2:	42a3      	cmp	r3, r4
 8003fe4:	db01      	blt.n	8003fea <__sfputc_r+0x16>
 8003fe6:	290a      	cmp	r1, #10
 8003fe8:	d102      	bne.n	8003ff0 <__sfputc_r+0x1c>
 8003fea:	bc10      	pop	{r4}
 8003fec:	f000 bb0c 	b.w	8004608 <__swbuf_r>
 8003ff0:	6813      	ldr	r3, [r2, #0]
 8003ff2:	1c58      	adds	r0, r3, #1
 8003ff4:	6010      	str	r0, [r2, #0]
 8003ff6:	7019      	strb	r1, [r3, #0]
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	bc10      	pop	{r4}
 8003ffc:	4770      	bx	lr

08003ffe <__sfputs_r>:
 8003ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004000:	4606      	mov	r6, r0
 8004002:	460f      	mov	r7, r1
 8004004:	4614      	mov	r4, r2
 8004006:	18d5      	adds	r5, r2, r3
 8004008:	42ac      	cmp	r4, r5
 800400a:	d101      	bne.n	8004010 <__sfputs_r+0x12>
 800400c:	2000      	movs	r0, #0
 800400e:	e007      	b.n	8004020 <__sfputs_r+0x22>
 8004010:	463a      	mov	r2, r7
 8004012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004016:	4630      	mov	r0, r6
 8004018:	f7ff ffdc 	bl	8003fd4 <__sfputc_r>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d1f3      	bne.n	8004008 <__sfputs_r+0xa>
 8004020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004024 <_vfiprintf_r>:
 8004024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004028:	460c      	mov	r4, r1
 800402a:	b09d      	sub	sp, #116	; 0x74
 800402c:	4617      	mov	r7, r2
 800402e:	461d      	mov	r5, r3
 8004030:	4606      	mov	r6, r0
 8004032:	b118      	cbz	r0, 800403c <_vfiprintf_r+0x18>
 8004034:	6983      	ldr	r3, [r0, #24]
 8004036:	b90b      	cbnz	r3, 800403c <_vfiprintf_r+0x18>
 8004038:	f7ff fd96 	bl	8003b68 <__sinit>
 800403c:	4b7c      	ldr	r3, [pc, #496]	; (8004230 <_vfiprintf_r+0x20c>)
 800403e:	429c      	cmp	r4, r3
 8004040:	d158      	bne.n	80040f4 <_vfiprintf_r+0xd0>
 8004042:	6874      	ldr	r4, [r6, #4]
 8004044:	89a3      	ldrh	r3, [r4, #12]
 8004046:	0718      	lsls	r0, r3, #28
 8004048:	d55e      	bpl.n	8004108 <_vfiprintf_r+0xe4>
 800404a:	6923      	ldr	r3, [r4, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d05b      	beq.n	8004108 <_vfiprintf_r+0xe4>
 8004050:	2300      	movs	r3, #0
 8004052:	9309      	str	r3, [sp, #36]	; 0x24
 8004054:	2320      	movs	r3, #32
 8004056:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800405a:	2330      	movs	r3, #48	; 0x30
 800405c:	f04f 0b01 	mov.w	fp, #1
 8004060:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004064:	9503      	str	r5, [sp, #12]
 8004066:	46b8      	mov	r8, r7
 8004068:	4645      	mov	r5, r8
 800406a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800406e:	b10b      	cbz	r3, 8004074 <_vfiprintf_r+0x50>
 8004070:	2b25      	cmp	r3, #37	; 0x25
 8004072:	d154      	bne.n	800411e <_vfiprintf_r+0xfa>
 8004074:	ebb8 0a07 	subs.w	sl, r8, r7
 8004078:	d00b      	beq.n	8004092 <_vfiprintf_r+0x6e>
 800407a:	4653      	mov	r3, sl
 800407c:	463a      	mov	r2, r7
 800407e:	4621      	mov	r1, r4
 8004080:	4630      	mov	r0, r6
 8004082:	f7ff ffbc 	bl	8003ffe <__sfputs_r>
 8004086:	3001      	adds	r0, #1
 8004088:	f000 80c2 	beq.w	8004210 <_vfiprintf_r+0x1ec>
 800408c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800408e:	4453      	add	r3, sl
 8004090:	9309      	str	r3, [sp, #36]	; 0x24
 8004092:	f898 3000 	ldrb.w	r3, [r8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80ba 	beq.w	8004210 <_vfiprintf_r+0x1ec>
 800409c:	2300      	movs	r3, #0
 800409e:	f04f 32ff 	mov.w	r2, #4294967295
 80040a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	9307      	str	r3, [sp, #28]
 80040aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040ae:	931a      	str	r3, [sp, #104]	; 0x68
 80040b0:	46a8      	mov	r8, r5
 80040b2:	2205      	movs	r2, #5
 80040b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80040b8:	485e      	ldr	r0, [pc, #376]	; (8004234 <_vfiprintf_r+0x210>)
 80040ba:	f000 fcad 	bl	8004a18 <memchr>
 80040be:	9b04      	ldr	r3, [sp, #16]
 80040c0:	bb78      	cbnz	r0, 8004122 <_vfiprintf_r+0xfe>
 80040c2:	06d9      	lsls	r1, r3, #27
 80040c4:	bf44      	itt	mi
 80040c6:	2220      	movmi	r2, #32
 80040c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040cc:	071a      	lsls	r2, r3, #28
 80040ce:	bf44      	itt	mi
 80040d0:	222b      	movmi	r2, #43	; 0x2b
 80040d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040d6:	782a      	ldrb	r2, [r5, #0]
 80040d8:	2a2a      	cmp	r2, #42	; 0x2a
 80040da:	d02a      	beq.n	8004132 <_vfiprintf_r+0x10e>
 80040dc:	46a8      	mov	r8, r5
 80040de:	2000      	movs	r0, #0
 80040e0:	250a      	movs	r5, #10
 80040e2:	9a07      	ldr	r2, [sp, #28]
 80040e4:	4641      	mov	r1, r8
 80040e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040ea:	3b30      	subs	r3, #48	; 0x30
 80040ec:	2b09      	cmp	r3, #9
 80040ee:	d969      	bls.n	80041c4 <_vfiprintf_r+0x1a0>
 80040f0:	b360      	cbz	r0, 800414c <_vfiprintf_r+0x128>
 80040f2:	e024      	b.n	800413e <_vfiprintf_r+0x11a>
 80040f4:	4b50      	ldr	r3, [pc, #320]	; (8004238 <_vfiprintf_r+0x214>)
 80040f6:	429c      	cmp	r4, r3
 80040f8:	d101      	bne.n	80040fe <_vfiprintf_r+0xda>
 80040fa:	68b4      	ldr	r4, [r6, #8]
 80040fc:	e7a2      	b.n	8004044 <_vfiprintf_r+0x20>
 80040fe:	4b4f      	ldr	r3, [pc, #316]	; (800423c <_vfiprintf_r+0x218>)
 8004100:	429c      	cmp	r4, r3
 8004102:	bf08      	it	eq
 8004104:	68f4      	ldreq	r4, [r6, #12]
 8004106:	e79d      	b.n	8004044 <_vfiprintf_r+0x20>
 8004108:	4621      	mov	r1, r4
 800410a:	4630      	mov	r0, r6
 800410c:	f000 fae0 	bl	80046d0 <__swsetup_r>
 8004110:	2800      	cmp	r0, #0
 8004112:	d09d      	beq.n	8004050 <_vfiprintf_r+0x2c>
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	b01d      	add	sp, #116	; 0x74
 800411a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800411e:	46a8      	mov	r8, r5
 8004120:	e7a2      	b.n	8004068 <_vfiprintf_r+0x44>
 8004122:	4a44      	ldr	r2, [pc, #272]	; (8004234 <_vfiprintf_r+0x210>)
 8004124:	4645      	mov	r5, r8
 8004126:	1a80      	subs	r0, r0, r2
 8004128:	fa0b f000 	lsl.w	r0, fp, r0
 800412c:	4318      	orrs	r0, r3
 800412e:	9004      	str	r0, [sp, #16]
 8004130:	e7be      	b.n	80040b0 <_vfiprintf_r+0x8c>
 8004132:	9a03      	ldr	r2, [sp, #12]
 8004134:	1d11      	adds	r1, r2, #4
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	9103      	str	r1, [sp, #12]
 800413a:	2a00      	cmp	r2, #0
 800413c:	db01      	blt.n	8004142 <_vfiprintf_r+0x11e>
 800413e:	9207      	str	r2, [sp, #28]
 8004140:	e004      	b.n	800414c <_vfiprintf_r+0x128>
 8004142:	4252      	negs	r2, r2
 8004144:	f043 0302 	orr.w	r3, r3, #2
 8004148:	9207      	str	r2, [sp, #28]
 800414a:	9304      	str	r3, [sp, #16]
 800414c:	f898 3000 	ldrb.w	r3, [r8]
 8004150:	2b2e      	cmp	r3, #46	; 0x2e
 8004152:	d10e      	bne.n	8004172 <_vfiprintf_r+0x14e>
 8004154:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004158:	2b2a      	cmp	r3, #42	; 0x2a
 800415a:	d138      	bne.n	80041ce <_vfiprintf_r+0x1aa>
 800415c:	9b03      	ldr	r3, [sp, #12]
 800415e:	f108 0802 	add.w	r8, r8, #2
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	9203      	str	r2, [sp, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	bfb8      	it	lt
 800416c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004170:	9305      	str	r3, [sp, #20]
 8004172:	4d33      	ldr	r5, [pc, #204]	; (8004240 <_vfiprintf_r+0x21c>)
 8004174:	2203      	movs	r2, #3
 8004176:	f898 1000 	ldrb.w	r1, [r8]
 800417a:	4628      	mov	r0, r5
 800417c:	f000 fc4c 	bl	8004a18 <memchr>
 8004180:	b140      	cbz	r0, 8004194 <_vfiprintf_r+0x170>
 8004182:	2340      	movs	r3, #64	; 0x40
 8004184:	1b40      	subs	r0, r0, r5
 8004186:	fa03 f000 	lsl.w	r0, r3, r0
 800418a:	9b04      	ldr	r3, [sp, #16]
 800418c:	f108 0801 	add.w	r8, r8, #1
 8004190:	4303      	orrs	r3, r0
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	f898 1000 	ldrb.w	r1, [r8]
 8004198:	2206      	movs	r2, #6
 800419a:	482a      	ldr	r0, [pc, #168]	; (8004244 <_vfiprintf_r+0x220>)
 800419c:	f108 0701 	add.w	r7, r8, #1
 80041a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041a4:	f000 fc38 	bl	8004a18 <memchr>
 80041a8:	2800      	cmp	r0, #0
 80041aa:	d037      	beq.n	800421c <_vfiprintf_r+0x1f8>
 80041ac:	4b26      	ldr	r3, [pc, #152]	; (8004248 <_vfiprintf_r+0x224>)
 80041ae:	bb1b      	cbnz	r3, 80041f8 <_vfiprintf_r+0x1d4>
 80041b0:	9b03      	ldr	r3, [sp, #12]
 80041b2:	3307      	adds	r3, #7
 80041b4:	f023 0307 	bic.w	r3, r3, #7
 80041b8:	3308      	adds	r3, #8
 80041ba:	9303      	str	r3, [sp, #12]
 80041bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041be:	444b      	add	r3, r9
 80041c0:	9309      	str	r3, [sp, #36]	; 0x24
 80041c2:	e750      	b.n	8004066 <_vfiprintf_r+0x42>
 80041c4:	fb05 3202 	mla	r2, r5, r2, r3
 80041c8:	2001      	movs	r0, #1
 80041ca:	4688      	mov	r8, r1
 80041cc:	e78a      	b.n	80040e4 <_vfiprintf_r+0xc0>
 80041ce:	2300      	movs	r3, #0
 80041d0:	250a      	movs	r5, #10
 80041d2:	4619      	mov	r1, r3
 80041d4:	f108 0801 	add.w	r8, r8, #1
 80041d8:	9305      	str	r3, [sp, #20]
 80041da:	4640      	mov	r0, r8
 80041dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041e0:	3a30      	subs	r2, #48	; 0x30
 80041e2:	2a09      	cmp	r2, #9
 80041e4:	d903      	bls.n	80041ee <_vfiprintf_r+0x1ca>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0c3      	beq.n	8004172 <_vfiprintf_r+0x14e>
 80041ea:	9105      	str	r1, [sp, #20]
 80041ec:	e7c1      	b.n	8004172 <_vfiprintf_r+0x14e>
 80041ee:	fb05 2101 	mla	r1, r5, r1, r2
 80041f2:	2301      	movs	r3, #1
 80041f4:	4680      	mov	r8, r0
 80041f6:	e7f0      	b.n	80041da <_vfiprintf_r+0x1b6>
 80041f8:	ab03      	add	r3, sp, #12
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	4622      	mov	r2, r4
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <_vfiprintf_r+0x228>)
 8004200:	a904      	add	r1, sp, #16
 8004202:	4630      	mov	r0, r6
 8004204:	f3af 8000 	nop.w
 8004208:	f1b0 3fff 	cmp.w	r0, #4294967295
 800420c:	4681      	mov	r9, r0
 800420e:	d1d5      	bne.n	80041bc <_vfiprintf_r+0x198>
 8004210:	89a3      	ldrh	r3, [r4, #12]
 8004212:	065b      	lsls	r3, r3, #25
 8004214:	f53f af7e 	bmi.w	8004114 <_vfiprintf_r+0xf0>
 8004218:	9809      	ldr	r0, [sp, #36]	; 0x24
 800421a:	e77d      	b.n	8004118 <_vfiprintf_r+0xf4>
 800421c:	ab03      	add	r3, sp, #12
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	4622      	mov	r2, r4
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <_vfiprintf_r+0x228>)
 8004224:	a904      	add	r1, sp, #16
 8004226:	4630      	mov	r0, r6
 8004228:	f000 f888 	bl	800433c <_printf_i>
 800422c:	e7ec      	b.n	8004208 <_vfiprintf_r+0x1e4>
 800422e:	bf00      	nop
 8004230:	08004e0c 	.word	0x08004e0c
 8004234:	08004e4c 	.word	0x08004e4c
 8004238:	08004e2c 	.word	0x08004e2c
 800423c:	08004dec 	.word	0x08004dec
 8004240:	08004e52 	.word	0x08004e52
 8004244:	08004e56 	.word	0x08004e56
 8004248:	00000000 	.word	0x00000000
 800424c:	08003fff 	.word	0x08003fff

08004250 <_printf_common>:
 8004250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004254:	4691      	mov	r9, r2
 8004256:	461f      	mov	r7, r3
 8004258:	688a      	ldr	r2, [r1, #8]
 800425a:	690b      	ldr	r3, [r1, #16]
 800425c:	4606      	mov	r6, r0
 800425e:	4293      	cmp	r3, r2
 8004260:	bfb8      	it	lt
 8004262:	4613      	movlt	r3, r2
 8004264:	f8c9 3000 	str.w	r3, [r9]
 8004268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800426c:	460c      	mov	r4, r1
 800426e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004272:	b112      	cbz	r2, 800427a <_printf_common+0x2a>
 8004274:	3301      	adds	r3, #1
 8004276:	f8c9 3000 	str.w	r3, [r9]
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	0699      	lsls	r1, r3, #26
 800427e:	bf42      	ittt	mi
 8004280:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004284:	3302      	addmi	r3, #2
 8004286:	f8c9 3000 	strmi.w	r3, [r9]
 800428a:	6825      	ldr	r5, [r4, #0]
 800428c:	f015 0506 	ands.w	r5, r5, #6
 8004290:	d107      	bne.n	80042a2 <_printf_common+0x52>
 8004292:	f104 0a19 	add.w	sl, r4, #25
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	f8d9 2000 	ldr.w	r2, [r9]
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	42ab      	cmp	r3, r5
 80042a0:	dc29      	bgt.n	80042f6 <_printf_common+0xa6>
 80042a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80042a6:	6822      	ldr	r2, [r4, #0]
 80042a8:	3300      	adds	r3, #0
 80042aa:	bf18      	it	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	0692      	lsls	r2, r2, #26
 80042b0:	d42e      	bmi.n	8004310 <_printf_common+0xc0>
 80042b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042b6:	4639      	mov	r1, r7
 80042b8:	4630      	mov	r0, r6
 80042ba:	47c0      	blx	r8
 80042bc:	3001      	adds	r0, #1
 80042be:	d021      	beq.n	8004304 <_printf_common+0xb4>
 80042c0:	6823      	ldr	r3, [r4, #0]
 80042c2:	68e5      	ldr	r5, [r4, #12]
 80042c4:	f003 0306 	and.w	r3, r3, #6
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	bf18      	it	ne
 80042cc:	2500      	movne	r5, #0
 80042ce:	f8d9 2000 	ldr.w	r2, [r9]
 80042d2:	f04f 0900 	mov.w	r9, #0
 80042d6:	bf08      	it	eq
 80042d8:	1aad      	subeq	r5, r5, r2
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	6922      	ldr	r2, [r4, #16]
 80042de:	bf08      	it	eq
 80042e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bfc4      	itt	gt
 80042e8:	1a9b      	subgt	r3, r3, r2
 80042ea:	18ed      	addgt	r5, r5, r3
 80042ec:	341a      	adds	r4, #26
 80042ee:	454d      	cmp	r5, r9
 80042f0:	d11a      	bne.n	8004328 <_printf_common+0xd8>
 80042f2:	2000      	movs	r0, #0
 80042f4:	e008      	b.n	8004308 <_printf_common+0xb8>
 80042f6:	2301      	movs	r3, #1
 80042f8:	4652      	mov	r2, sl
 80042fa:	4639      	mov	r1, r7
 80042fc:	4630      	mov	r0, r6
 80042fe:	47c0      	blx	r8
 8004300:	3001      	adds	r0, #1
 8004302:	d103      	bne.n	800430c <_printf_common+0xbc>
 8004304:	f04f 30ff 	mov.w	r0, #4294967295
 8004308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800430c:	3501      	adds	r5, #1
 800430e:	e7c2      	b.n	8004296 <_printf_common+0x46>
 8004310:	2030      	movs	r0, #48	; 0x30
 8004312:	18e1      	adds	r1, r4, r3
 8004314:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800431e:	4422      	add	r2, r4
 8004320:	3302      	adds	r3, #2
 8004322:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004326:	e7c4      	b.n	80042b2 <_printf_common+0x62>
 8004328:	2301      	movs	r3, #1
 800432a:	4622      	mov	r2, r4
 800432c:	4639      	mov	r1, r7
 800432e:	4630      	mov	r0, r6
 8004330:	47c0      	blx	r8
 8004332:	3001      	adds	r0, #1
 8004334:	d0e6      	beq.n	8004304 <_printf_common+0xb4>
 8004336:	f109 0901 	add.w	r9, r9, #1
 800433a:	e7d8      	b.n	80042ee <_printf_common+0x9e>

0800433c <_printf_i>:
 800433c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004340:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004344:	460c      	mov	r4, r1
 8004346:	7e09      	ldrb	r1, [r1, #24]
 8004348:	b085      	sub	sp, #20
 800434a:	296e      	cmp	r1, #110	; 0x6e
 800434c:	4617      	mov	r7, r2
 800434e:	4606      	mov	r6, r0
 8004350:	4698      	mov	r8, r3
 8004352:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004354:	f000 80b3 	beq.w	80044be <_printf_i+0x182>
 8004358:	d822      	bhi.n	80043a0 <_printf_i+0x64>
 800435a:	2963      	cmp	r1, #99	; 0x63
 800435c:	d036      	beq.n	80043cc <_printf_i+0x90>
 800435e:	d80a      	bhi.n	8004376 <_printf_i+0x3a>
 8004360:	2900      	cmp	r1, #0
 8004362:	f000 80b9 	beq.w	80044d8 <_printf_i+0x19c>
 8004366:	2958      	cmp	r1, #88	; 0x58
 8004368:	f000 8083 	beq.w	8004472 <_printf_i+0x136>
 800436c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004370:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004374:	e032      	b.n	80043dc <_printf_i+0xa0>
 8004376:	2964      	cmp	r1, #100	; 0x64
 8004378:	d001      	beq.n	800437e <_printf_i+0x42>
 800437a:	2969      	cmp	r1, #105	; 0x69
 800437c:	d1f6      	bne.n	800436c <_printf_i+0x30>
 800437e:	6820      	ldr	r0, [r4, #0]
 8004380:	6813      	ldr	r3, [r2, #0]
 8004382:	0605      	lsls	r5, r0, #24
 8004384:	f103 0104 	add.w	r1, r3, #4
 8004388:	d52a      	bpl.n	80043e0 <_printf_i+0xa4>
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6011      	str	r1, [r2, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	da03      	bge.n	800439a <_printf_i+0x5e>
 8004392:	222d      	movs	r2, #45	; 0x2d
 8004394:	425b      	negs	r3, r3
 8004396:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800439a:	486f      	ldr	r0, [pc, #444]	; (8004558 <_printf_i+0x21c>)
 800439c:	220a      	movs	r2, #10
 800439e:	e039      	b.n	8004414 <_printf_i+0xd8>
 80043a0:	2973      	cmp	r1, #115	; 0x73
 80043a2:	f000 809d 	beq.w	80044e0 <_printf_i+0x1a4>
 80043a6:	d808      	bhi.n	80043ba <_printf_i+0x7e>
 80043a8:	296f      	cmp	r1, #111	; 0x6f
 80043aa:	d020      	beq.n	80043ee <_printf_i+0xb2>
 80043ac:	2970      	cmp	r1, #112	; 0x70
 80043ae:	d1dd      	bne.n	800436c <_printf_i+0x30>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	f043 0320 	orr.w	r3, r3, #32
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	e003      	b.n	80043c2 <_printf_i+0x86>
 80043ba:	2975      	cmp	r1, #117	; 0x75
 80043bc:	d017      	beq.n	80043ee <_printf_i+0xb2>
 80043be:	2978      	cmp	r1, #120	; 0x78
 80043c0:	d1d4      	bne.n	800436c <_printf_i+0x30>
 80043c2:	2378      	movs	r3, #120	; 0x78
 80043c4:	4865      	ldr	r0, [pc, #404]	; (800455c <_printf_i+0x220>)
 80043c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ca:	e055      	b.n	8004478 <_printf_i+0x13c>
 80043cc:	6813      	ldr	r3, [r2, #0]
 80043ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d2:	1d19      	adds	r1, r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6011      	str	r1, [r2, #0]
 80043d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043dc:	2301      	movs	r3, #1
 80043de:	e08c      	b.n	80044fa <_printf_i+0x1be>
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043e6:	6011      	str	r1, [r2, #0]
 80043e8:	bf18      	it	ne
 80043ea:	b21b      	sxthne	r3, r3
 80043ec:	e7cf      	b.n	800438e <_printf_i+0x52>
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	6825      	ldr	r5, [r4, #0]
 80043f2:	1d18      	adds	r0, r3, #4
 80043f4:	6010      	str	r0, [r2, #0]
 80043f6:	0628      	lsls	r0, r5, #24
 80043f8:	d501      	bpl.n	80043fe <_printf_i+0xc2>
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	e002      	b.n	8004404 <_printf_i+0xc8>
 80043fe:	0668      	lsls	r0, r5, #25
 8004400:	d5fb      	bpl.n	80043fa <_printf_i+0xbe>
 8004402:	881b      	ldrh	r3, [r3, #0]
 8004404:	296f      	cmp	r1, #111	; 0x6f
 8004406:	bf14      	ite	ne
 8004408:	220a      	movne	r2, #10
 800440a:	2208      	moveq	r2, #8
 800440c:	4852      	ldr	r0, [pc, #328]	; (8004558 <_printf_i+0x21c>)
 800440e:	2100      	movs	r1, #0
 8004410:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004414:	6865      	ldr	r5, [r4, #4]
 8004416:	2d00      	cmp	r5, #0
 8004418:	60a5      	str	r5, [r4, #8]
 800441a:	f2c0 8095 	blt.w	8004548 <_printf_i+0x20c>
 800441e:	6821      	ldr	r1, [r4, #0]
 8004420:	f021 0104 	bic.w	r1, r1, #4
 8004424:	6021      	str	r1, [r4, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d13d      	bne.n	80044a6 <_printf_i+0x16a>
 800442a:	2d00      	cmp	r5, #0
 800442c:	f040 808e 	bne.w	800454c <_printf_i+0x210>
 8004430:	4665      	mov	r5, ip
 8004432:	2a08      	cmp	r2, #8
 8004434:	d10b      	bne.n	800444e <_printf_i+0x112>
 8004436:	6823      	ldr	r3, [r4, #0]
 8004438:	07db      	lsls	r3, r3, #31
 800443a:	d508      	bpl.n	800444e <_printf_i+0x112>
 800443c:	6923      	ldr	r3, [r4, #16]
 800443e:	6862      	ldr	r2, [r4, #4]
 8004440:	429a      	cmp	r2, r3
 8004442:	bfde      	ittt	le
 8004444:	2330      	movle	r3, #48	; 0x30
 8004446:	f805 3c01 	strble.w	r3, [r5, #-1]
 800444a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800444e:	ebac 0305 	sub.w	r3, ip, r5
 8004452:	6123      	str	r3, [r4, #16]
 8004454:	f8cd 8000 	str.w	r8, [sp]
 8004458:	463b      	mov	r3, r7
 800445a:	aa03      	add	r2, sp, #12
 800445c:	4621      	mov	r1, r4
 800445e:	4630      	mov	r0, r6
 8004460:	f7ff fef6 	bl	8004250 <_printf_common>
 8004464:	3001      	adds	r0, #1
 8004466:	d14d      	bne.n	8004504 <_printf_i+0x1c8>
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	b005      	add	sp, #20
 800446e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004472:	4839      	ldr	r0, [pc, #228]	; (8004558 <_printf_i+0x21c>)
 8004474:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004478:	6813      	ldr	r3, [r2, #0]
 800447a:	6821      	ldr	r1, [r4, #0]
 800447c:	1d1d      	adds	r5, r3, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6015      	str	r5, [r2, #0]
 8004482:	060a      	lsls	r2, r1, #24
 8004484:	d50b      	bpl.n	800449e <_printf_i+0x162>
 8004486:	07ca      	lsls	r2, r1, #31
 8004488:	bf44      	itt	mi
 800448a:	f041 0120 	orrmi.w	r1, r1, #32
 800448e:	6021      	strmi	r1, [r4, #0]
 8004490:	b91b      	cbnz	r3, 800449a <_printf_i+0x15e>
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	f022 0220 	bic.w	r2, r2, #32
 8004498:	6022      	str	r2, [r4, #0]
 800449a:	2210      	movs	r2, #16
 800449c:	e7b7      	b.n	800440e <_printf_i+0xd2>
 800449e:	064d      	lsls	r5, r1, #25
 80044a0:	bf48      	it	mi
 80044a2:	b29b      	uxthmi	r3, r3
 80044a4:	e7ef      	b.n	8004486 <_printf_i+0x14a>
 80044a6:	4665      	mov	r5, ip
 80044a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80044ac:	fb02 3311 	mls	r3, r2, r1, r3
 80044b0:	5cc3      	ldrb	r3, [r0, r3]
 80044b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044b6:	460b      	mov	r3, r1
 80044b8:	2900      	cmp	r1, #0
 80044ba:	d1f5      	bne.n	80044a8 <_printf_i+0x16c>
 80044bc:	e7b9      	b.n	8004432 <_printf_i+0xf6>
 80044be:	6813      	ldr	r3, [r2, #0]
 80044c0:	6825      	ldr	r5, [r4, #0]
 80044c2:	1d18      	adds	r0, r3, #4
 80044c4:	6961      	ldr	r1, [r4, #20]
 80044c6:	6010      	str	r0, [r2, #0]
 80044c8:	0628      	lsls	r0, r5, #24
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	d501      	bpl.n	80044d2 <_printf_i+0x196>
 80044ce:	6019      	str	r1, [r3, #0]
 80044d0:	e002      	b.n	80044d8 <_printf_i+0x19c>
 80044d2:	066a      	lsls	r2, r5, #25
 80044d4:	d5fb      	bpl.n	80044ce <_printf_i+0x192>
 80044d6:	8019      	strh	r1, [r3, #0]
 80044d8:	2300      	movs	r3, #0
 80044da:	4665      	mov	r5, ip
 80044dc:	6123      	str	r3, [r4, #16]
 80044de:	e7b9      	b.n	8004454 <_printf_i+0x118>
 80044e0:	6813      	ldr	r3, [r2, #0]
 80044e2:	1d19      	adds	r1, r3, #4
 80044e4:	6011      	str	r1, [r2, #0]
 80044e6:	681d      	ldr	r5, [r3, #0]
 80044e8:	6862      	ldr	r2, [r4, #4]
 80044ea:	2100      	movs	r1, #0
 80044ec:	4628      	mov	r0, r5
 80044ee:	f000 fa93 	bl	8004a18 <memchr>
 80044f2:	b108      	cbz	r0, 80044f8 <_printf_i+0x1bc>
 80044f4:	1b40      	subs	r0, r0, r5
 80044f6:	6060      	str	r0, [r4, #4]
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	6123      	str	r3, [r4, #16]
 80044fc:	2300      	movs	r3, #0
 80044fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004502:	e7a7      	b.n	8004454 <_printf_i+0x118>
 8004504:	6923      	ldr	r3, [r4, #16]
 8004506:	462a      	mov	r2, r5
 8004508:	4639      	mov	r1, r7
 800450a:	4630      	mov	r0, r6
 800450c:	47c0      	blx	r8
 800450e:	3001      	adds	r0, #1
 8004510:	d0aa      	beq.n	8004468 <_printf_i+0x12c>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	079b      	lsls	r3, r3, #30
 8004516:	d413      	bmi.n	8004540 <_printf_i+0x204>
 8004518:	68e0      	ldr	r0, [r4, #12]
 800451a:	9b03      	ldr	r3, [sp, #12]
 800451c:	4298      	cmp	r0, r3
 800451e:	bfb8      	it	lt
 8004520:	4618      	movlt	r0, r3
 8004522:	e7a3      	b.n	800446c <_printf_i+0x130>
 8004524:	2301      	movs	r3, #1
 8004526:	464a      	mov	r2, r9
 8004528:	4639      	mov	r1, r7
 800452a:	4630      	mov	r0, r6
 800452c:	47c0      	blx	r8
 800452e:	3001      	adds	r0, #1
 8004530:	d09a      	beq.n	8004468 <_printf_i+0x12c>
 8004532:	3501      	adds	r5, #1
 8004534:	68e3      	ldr	r3, [r4, #12]
 8004536:	9a03      	ldr	r2, [sp, #12]
 8004538:	1a9b      	subs	r3, r3, r2
 800453a:	42ab      	cmp	r3, r5
 800453c:	dcf2      	bgt.n	8004524 <_printf_i+0x1e8>
 800453e:	e7eb      	b.n	8004518 <_printf_i+0x1dc>
 8004540:	2500      	movs	r5, #0
 8004542:	f104 0919 	add.w	r9, r4, #25
 8004546:	e7f5      	b.n	8004534 <_printf_i+0x1f8>
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1ac      	bne.n	80044a6 <_printf_i+0x16a>
 800454c:	7803      	ldrb	r3, [r0, #0]
 800454e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004552:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004556:	e76c      	b.n	8004432 <_printf_i+0xf6>
 8004558:	08004e5d 	.word	0x08004e5d
 800455c:	08004e6e 	.word	0x08004e6e

08004560 <_sbrk_r>:
 8004560:	b538      	push	{r3, r4, r5, lr}
 8004562:	2300      	movs	r3, #0
 8004564:	4c05      	ldr	r4, [pc, #20]	; (800457c <_sbrk_r+0x1c>)
 8004566:	4605      	mov	r5, r0
 8004568:	4608      	mov	r0, r1
 800456a:	6023      	str	r3, [r4, #0]
 800456c:	f7fc ff2c 	bl	80013c8 <_sbrk>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_sbrk_r+0x1a>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	b103      	cbz	r3, 800457a <_sbrk_r+0x1a>
 8004578:	602b      	str	r3, [r5, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	200001ac 	.word	0x200001ac

08004580 <__sread>:
 8004580:	b510      	push	{r4, lr}
 8004582:	460c      	mov	r4, r1
 8004584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004588:	f000 faec 	bl	8004b64 <_read_r>
 800458c:	2800      	cmp	r0, #0
 800458e:	bfab      	itete	ge
 8004590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004592:	89a3      	ldrhlt	r3, [r4, #12]
 8004594:	181b      	addge	r3, r3, r0
 8004596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800459a:	bfac      	ite	ge
 800459c:	6563      	strge	r3, [r4, #84]	; 0x54
 800459e:	81a3      	strhlt	r3, [r4, #12]
 80045a0:	bd10      	pop	{r4, pc}

080045a2 <__swrite>:
 80045a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a6:	461f      	mov	r7, r3
 80045a8:	898b      	ldrh	r3, [r1, #12]
 80045aa:	4605      	mov	r5, r0
 80045ac:	05db      	lsls	r3, r3, #23
 80045ae:	460c      	mov	r4, r1
 80045b0:	4616      	mov	r6, r2
 80045b2:	d505      	bpl.n	80045c0 <__swrite+0x1e>
 80045b4:	2302      	movs	r3, #2
 80045b6:	2200      	movs	r2, #0
 80045b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045bc:	f000 f9b6 	bl	800492c <_lseek_r>
 80045c0:	89a3      	ldrh	r3, [r4, #12]
 80045c2:	4632      	mov	r2, r6
 80045c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045c8:	81a3      	strh	r3, [r4, #12]
 80045ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ce:	463b      	mov	r3, r7
 80045d0:	4628      	mov	r0, r5
 80045d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045d6:	f000 b869 	b.w	80046ac <_write_r>

080045da <__sseek>:
 80045da:	b510      	push	{r4, lr}
 80045dc:	460c      	mov	r4, r1
 80045de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e2:	f000 f9a3 	bl	800492c <_lseek_r>
 80045e6:	1c43      	adds	r3, r0, #1
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	bf15      	itete	ne
 80045ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80045ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045f6:	81a3      	strheq	r3, [r4, #12]
 80045f8:	bf18      	it	ne
 80045fa:	81a3      	strhne	r3, [r4, #12]
 80045fc:	bd10      	pop	{r4, pc}

080045fe <__sclose>:
 80045fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004602:	f000 b8d3 	b.w	80047ac <_close_r>
	...

08004608 <__swbuf_r>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	460e      	mov	r6, r1
 800460c:	4614      	mov	r4, r2
 800460e:	4605      	mov	r5, r0
 8004610:	b118      	cbz	r0, 800461a <__swbuf_r+0x12>
 8004612:	6983      	ldr	r3, [r0, #24]
 8004614:	b90b      	cbnz	r3, 800461a <__swbuf_r+0x12>
 8004616:	f7ff faa7 	bl	8003b68 <__sinit>
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <__swbuf_r+0x98>)
 800461c:	429c      	cmp	r4, r3
 800461e:	d12a      	bne.n	8004676 <__swbuf_r+0x6e>
 8004620:	686c      	ldr	r4, [r5, #4]
 8004622:	69a3      	ldr	r3, [r4, #24]
 8004624:	60a3      	str	r3, [r4, #8]
 8004626:	89a3      	ldrh	r3, [r4, #12]
 8004628:	071a      	lsls	r2, r3, #28
 800462a:	d52e      	bpl.n	800468a <__swbuf_r+0x82>
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	b363      	cbz	r3, 800468a <__swbuf_r+0x82>
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	6820      	ldr	r0, [r4, #0]
 8004634:	b2f6      	uxtb	r6, r6
 8004636:	1ac0      	subs	r0, r0, r3
 8004638:	6963      	ldr	r3, [r4, #20]
 800463a:	4637      	mov	r7, r6
 800463c:	4283      	cmp	r3, r0
 800463e:	dc04      	bgt.n	800464a <__swbuf_r+0x42>
 8004640:	4621      	mov	r1, r4
 8004642:	4628      	mov	r0, r5
 8004644:	f000 f948 	bl	80048d8 <_fflush_r>
 8004648:	bb28      	cbnz	r0, 8004696 <__swbuf_r+0x8e>
 800464a:	68a3      	ldr	r3, [r4, #8]
 800464c:	3001      	adds	r0, #1
 800464e:	3b01      	subs	r3, #1
 8004650:	60a3      	str	r3, [r4, #8]
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	6022      	str	r2, [r4, #0]
 8004658:	701e      	strb	r6, [r3, #0]
 800465a:	6963      	ldr	r3, [r4, #20]
 800465c:	4283      	cmp	r3, r0
 800465e:	d004      	beq.n	800466a <__swbuf_r+0x62>
 8004660:	89a3      	ldrh	r3, [r4, #12]
 8004662:	07db      	lsls	r3, r3, #31
 8004664:	d519      	bpl.n	800469a <__swbuf_r+0x92>
 8004666:	2e0a      	cmp	r6, #10
 8004668:	d117      	bne.n	800469a <__swbuf_r+0x92>
 800466a:	4621      	mov	r1, r4
 800466c:	4628      	mov	r0, r5
 800466e:	f000 f933 	bl	80048d8 <_fflush_r>
 8004672:	b190      	cbz	r0, 800469a <__swbuf_r+0x92>
 8004674:	e00f      	b.n	8004696 <__swbuf_r+0x8e>
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <__swbuf_r+0x9c>)
 8004678:	429c      	cmp	r4, r3
 800467a:	d101      	bne.n	8004680 <__swbuf_r+0x78>
 800467c:	68ac      	ldr	r4, [r5, #8]
 800467e:	e7d0      	b.n	8004622 <__swbuf_r+0x1a>
 8004680:	4b09      	ldr	r3, [pc, #36]	; (80046a8 <__swbuf_r+0xa0>)
 8004682:	429c      	cmp	r4, r3
 8004684:	bf08      	it	eq
 8004686:	68ec      	ldreq	r4, [r5, #12]
 8004688:	e7cb      	b.n	8004622 <__swbuf_r+0x1a>
 800468a:	4621      	mov	r1, r4
 800468c:	4628      	mov	r0, r5
 800468e:	f000 f81f 	bl	80046d0 <__swsetup_r>
 8004692:	2800      	cmp	r0, #0
 8004694:	d0cc      	beq.n	8004630 <__swbuf_r+0x28>
 8004696:	f04f 37ff 	mov.w	r7, #4294967295
 800469a:	4638      	mov	r0, r7
 800469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800469e:	bf00      	nop
 80046a0:	08004e0c 	.word	0x08004e0c
 80046a4:	08004e2c 	.word	0x08004e2c
 80046a8:	08004dec 	.word	0x08004dec

080046ac <_write_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4605      	mov	r5, r0
 80046b0:	4608      	mov	r0, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	2200      	movs	r2, #0
 80046b6:	4c05      	ldr	r4, [pc, #20]	; (80046cc <_write_r+0x20>)
 80046b8:	6022      	str	r2, [r4, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f7fc fe37 	bl	800132e <_write>
 80046c0:	1c43      	adds	r3, r0, #1
 80046c2:	d102      	bne.n	80046ca <_write_r+0x1e>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	b103      	cbz	r3, 80046ca <_write_r+0x1e>
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	200001ac 	.word	0x200001ac

080046d0 <__swsetup_r>:
 80046d0:	4b32      	ldr	r3, [pc, #200]	; (800479c <__swsetup_r+0xcc>)
 80046d2:	b570      	push	{r4, r5, r6, lr}
 80046d4:	681d      	ldr	r5, [r3, #0]
 80046d6:	4606      	mov	r6, r0
 80046d8:	460c      	mov	r4, r1
 80046da:	b125      	cbz	r5, 80046e6 <__swsetup_r+0x16>
 80046dc:	69ab      	ldr	r3, [r5, #24]
 80046de:	b913      	cbnz	r3, 80046e6 <__swsetup_r+0x16>
 80046e0:	4628      	mov	r0, r5
 80046e2:	f7ff fa41 	bl	8003b68 <__sinit>
 80046e6:	4b2e      	ldr	r3, [pc, #184]	; (80047a0 <__swsetup_r+0xd0>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	d10f      	bne.n	800470c <__swsetup_r+0x3c>
 80046ec:	686c      	ldr	r4, [r5, #4]
 80046ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	0715      	lsls	r5, r2, #28
 80046f6:	d42c      	bmi.n	8004752 <__swsetup_r+0x82>
 80046f8:	06d0      	lsls	r0, r2, #27
 80046fa:	d411      	bmi.n	8004720 <__swsetup_r+0x50>
 80046fc:	2209      	movs	r2, #9
 80046fe:	6032      	str	r2, [r6, #0]
 8004700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004704:	81a3      	strh	r3, [r4, #12]
 8004706:	f04f 30ff 	mov.w	r0, #4294967295
 800470a:	e03e      	b.n	800478a <__swsetup_r+0xba>
 800470c:	4b25      	ldr	r3, [pc, #148]	; (80047a4 <__swsetup_r+0xd4>)
 800470e:	429c      	cmp	r4, r3
 8004710:	d101      	bne.n	8004716 <__swsetup_r+0x46>
 8004712:	68ac      	ldr	r4, [r5, #8]
 8004714:	e7eb      	b.n	80046ee <__swsetup_r+0x1e>
 8004716:	4b24      	ldr	r3, [pc, #144]	; (80047a8 <__swsetup_r+0xd8>)
 8004718:	429c      	cmp	r4, r3
 800471a:	bf08      	it	eq
 800471c:	68ec      	ldreq	r4, [r5, #12]
 800471e:	e7e6      	b.n	80046ee <__swsetup_r+0x1e>
 8004720:	0751      	lsls	r1, r2, #29
 8004722:	d512      	bpl.n	800474a <__swsetup_r+0x7a>
 8004724:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004726:	b141      	cbz	r1, 800473a <__swsetup_r+0x6a>
 8004728:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800472c:	4299      	cmp	r1, r3
 800472e:	d002      	beq.n	8004736 <__swsetup_r+0x66>
 8004730:	4630      	mov	r0, r6
 8004732:	f000 f9a5 	bl	8004a80 <_free_r>
 8004736:	2300      	movs	r3, #0
 8004738:	6363      	str	r3, [r4, #52]	; 0x34
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004740:	81a3      	strh	r3, [r4, #12]
 8004742:	2300      	movs	r3, #0
 8004744:	6063      	str	r3, [r4, #4]
 8004746:	6923      	ldr	r3, [r4, #16]
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	f043 0308 	orr.w	r3, r3, #8
 8004750:	81a3      	strh	r3, [r4, #12]
 8004752:	6923      	ldr	r3, [r4, #16]
 8004754:	b94b      	cbnz	r3, 800476a <__swsetup_r+0x9a>
 8004756:	89a3      	ldrh	r3, [r4, #12]
 8004758:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800475c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004760:	d003      	beq.n	800476a <__swsetup_r+0x9a>
 8004762:	4621      	mov	r1, r4
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f917 	bl	8004998 <__smakebuf_r>
 800476a:	89a2      	ldrh	r2, [r4, #12]
 800476c:	f012 0301 	ands.w	r3, r2, #1
 8004770:	d00c      	beq.n	800478c <__swsetup_r+0xbc>
 8004772:	2300      	movs	r3, #0
 8004774:	60a3      	str	r3, [r4, #8]
 8004776:	6963      	ldr	r3, [r4, #20]
 8004778:	425b      	negs	r3, r3
 800477a:	61a3      	str	r3, [r4, #24]
 800477c:	6923      	ldr	r3, [r4, #16]
 800477e:	b953      	cbnz	r3, 8004796 <__swsetup_r+0xc6>
 8004780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004784:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004788:	d1ba      	bne.n	8004700 <__swsetup_r+0x30>
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	0792      	lsls	r2, r2, #30
 800478e:	bf58      	it	pl
 8004790:	6963      	ldrpl	r3, [r4, #20]
 8004792:	60a3      	str	r3, [r4, #8]
 8004794:	e7f2      	b.n	800477c <__swsetup_r+0xac>
 8004796:	2000      	movs	r0, #0
 8004798:	e7f7      	b.n	800478a <__swsetup_r+0xba>
 800479a:	bf00      	nop
 800479c:	2000000c 	.word	0x2000000c
 80047a0:	08004e0c 	.word	0x08004e0c
 80047a4:	08004e2c 	.word	0x08004e2c
 80047a8:	08004dec 	.word	0x08004dec

080047ac <_close_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	2300      	movs	r3, #0
 80047b0:	4c05      	ldr	r4, [pc, #20]	; (80047c8 <_close_r+0x1c>)
 80047b2:	4605      	mov	r5, r0
 80047b4:	4608      	mov	r0, r1
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	f7fc fdd5 	bl	8001366 <_close>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d102      	bne.n	80047c6 <_close_r+0x1a>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	b103      	cbz	r3, 80047c6 <_close_r+0x1a>
 80047c4:	602b      	str	r3, [r5, #0]
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	200001ac 	.word	0x200001ac

080047cc <__sflush_r>:
 80047cc:	898a      	ldrh	r2, [r1, #12]
 80047ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d2:	4605      	mov	r5, r0
 80047d4:	0710      	lsls	r0, r2, #28
 80047d6:	460c      	mov	r4, r1
 80047d8:	d458      	bmi.n	800488c <__sflush_r+0xc0>
 80047da:	684b      	ldr	r3, [r1, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dc05      	bgt.n	80047ec <__sflush_r+0x20>
 80047e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	dc02      	bgt.n	80047ec <__sflush_r+0x20>
 80047e6:	2000      	movs	r0, #0
 80047e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ee:	2e00      	cmp	r6, #0
 80047f0:	d0f9      	beq.n	80047e6 <__sflush_r+0x1a>
 80047f2:	2300      	movs	r3, #0
 80047f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047f8:	682f      	ldr	r7, [r5, #0]
 80047fa:	6a21      	ldr	r1, [r4, #32]
 80047fc:	602b      	str	r3, [r5, #0]
 80047fe:	d032      	beq.n	8004866 <__sflush_r+0x9a>
 8004800:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	075a      	lsls	r2, r3, #29
 8004806:	d505      	bpl.n	8004814 <__sflush_r+0x48>
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	1ac0      	subs	r0, r0, r3
 800480c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800480e:	b10b      	cbz	r3, 8004814 <__sflush_r+0x48>
 8004810:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004812:	1ac0      	subs	r0, r0, r3
 8004814:	2300      	movs	r3, #0
 8004816:	4602      	mov	r2, r0
 8004818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800481a:	6a21      	ldr	r1, [r4, #32]
 800481c:	4628      	mov	r0, r5
 800481e:	47b0      	blx	r6
 8004820:	1c43      	adds	r3, r0, #1
 8004822:	89a3      	ldrh	r3, [r4, #12]
 8004824:	d106      	bne.n	8004834 <__sflush_r+0x68>
 8004826:	6829      	ldr	r1, [r5, #0]
 8004828:	291d      	cmp	r1, #29
 800482a:	d848      	bhi.n	80048be <__sflush_r+0xf2>
 800482c:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <__sflush_r+0x108>)
 800482e:	40ca      	lsrs	r2, r1
 8004830:	07d6      	lsls	r6, r2, #31
 8004832:	d544      	bpl.n	80048be <__sflush_r+0xf2>
 8004834:	2200      	movs	r2, #0
 8004836:	6062      	str	r2, [r4, #4]
 8004838:	6922      	ldr	r2, [r4, #16]
 800483a:	04d9      	lsls	r1, r3, #19
 800483c:	6022      	str	r2, [r4, #0]
 800483e:	d504      	bpl.n	800484a <__sflush_r+0x7e>
 8004840:	1c42      	adds	r2, r0, #1
 8004842:	d101      	bne.n	8004848 <__sflush_r+0x7c>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b903      	cbnz	r3, 800484a <__sflush_r+0x7e>
 8004848:	6560      	str	r0, [r4, #84]	; 0x54
 800484a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484c:	602f      	str	r7, [r5, #0]
 800484e:	2900      	cmp	r1, #0
 8004850:	d0c9      	beq.n	80047e6 <__sflush_r+0x1a>
 8004852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004856:	4299      	cmp	r1, r3
 8004858:	d002      	beq.n	8004860 <__sflush_r+0x94>
 800485a:	4628      	mov	r0, r5
 800485c:	f000 f910 	bl	8004a80 <_free_r>
 8004860:	2000      	movs	r0, #0
 8004862:	6360      	str	r0, [r4, #52]	; 0x34
 8004864:	e7c0      	b.n	80047e8 <__sflush_r+0x1c>
 8004866:	2301      	movs	r3, #1
 8004868:	4628      	mov	r0, r5
 800486a:	47b0      	blx	r6
 800486c:	1c41      	adds	r1, r0, #1
 800486e:	d1c8      	bne.n	8004802 <__sflush_r+0x36>
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0c5      	beq.n	8004802 <__sflush_r+0x36>
 8004876:	2b1d      	cmp	r3, #29
 8004878:	d001      	beq.n	800487e <__sflush_r+0xb2>
 800487a:	2b16      	cmp	r3, #22
 800487c:	d101      	bne.n	8004882 <__sflush_r+0xb6>
 800487e:	602f      	str	r7, [r5, #0]
 8004880:	e7b1      	b.n	80047e6 <__sflush_r+0x1a>
 8004882:	89a3      	ldrh	r3, [r4, #12]
 8004884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004888:	81a3      	strh	r3, [r4, #12]
 800488a:	e7ad      	b.n	80047e8 <__sflush_r+0x1c>
 800488c:	690f      	ldr	r7, [r1, #16]
 800488e:	2f00      	cmp	r7, #0
 8004890:	d0a9      	beq.n	80047e6 <__sflush_r+0x1a>
 8004892:	0793      	lsls	r3, r2, #30
 8004894:	bf18      	it	ne
 8004896:	2300      	movne	r3, #0
 8004898:	680e      	ldr	r6, [r1, #0]
 800489a:	bf08      	it	eq
 800489c:	694b      	ldreq	r3, [r1, #20]
 800489e:	eba6 0807 	sub.w	r8, r6, r7
 80048a2:	600f      	str	r7, [r1, #0]
 80048a4:	608b      	str	r3, [r1, #8]
 80048a6:	f1b8 0f00 	cmp.w	r8, #0
 80048aa:	dd9c      	ble.n	80047e6 <__sflush_r+0x1a>
 80048ac:	4643      	mov	r3, r8
 80048ae:	463a      	mov	r2, r7
 80048b0:	6a21      	ldr	r1, [r4, #32]
 80048b2:	4628      	mov	r0, r5
 80048b4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048b6:	47b0      	blx	r6
 80048b8:	2800      	cmp	r0, #0
 80048ba:	dc06      	bgt.n	80048ca <__sflush_r+0xfe>
 80048bc:	89a3      	ldrh	r3, [r4, #12]
 80048be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048c2:	81a3      	strh	r3, [r4, #12]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	e78e      	b.n	80047e8 <__sflush_r+0x1c>
 80048ca:	4407      	add	r7, r0
 80048cc:	eba8 0800 	sub.w	r8, r8, r0
 80048d0:	e7e9      	b.n	80048a6 <__sflush_r+0xda>
 80048d2:	bf00      	nop
 80048d4:	20400001 	.word	0x20400001

080048d8 <_fflush_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	690b      	ldr	r3, [r1, #16]
 80048dc:	4605      	mov	r5, r0
 80048de:	460c      	mov	r4, r1
 80048e0:	b1db      	cbz	r3, 800491a <_fflush_r+0x42>
 80048e2:	b118      	cbz	r0, 80048ec <_fflush_r+0x14>
 80048e4:	6983      	ldr	r3, [r0, #24]
 80048e6:	b90b      	cbnz	r3, 80048ec <_fflush_r+0x14>
 80048e8:	f7ff f93e 	bl	8003b68 <__sinit>
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <_fflush_r+0x48>)
 80048ee:	429c      	cmp	r4, r3
 80048f0:	d109      	bne.n	8004906 <_fflush_r+0x2e>
 80048f2:	686c      	ldr	r4, [r5, #4]
 80048f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048f8:	b17b      	cbz	r3, 800491a <_fflush_r+0x42>
 80048fa:	4621      	mov	r1, r4
 80048fc:	4628      	mov	r0, r5
 80048fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004902:	f7ff bf63 	b.w	80047cc <__sflush_r>
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <_fflush_r+0x4c>)
 8004908:	429c      	cmp	r4, r3
 800490a:	d101      	bne.n	8004910 <_fflush_r+0x38>
 800490c:	68ac      	ldr	r4, [r5, #8]
 800490e:	e7f1      	b.n	80048f4 <_fflush_r+0x1c>
 8004910:	4b05      	ldr	r3, [pc, #20]	; (8004928 <_fflush_r+0x50>)
 8004912:	429c      	cmp	r4, r3
 8004914:	bf08      	it	eq
 8004916:	68ec      	ldreq	r4, [r5, #12]
 8004918:	e7ec      	b.n	80048f4 <_fflush_r+0x1c>
 800491a:	2000      	movs	r0, #0
 800491c:	bd38      	pop	{r3, r4, r5, pc}
 800491e:	bf00      	nop
 8004920:	08004e0c 	.word	0x08004e0c
 8004924:	08004e2c 	.word	0x08004e2c
 8004928:	08004dec 	.word	0x08004dec

0800492c <_lseek_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4605      	mov	r5, r0
 8004930:	4608      	mov	r0, r1
 8004932:	4611      	mov	r1, r2
 8004934:	2200      	movs	r2, #0
 8004936:	4c05      	ldr	r4, [pc, #20]	; (800494c <_lseek_r+0x20>)
 8004938:	6022      	str	r2, [r4, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7fc fd37 	bl	80013ae <_lseek>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_lseek_r+0x1e>
 8004944:	6823      	ldr	r3, [r4, #0]
 8004946:	b103      	cbz	r3, 800494a <_lseek_r+0x1e>
 8004948:	602b      	str	r3, [r5, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	200001ac 	.word	0x200001ac

08004950 <__swhatbuf_r>:
 8004950:	b570      	push	{r4, r5, r6, lr}
 8004952:	460e      	mov	r6, r1
 8004954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004958:	b096      	sub	sp, #88	; 0x58
 800495a:	2900      	cmp	r1, #0
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	da07      	bge.n	8004972 <__swhatbuf_r+0x22>
 8004962:	2300      	movs	r3, #0
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	89b3      	ldrh	r3, [r6, #12]
 8004968:	061a      	lsls	r2, r3, #24
 800496a:	d410      	bmi.n	800498e <__swhatbuf_r+0x3e>
 800496c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004970:	e00e      	b.n	8004990 <__swhatbuf_r+0x40>
 8004972:	466a      	mov	r2, sp
 8004974:	f000 f908 	bl	8004b88 <_fstat_r>
 8004978:	2800      	cmp	r0, #0
 800497a:	dbf2      	blt.n	8004962 <__swhatbuf_r+0x12>
 800497c:	9a01      	ldr	r2, [sp, #4]
 800497e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004982:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004986:	425a      	negs	r2, r3
 8004988:	415a      	adcs	r2, r3
 800498a:	602a      	str	r2, [r5, #0]
 800498c:	e7ee      	b.n	800496c <__swhatbuf_r+0x1c>
 800498e:	2340      	movs	r3, #64	; 0x40
 8004990:	2000      	movs	r0, #0
 8004992:	6023      	str	r3, [r4, #0]
 8004994:	b016      	add	sp, #88	; 0x58
 8004996:	bd70      	pop	{r4, r5, r6, pc}

08004998 <__smakebuf_r>:
 8004998:	898b      	ldrh	r3, [r1, #12]
 800499a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800499c:	079d      	lsls	r5, r3, #30
 800499e:	4606      	mov	r6, r0
 80049a0:	460c      	mov	r4, r1
 80049a2:	d507      	bpl.n	80049b4 <__smakebuf_r+0x1c>
 80049a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	6123      	str	r3, [r4, #16]
 80049ac:	2301      	movs	r3, #1
 80049ae:	6163      	str	r3, [r4, #20]
 80049b0:	b002      	add	sp, #8
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	ab01      	add	r3, sp, #4
 80049b6:	466a      	mov	r2, sp
 80049b8:	f7ff ffca 	bl	8004950 <__swhatbuf_r>
 80049bc:	9900      	ldr	r1, [sp, #0]
 80049be:	4605      	mov	r5, r0
 80049c0:	4630      	mov	r0, r6
 80049c2:	f7ff f95b 	bl	8003c7c <_malloc_r>
 80049c6:	b948      	cbnz	r0, 80049dc <__smakebuf_r+0x44>
 80049c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049cc:	059a      	lsls	r2, r3, #22
 80049ce:	d4ef      	bmi.n	80049b0 <__smakebuf_r+0x18>
 80049d0:	f023 0303 	bic.w	r3, r3, #3
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	e7e3      	b.n	80049a4 <__smakebuf_r+0xc>
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <__smakebuf_r+0x7c>)
 80049de:	62b3      	str	r3, [r6, #40]	; 0x28
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	6020      	str	r0, [r4, #0]
 80049e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049e8:	81a3      	strh	r3, [r4, #12]
 80049ea:	9b00      	ldr	r3, [sp, #0]
 80049ec:	6120      	str	r0, [r4, #16]
 80049ee:	6163      	str	r3, [r4, #20]
 80049f0:	9b01      	ldr	r3, [sp, #4]
 80049f2:	b15b      	cbz	r3, 8004a0c <__smakebuf_r+0x74>
 80049f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049f8:	4630      	mov	r0, r6
 80049fa:	f000 f8d7 	bl	8004bac <_isatty_r>
 80049fe:	b128      	cbz	r0, 8004a0c <__smakebuf_r+0x74>
 8004a00:	89a3      	ldrh	r3, [r4, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	81a3      	strh	r3, [r4, #12]
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	431d      	orrs	r5, r3
 8004a10:	81a5      	strh	r5, [r4, #12]
 8004a12:	e7cd      	b.n	80049b0 <__smakebuf_r+0x18>
 8004a14:	08003b31 	.word	0x08003b31

08004a18 <memchr>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	b2c9      	uxtb	r1, r1
 8004a1c:	4402      	add	r2, r0
 8004a1e:	4290      	cmp	r0, r2
 8004a20:	4603      	mov	r3, r0
 8004a22:	d101      	bne.n	8004a28 <memchr+0x10>
 8004a24:	2300      	movs	r3, #0
 8004a26:	e003      	b.n	8004a30 <memchr+0x18>
 8004a28:	781c      	ldrb	r4, [r3, #0]
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	428c      	cmp	r4, r1
 8004a2e:	d1f6      	bne.n	8004a1e <memchr+0x6>
 8004a30:	4618      	mov	r0, r3
 8004a32:	bd10      	pop	{r4, pc}

08004a34 <memcpy>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	1e43      	subs	r3, r0, #1
 8004a38:	440a      	add	r2, r1
 8004a3a:	4291      	cmp	r1, r2
 8004a3c:	d100      	bne.n	8004a40 <memcpy+0xc>
 8004a3e:	bd10      	pop	{r4, pc}
 8004a40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a48:	e7f7      	b.n	8004a3a <memcpy+0x6>

08004a4a <memmove>:
 8004a4a:	4288      	cmp	r0, r1
 8004a4c:	b510      	push	{r4, lr}
 8004a4e:	eb01 0302 	add.w	r3, r1, r2
 8004a52:	d807      	bhi.n	8004a64 <memmove+0x1a>
 8004a54:	1e42      	subs	r2, r0, #1
 8004a56:	4299      	cmp	r1, r3
 8004a58:	d00a      	beq.n	8004a70 <memmove+0x26>
 8004a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a62:	e7f8      	b.n	8004a56 <memmove+0xc>
 8004a64:	4283      	cmp	r3, r0
 8004a66:	d9f5      	bls.n	8004a54 <memmove+0xa>
 8004a68:	1881      	adds	r1, r0, r2
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	42d3      	cmn	r3, r2
 8004a6e:	d100      	bne.n	8004a72 <memmove+0x28>
 8004a70:	bd10      	pop	{r4, pc}
 8004a72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a76:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a7a:	e7f7      	b.n	8004a6c <memmove+0x22>

08004a7c <__malloc_lock>:
 8004a7c:	4770      	bx	lr

08004a7e <__malloc_unlock>:
 8004a7e:	4770      	bx	lr

08004a80 <_free_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4605      	mov	r5, r0
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d043      	beq.n	8004b10 <_free_r+0x90>
 8004a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a8c:	1f0c      	subs	r4, r1, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bfb8      	it	lt
 8004a92:	18e4      	addlt	r4, r4, r3
 8004a94:	f7ff fff2 	bl	8004a7c <__malloc_lock>
 8004a98:	4a1e      	ldr	r2, [pc, #120]	; (8004b14 <_free_r+0x94>)
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	b933      	cbnz	r3, 8004aae <_free_r+0x2e>
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	6014      	str	r4, [r2, #0]
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aaa:	f7ff bfe8 	b.w	8004a7e <__malloc_unlock>
 8004aae:	42a3      	cmp	r3, r4
 8004ab0:	d90b      	bls.n	8004aca <_free_r+0x4a>
 8004ab2:	6821      	ldr	r1, [r4, #0]
 8004ab4:	1862      	adds	r2, r4, r1
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	bf01      	itttt	eq
 8004aba:	681a      	ldreq	r2, [r3, #0]
 8004abc:	685b      	ldreq	r3, [r3, #4]
 8004abe:	1852      	addeq	r2, r2, r1
 8004ac0:	6022      	streq	r2, [r4, #0]
 8004ac2:	6063      	str	r3, [r4, #4]
 8004ac4:	6004      	str	r4, [r0, #0]
 8004ac6:	e7ed      	b.n	8004aa4 <_free_r+0x24>
 8004ac8:	4613      	mov	r3, r2
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	b10a      	cbz	r2, 8004ad2 <_free_r+0x52>
 8004ace:	42a2      	cmp	r2, r4
 8004ad0:	d9fa      	bls.n	8004ac8 <_free_r+0x48>
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	1858      	adds	r0, r3, r1
 8004ad6:	42a0      	cmp	r0, r4
 8004ad8:	d10b      	bne.n	8004af2 <_free_r+0x72>
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	4401      	add	r1, r0
 8004ade:	1858      	adds	r0, r3, r1
 8004ae0:	4282      	cmp	r2, r0
 8004ae2:	6019      	str	r1, [r3, #0]
 8004ae4:	d1de      	bne.n	8004aa4 <_free_r+0x24>
 8004ae6:	6810      	ldr	r0, [r2, #0]
 8004ae8:	6852      	ldr	r2, [r2, #4]
 8004aea:	4401      	add	r1, r0
 8004aec:	6019      	str	r1, [r3, #0]
 8004aee:	605a      	str	r2, [r3, #4]
 8004af0:	e7d8      	b.n	8004aa4 <_free_r+0x24>
 8004af2:	d902      	bls.n	8004afa <_free_r+0x7a>
 8004af4:	230c      	movs	r3, #12
 8004af6:	602b      	str	r3, [r5, #0]
 8004af8:	e7d4      	b.n	8004aa4 <_free_r+0x24>
 8004afa:	6820      	ldr	r0, [r4, #0]
 8004afc:	1821      	adds	r1, r4, r0
 8004afe:	428a      	cmp	r2, r1
 8004b00:	bf01      	itttt	eq
 8004b02:	6811      	ldreq	r1, [r2, #0]
 8004b04:	6852      	ldreq	r2, [r2, #4]
 8004b06:	1809      	addeq	r1, r1, r0
 8004b08:	6021      	streq	r1, [r4, #0]
 8004b0a:	6062      	str	r2, [r4, #4]
 8004b0c:	605c      	str	r4, [r3, #4]
 8004b0e:	e7c9      	b.n	8004aa4 <_free_r+0x24>
 8004b10:	bd38      	pop	{r3, r4, r5, pc}
 8004b12:	bf00      	nop
 8004b14:	20000094 	.word	0x20000094

08004b18 <_realloc_r>:
 8004b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b1a:	4607      	mov	r7, r0
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	460e      	mov	r6, r1
 8004b20:	b921      	cbnz	r1, 8004b2c <_realloc_r+0x14>
 8004b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b26:	4611      	mov	r1, r2
 8004b28:	f7ff b8a8 	b.w	8003c7c <_malloc_r>
 8004b2c:	b922      	cbnz	r2, 8004b38 <_realloc_r+0x20>
 8004b2e:	f7ff ffa7 	bl	8004a80 <_free_r>
 8004b32:	4625      	mov	r5, r4
 8004b34:	4628      	mov	r0, r5
 8004b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b38:	f000 f848 	bl	8004bcc <_malloc_usable_size_r>
 8004b3c:	42a0      	cmp	r0, r4
 8004b3e:	d20f      	bcs.n	8004b60 <_realloc_r+0x48>
 8004b40:	4621      	mov	r1, r4
 8004b42:	4638      	mov	r0, r7
 8004b44:	f7ff f89a 	bl	8003c7c <_malloc_r>
 8004b48:	4605      	mov	r5, r0
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	d0f2      	beq.n	8004b34 <_realloc_r+0x1c>
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4622      	mov	r2, r4
 8004b52:	f7ff ff6f 	bl	8004a34 <memcpy>
 8004b56:	4631      	mov	r1, r6
 8004b58:	4638      	mov	r0, r7
 8004b5a:	f7ff ff91 	bl	8004a80 <_free_r>
 8004b5e:	e7e9      	b.n	8004b34 <_realloc_r+0x1c>
 8004b60:	4635      	mov	r5, r6
 8004b62:	e7e7      	b.n	8004b34 <_realloc_r+0x1c>

08004b64 <_read_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	4605      	mov	r5, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	4611      	mov	r1, r2
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	4c05      	ldr	r4, [pc, #20]	; (8004b84 <_read_r+0x20>)
 8004b70:	6022      	str	r2, [r4, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f7fc fbbe 	bl	80012f4 <_read>
 8004b78:	1c43      	adds	r3, r0, #1
 8004b7a:	d102      	bne.n	8004b82 <_read_r+0x1e>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	b103      	cbz	r3, 8004b82 <_read_r+0x1e>
 8004b80:	602b      	str	r3, [r5, #0]
 8004b82:	bd38      	pop	{r3, r4, r5, pc}
 8004b84:	200001ac 	.word	0x200001ac

08004b88 <_fstat_r>:
 8004b88:	b538      	push	{r3, r4, r5, lr}
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	4c06      	ldr	r4, [pc, #24]	; (8004ba8 <_fstat_r+0x20>)
 8004b8e:	4605      	mov	r5, r0
 8004b90:	4608      	mov	r0, r1
 8004b92:	4611      	mov	r1, r2
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	f7fc fbf1 	bl	800137c <_fstat>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	d102      	bne.n	8004ba4 <_fstat_r+0x1c>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	b103      	cbz	r3, 8004ba4 <_fstat_r+0x1c>
 8004ba2:	602b      	str	r3, [r5, #0]
 8004ba4:	bd38      	pop	{r3, r4, r5, pc}
 8004ba6:	bf00      	nop
 8004ba8:	200001ac 	.word	0x200001ac

08004bac <_isatty_r>:
 8004bac:	b538      	push	{r3, r4, r5, lr}
 8004bae:	2300      	movs	r3, #0
 8004bb0:	4c05      	ldr	r4, [pc, #20]	; (8004bc8 <_isatty_r+0x1c>)
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	4608      	mov	r0, r1
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	f7fc fbef 	bl	800139a <_isatty>
 8004bbc:	1c43      	adds	r3, r0, #1
 8004bbe:	d102      	bne.n	8004bc6 <_isatty_r+0x1a>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	b103      	cbz	r3, 8004bc6 <_isatty_r+0x1a>
 8004bc4:	602b      	str	r3, [r5, #0]
 8004bc6:	bd38      	pop	{r3, r4, r5, pc}
 8004bc8:	200001ac 	.word	0x200001ac

08004bcc <_malloc_usable_size_r>:
 8004bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd0:	1f18      	subs	r0, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	bfbc      	itt	lt
 8004bd6:	580b      	ldrlt	r3, [r1, r0]
 8004bd8:	18c0      	addlt	r0, r0, r3
 8004bda:	4770      	bx	lr

08004bdc <_init>:
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	bf00      	nop
 8004be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004be2:	bc08      	pop	{r3}
 8004be4:	469e      	mov	lr, r3
 8004be6:	4770      	bx	lr

08004be8 <_fini>:
 8004be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bea:	bf00      	nop
 8004bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bee:	bc08      	pop	{r3}
 8004bf0:	469e      	mov	lr, r3
 8004bf2:	4770      	bx	lr
