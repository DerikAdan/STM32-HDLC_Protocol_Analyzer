
STM32F103C8T6__RFID_BluetoothClassic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ad8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004be4  08004be4  00014be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e74  08004e74  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004e74  08004e74  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e74  08004e74  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e78  08004e78  00014e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08004eec  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004eec  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bc8  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002595  00000000  00000000  00030c61  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  000331f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e08  00000000  00000000  00034128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016605  00000000  00000000  00034f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b521  00000000  00000000  0004b535  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00075cb4  00000000  00000000  00056a56  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc70a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000047b0  00000000  00000000  000cc788  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004bcc 	.word	0x08004bcc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004bcc 	.word	0x08004bcc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b0ce      	sub	sp, #312	; 0x138
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f001 f9af 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8bf 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9b1 	bl	80004d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800016e:	f000 f901 	bl	8000374 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000172:	f000 f935 	bl	80003e0 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000176:	f000 f981 	bl	800047c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 800017a:	20c8      	movs	r0, #200	; 0xc8
 800017c:	f001 fa04 	bl	8001588 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000186:	4853      	ldr	r0, [pc, #332]	; (80002d4 <main+0x178>)
 8000188:	f001 fcfe 	bl	8001b88 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 800018c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000190:	f001 f9fa 	bl	8001588 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 8000194:	2232      	movs	r2, #50	; 0x32
 8000196:	2100      	movs	r1, #0
 8000198:	484f      	ldr	r0, [pc, #316]	; (80002d8 <main+0x17c>)
 800019a:	f003 fc4d 	bl	8003a38 <memset>
  HAL_TIM_Base_Start_IT(&htim2);
 800019e:	484f      	ldr	r0, [pc, #316]	; (80002dc <main+0x180>)
 80001a0:	f002 fbdc 	bl	800295c <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80001a4:	4b4e      	ldr	r3, [pc, #312]	; (80002e0 <main+0x184>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	68da      	ldr	r2, [r3, #12]
 80001aa:	4b4d      	ldr	r3, [pc, #308]	; (80002e0 <main+0x184>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f042 0220 	orr.w	r2, r2, #32
 80001b2:	60da      	str	r2, [r3, #12]

  uint8_t buff[255];
  uint8_t uid[MIFARE_UID_MAX_LENGTH];
  int32_t uid_len = 0;
 80001b4:	2300      	movs	r3, #0
 80001b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

  PN532 pn532;
  PN532_SPI_Init(&pn532);
 80001ba:	f107 030c 	add.w	r3, r7, #12
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 ff08 	bl	8000fd4 <PN532_SPI_Init>
  if (PN532_GetFirmwareVersion(&pn532, buff) != PN532_STATUS_OK)
 80001c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80001c8:	f107 030c 	add.w	r3, r7, #12
 80001cc:	4611      	mov	r1, r2
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 fd10 	bl	8000bf4 <PN532_GetFirmwareVersion>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d012      	beq.n	8000200 <main+0xa4>
  {
    while(1)
    {
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e0:	483c      	ldr	r0, [pc, #240]	; (80002d4 <main+0x178>)
 80001e2:	f001 fcd1 	bl	8001b88 <HAL_GPIO_WritePin>
    	HAL_Delay(250);
 80001e6:	20fa      	movs	r0, #250	; 0xfa
 80001e8:	f001 f9ce 	bl	8001588 <HAL_Delay>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 80001ec:	2200      	movs	r2, #0
 80001ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f2:	4838      	ldr	r0, [pc, #224]	; (80002d4 <main+0x178>)
 80001f4:	f001 fcc8 	bl	8001b88 <HAL_GPIO_WritePin>
    	HAL_Delay(250);
 80001f8:	20fa      	movs	r0, #250	; 0xfa
 80001fa:	f001 f9c5 	bl	8001588 <HAL_Delay>
    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80001fe:	e7ec      	b.n	80001da <main+0x7e>
    }
  }
  PN532_SamConfiguration(&pn532);
 8000200:	f107 030c 	add.w	r3, r7, #12
 8000204:	4618      	mov	r0, r3
 8000206:	f000 fd19 	bl	8000c3c <PN532_SamConfiguration>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	memset(uid, 0, sizeof(uid));
 800020a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800020e:	220a      	movs	r2, #10
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f003 fc10 	bl	8003a38 <memset>
	    uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 8000218:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800021c:	f107 000c 	add.w	r0, r7, #12
 8000220:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000224:	2200      	movs	r2, #0
 8000226:	f000 fd2b 	bl	8000c80 <PN532_ReadPassiveTarget>
 800022a:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
	    if (uid_len != PN532_STATUS_ERROR)
 800022e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8000232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000236:	d0e8      	beq.n	800020a <main+0xae>
	    {
	    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800023e:	4825      	ldr	r0, [pc, #148]	; (80002d4 <main+0x178>)
 8000240:	f001 fca2 	bl	8001b88 <HAL_GPIO_WritePin>
	    	memset(buffer, 0, sizeof(buffer));
 8000244:	2232      	movs	r2, #50	; 0x32
 8000246:	2100      	movs	r1, #0
 8000248:	4823      	ldr	r0, [pc, #140]	; (80002d8 <main+0x17c>)
 800024a:	f003 fbf5 	bl	8003a38 <memset>
	    	char stringForHex[5];
	    	for(uint8_t i=0; i<uid_len; i++)
 800024e:	2300      	movs	r3, #0
 8000250:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8000254:	e01a      	b.n	800028c <main+0x130>
	    	{
	    		memset(stringForHex, 0, sizeof(stringForHex));
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2205      	movs	r2, #5
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f003 fbeb 	bl	8003a38 <memset>
				#ifdef use_HEXADECIMAL
	    		sprintf(stringForHex, "%02X ", (unsigned char)uid[i]);
 8000262:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000266:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800026a:	5cd3      	ldrb	r3, [r2, r3]
 800026c:	461a      	mov	r2, r3
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	491c      	ldr	r1, [pc, #112]	; (80002e4 <main+0x188>)
 8000272:	4618      	mov	r0, r3
 8000274:	f003 fc00 	bl	8003a78 <siprintf>
				#else
	    		sprintf(stringForHex, "%d ", (unsigned char)uid[i]);
				#endif
	    		strcat(buffer, stringForHex);
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	4619      	mov	r1, r3
 800027c:	4816      	ldr	r0, [pc, #88]	; (80002d8 <main+0x17c>)
 800027e:	f003 fc1b 	bl	8003ab8 <strcat>
	    	for(uint8_t i=0; i<uid_len; i++)
 8000282:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000286:	3301      	adds	r3, #1
 8000288:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800028c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8000290:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8000294:	429a      	cmp	r2, r3
 8000296:	dcde      	bgt.n	8000256 <main+0xfa>
	    	}
	    	buffer[strlen(buffer)-1] = '\n';
 8000298:	480f      	ldr	r0, [pc, #60]	; (80002d8 <main+0x17c>)
 800029a:	f7ff ff57 	bl	800014c <strlen>
 800029e:	4603      	mov	r3, r0
 80002a0:	3b01      	subs	r3, #1
 80002a2:	4a0d      	ldr	r2, [pc, #52]	; (80002d8 <main+0x17c>)
 80002a4:	210a      	movs	r1, #10
 80002a6:	54d1      	strb	r1, [r2, r3]
	    	HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 80002a8:	480b      	ldr	r0, [pc, #44]	; (80002d8 <main+0x17c>)
 80002aa:	f7ff ff4f 	bl	800014c <strlen>
 80002ae:	4603      	mov	r3, r0
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80002b6:	4908      	ldr	r1, [pc, #32]	; (80002d8 <main+0x17c>)
 80002b8:	4809      	ldr	r0, [pc, #36]	; (80002e0 <main+0x184>)
 80002ba:	f002 fefa 	bl	80030b2 <HAL_UART_Transmit>
	    	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <main+0x178>)
 80002c6:	f001 fc5f 	bl	8001b88 <HAL_GPIO_WritePin>
	    	HAL_Delay(1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ce:	f001 f95b 	bl	8001588 <HAL_Delay>
	  	memset(uid, 0, sizeof(uid));
 80002d2:	e79a      	b.n	800020a <main+0xae>
 80002d4:	40011000 	.word	0x40011000
 80002d8:	20000174 	.word	0x20000174
 80002dc:	200000f4 	.word	0x200000f4
 80002e0:	20000134 	.word	0x20000134
 80002e4:	08004be4 	.word	0x08004be4

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b090      	sub	sp, #64	; 0x40
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	f107 0318 	add.w	r3, r7, #24
 80002f2:	2228      	movs	r2, #40	; 0x28
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f003 fb9e 	bl	8003a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]
 8000304:	609a      	str	r2, [r3, #8]
 8000306:	60da      	str	r2, [r3, #12]
 8000308:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800030a:	2301      	movs	r3, #1
 800030c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000312:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800031c:	2302      	movs	r3, #2
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000320:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000324:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000326:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800032a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800032c:	f107 0318 	add.w	r3, r7, #24
 8000330:	4618      	mov	r0, r3
 8000332:	f001 fc41 	bl	8001bb8 <HAL_RCC_OscConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800033c:	f000 f95a 	bl	80005f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000340:	230f      	movs	r3, #15
 8000342:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000344:	2302      	movs	r3, #2
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800034c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000350:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000356:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2102      	movs	r1, #2
 800035c:	4618      	mov	r0, r3
 800035e:	f001 feab 	bl	80020b8 <HAL_RCC_ClockConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000368:	f000 f944 	bl	80005f4 <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3740      	adds	r7, #64	; 0x40
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000378:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <MX_SPI1_Init+0x64>)
 800037a:	4a18      	ldr	r2, [pc, #96]	; (80003dc <MX_SPI1_Init+0x68>)
 800037c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <MX_SPI1_Init+0x64>)
 8000380:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000384:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <MX_SPI1_Init+0x64>)
 8000388:	2200      	movs	r2, #0
 800038a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <MX_SPI1_Init+0x64>)
 800038e:	2200      	movs	r2, #0
 8000390:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_SPI1_Init+0x64>)
 8000394:	2200      	movs	r2, #0
 8000396:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000398:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <MX_SPI1_Init+0x64>)
 800039a:	2200      	movs	r2, #0
 800039c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003a8:	2220      	movs	r2, #32
 80003aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80003ac:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003ae:	2280      	movs	r2, #128	; 0x80
 80003b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003b2:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b8:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80003be:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003c0:	220a      	movs	r2, #10
 80003c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003c4:	4804      	ldr	r0, [pc, #16]	; (80003d8 <MX_SPI1_Init+0x64>)
 80003c6:	f002 f813 	bl	80023f0 <HAL_SPI_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003d0:	f000 f910 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003d4:	bf00      	nop
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	2000009c 	.word	0x2000009c
 80003dc:	40013000 	.word	0x40013000

080003e0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003f4:	463b      	mov	r3, r7
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003fc:	4b1e      	ldr	r3, [pc, #120]	; (8000478 <MX_TIM2_Init+0x98>)
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000402:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8000404:	4b1c      	ldr	r3, [pc, #112]	; (8000478 <MX_TIM2_Init+0x98>)
 8000406:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800040a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040c:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <MX_TIM2_Init+0x98>)
 800040e:	2200      	movs	r2, #0
 8000410:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000412:	4b19      	ldr	r3, [pc, #100]	; (8000478 <MX_TIM2_Init+0x98>)
 8000414:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000418:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <MX_TIM2_Init+0x98>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <MX_TIM2_Init+0x98>)
 8000422:	2200      	movs	r2, #0
 8000424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000426:	4814      	ldr	r0, [pc, #80]	; (8000478 <MX_TIM2_Init+0x98>)
 8000428:	f002 fa6d 	bl	8002906 <HAL_TIM_Base_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000432:	f000 f8df 	bl	80005f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800043a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800043c:	f107 0308 	add.w	r3, r7, #8
 8000440:	4619      	mov	r1, r3
 8000442:	480d      	ldr	r0, [pc, #52]	; (8000478 <MX_TIM2_Init+0x98>)
 8000444:	f002 fbb5 	bl	8002bb2 <HAL_TIM_ConfigClockSource>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800044e:	f000 f8d1 	bl	80005f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000452:	2300      	movs	r3, #0
 8000454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800045a:	463b      	mov	r3, r7
 800045c:	4619      	mov	r1, r3
 800045e:	4806      	ldr	r0, [pc, #24]	; (8000478 <MX_TIM2_Init+0x98>)
 8000460:	f002 fd84 	bl	8002f6c <HAL_TIMEx_MasterConfigSynchronization>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800046a:	f000 f8c3 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200000f4 	.word	0x200000f4

0800047c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000482:	4a12      	ldr	r2, [pc, #72]	; (80004cc <MX_USART2_UART_Init+0x50>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000486:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000488:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049a:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b09      	ldr	r3, [pc, #36]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004b2:	4805      	ldr	r0, [pc, #20]	; (80004c8 <MX_USART2_UART_Init+0x4c>)
 80004b4:	f002 fdb0 	bl	8003018 <HAL_UART_Init>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004be:	f000 f899 	bl	80005f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004c2:	bf00      	nop
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	20000134 	.word	0x20000134
 80004cc:	40004400 	.word	0x40004400

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e4:	4b40      	ldr	r3, [pc, #256]	; (80005e8 <MX_GPIO_Init+0x118>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a3f      	ldr	r2, [pc, #252]	; (80005e8 <MX_GPIO_Init+0x118>)
 80004ea:	f043 0310 	orr.w	r3, r3, #16
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b3d      	ldr	r3, [pc, #244]	; (80005e8 <MX_GPIO_Init+0x118>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0310 	and.w	r3, r3, #16
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004fc:	4b3a      	ldr	r3, [pc, #232]	; (80005e8 <MX_GPIO_Init+0x118>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	4a39      	ldr	r2, [pc, #228]	; (80005e8 <MX_GPIO_Init+0x118>)
 8000502:	f043 0320 	orr.w	r3, r3, #32
 8000506:	6193      	str	r3, [r2, #24]
 8000508:	4b37      	ldr	r3, [pc, #220]	; (80005e8 <MX_GPIO_Init+0x118>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f003 0320 	and.w	r3, r3, #32
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000514:	4b34      	ldr	r3, [pc, #208]	; (80005e8 <MX_GPIO_Init+0x118>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	4a33      	ldr	r2, [pc, #204]	; (80005e8 <MX_GPIO_Init+0x118>)
 800051a:	f043 0304 	orr.w	r3, r3, #4
 800051e:	6193      	str	r3, [r2, #24]
 8000520:	4b31      	ldr	r3, [pc, #196]	; (80005e8 <MX_GPIO_Init+0x118>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	f003 0304 	and.w	r3, r3, #4
 8000528:	607b      	str	r3, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052c:	4b2e      	ldr	r3, [pc, #184]	; (80005e8 <MX_GPIO_Init+0x118>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	4a2d      	ldr	r2, [pc, #180]	; (80005e8 <MX_GPIO_Init+0x118>)
 8000532:	f043 0308 	orr.w	r3, r3, #8
 8000536:	6193      	str	r3, [r2, #24]
 8000538:	4b2b      	ldr	r3, [pc, #172]	; (80005e8 <MX_GPIO_Init+0x118>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	f003 0308 	and.w	r3, r3, #8
 8000540:	603b      	str	r3, [r7, #0]
 8000542:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054a:	4828      	ldr	r0, [pc, #160]	; (80005ec <MX_GPIO_Init+0x11c>)
 800054c:	f001 fb1c 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000556:	4825      	ldr	r0, [pc, #148]	; (80005ec <MX_GPIO_Init+0x11c>)
 8000558:	f001 fb16 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	2101      	movs	r1, #1
 8000560:	4823      	ldr	r0, [pc, #140]	; (80005f0 <MX_GPIO_Init+0x120>)
 8000562:	f001 fb11 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800056c:	4820      	ldr	r0, [pc, #128]	; (80005f0 <MX_GPIO_Init+0x120>)
 800056e:	f001 fb0b 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin BluetoothReset_Pin */
  GPIO_InitStruct.Pin = LED_Pin|BluetoothReset_Pin;
 8000572:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000580:	2303      	movs	r3, #3
 8000582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	4619      	mov	r1, r3
 800058a:	4818      	ldr	r0, [pc, #96]	; (80005ec <MX_GPIO_Init+0x11c>)
 800058c:	f001 f9a2 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFID_SS_Pin RFID_Reset_Pin */
  GPIO_InitStruct.Pin = RFID_SS_Pin|RFID_Reset_Pin;
 8000590:	f240 4301 	movw	r3, #1025	; 0x401
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	4811      	ldr	r0, [pc, #68]	; (80005f0 <MX_GPIO_Init+0x120>)
 80005aa:	f001 f993 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFID_IRQ_Pin */
  GPIO_InitStruct.Pin = RFID_IRQ_Pin;
 80005ae:	2302      	movs	r3, #2
 80005b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RFID_IRQ_GPIO_Port, &GPIO_InitStruct);
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <MX_GPIO_Init+0x120>)
 80005c2:	f001 f987 	bl	80018d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80005c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80005d4:	f107 0310 	add.w	r3, r7, #16
 80005d8:	4619      	mov	r1, r3
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_GPIO_Init+0x120>)
 80005dc:	f001 f97a 	bl	80018d4 <HAL_GPIO_Init>

}
 80005e0:	bf00      	nop
 80005e2:	3720      	adds	r7, #32
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40011000 	.word	0x40011000
 80005f0:	40010c00 	.word	0x40010c00

080005f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <string_compare>:

char buffer[50];
uint8_t timer_count = 0, buffer_index = 0;

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000600:	b480      	push	{r7}
 8000602:	b087      	sub	sp, #28
 8000604:	af00      	add	r7, sp, #0
 8000606:	60f8      	str	r0, [r7, #12]
 8000608:	60b9      	str	r1, [r7, #8]
 800060a:	4613      	mov	r3, r2
 800060c:	80fb      	strh	r3, [r7, #6]
	 uint8_t comVAR=0, i;
 800060e:	2300      	movs	r3, #0
 8000610:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000612:	2300      	movs	r3, #0
 8000614:	75bb      	strb	r3, [r7, #22]
 8000616:	e012      	b.n	800063e <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000618:	7dbb      	ldrb	r3, [r7, #22]
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	4413      	add	r3, r2
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	7dbb      	ldrb	r3, [r7, #22]
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	440b      	add	r3, r1
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	429a      	cmp	r2, r3
 800062a:	d103      	bne.n	8000634 <string_compare+0x34>
	   	  		  comVAR++;
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	3301      	adds	r3, #1
 8000630:	75fb      	strb	r3, [r7, #23]
 8000632:	e001      	b.n	8000638 <string_compare+0x38>
	   	  	  else comVAR=0;
 8000634:	2300      	movs	r3, #0
 8000636:	75fb      	strb	r3, [r7, #23]
	 for(i=0;i<length;i++)
 8000638:	7dbb      	ldrb	r3, [r7, #22]
 800063a:	3301      	adds	r3, #1
 800063c:	75bb      	strb	r3, [r7, #22]
 800063e:	7dbb      	ldrb	r3, [r7, #22]
 8000640:	b29b      	uxth	r3, r3
 8000642:	88fa      	ldrh	r2, [r7, #6]
 8000644:	429a      	cmp	r2, r3
 8000646:	d8e7      	bhi.n	8000618 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 8000648:	7dfb      	ldrb	r3, [r7, #23]
 800064a:	b29b      	uxth	r3, r3
 800064c:	88fa      	ldrh	r2, [r7, #6]
 800064e:	429a      	cmp	r2, r3
 8000650:	d101      	bne.n	8000656 <string_compare+0x56>
		 	return 1;
 8000652:	2301      	movs	r3, #1
 8000654:	e000      	b.n	8000658 <string_compare+0x58>
	 else 	return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	371c      	adds	r7, #28
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
	...

08000664 <Message_handler>:

void Message_handler()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	if(string_compare(buffer, "LED ON", strlen("LED ON")))
 8000668:	2206      	movs	r2, #6
 800066a:	4927      	ldr	r1, [pc, #156]	; (8000708 <Message_handler+0xa4>)
 800066c:	4827      	ldr	r0, [pc, #156]	; (800070c <Message_handler+0xa8>)
 800066e:	f7ff ffc7 	bl	8000600 <string_compare>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00d      	beq.n	8000694 <Message_handler+0x30>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067e:	4824      	ldr	r0, [pc, #144]	; (8000710 <Message_handler+0xac>)
 8000680:	f001 fa82 	bl	8001b88 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is ON.\n", strlen("LED is ON.\n"), 500);
 8000684:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000688:	220b      	movs	r2, #11
 800068a:	4922      	ldr	r1, [pc, #136]	; (8000714 <Message_handler+0xb0>)
 800068c:	4822      	ldr	r0, [pc, #136]	; (8000718 <Message_handler+0xb4>)
 800068e:	f002 fd10 	bl	80030b2 <HAL_UART_Transmit>
 8000692:	e02c      	b.n	80006ee <Message_handler+0x8a>
	}else
	if(string_compare(buffer, "LED OFF", strlen("LED OFF")))
 8000694:	2207      	movs	r2, #7
 8000696:	4921      	ldr	r1, [pc, #132]	; (800071c <Message_handler+0xb8>)
 8000698:	481c      	ldr	r0, [pc, #112]	; (800070c <Message_handler+0xa8>)
 800069a:	f7ff ffb1 	bl	8000600 <string_compare>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d00d      	beq.n	80006c0 <Message_handler+0x5c>
	{
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006aa:	4819      	ldr	r0, [pc, #100]	; (8000710 <Message_handler+0xac>)
 80006ac:	f001 fa6c 	bl	8001b88 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart2, (uint8_t*)"LED is OFF.\n", strlen("LED is OFF.\n"), 500);
 80006b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006b4:	220c      	movs	r2, #12
 80006b6:	491a      	ldr	r1, [pc, #104]	; (8000720 <Message_handler+0xbc>)
 80006b8:	4817      	ldr	r0, [pc, #92]	; (8000718 <Message_handler+0xb4>)
 80006ba:	f002 fcfa 	bl	80030b2 <HAL_UART_Transmit>
 80006be:	e016      	b.n	80006ee <Message_handler+0x8a>
	}else
	{
		strcat(buffer, "\n");
 80006c0:	4812      	ldr	r0, [pc, #72]	; (800070c <Message_handler+0xa8>)
 80006c2:	f7ff fd43 	bl	800014c <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <Message_handler+0xa8>)
 80006cc:	4413      	add	r3, r2
 80006ce:	4915      	ldr	r1, [pc, #84]	; (8000724 <Message_handler+0xc0>)
 80006d0:	461a      	mov	r2, r3
 80006d2:	460b      	mov	r3, r1
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 500);
 80006d8:	480c      	ldr	r0, [pc, #48]	; (800070c <Message_handler+0xa8>)
 80006da:	f7ff fd37 	bl	800014c <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006e6:	4909      	ldr	r1, [pc, #36]	; (800070c <Message_handler+0xa8>)
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <Message_handler+0xb4>)
 80006ea:	f002 fce2 	bl	80030b2 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 80006ee:	2232      	movs	r2, #50	; 0x32
 80006f0:	2100      	movs	r1, #0
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <Message_handler+0xa8>)
 80006f4:	f003 f9a0 	bl	8003a38 <memset>
	buffer_index = 0;
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <Message_handler+0xc4>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <Message_handler+0xc8>)
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	08004bec 	.word	0x08004bec
 800070c:	20000174 	.word	0x20000174
 8000710:	40011000 	.word	0x40011000
 8000714:	08004bf4 	.word	0x08004bf4
 8000718:	20000134 	.word	0x20000134
 800071c:	08004c00 	.word	0x08004c00
 8000720:	08004c08 	.word	0x08004c08
 8000724:	08004c18 	.word	0x08004c18
 8000728:	2000008d 	.word	0x2000008d
 800072c:	2000008c 	.word	0x2000008c

08000730 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b0c8      	sub	sp, #288	; 0x120
 8000734:	af00      	add	r7, sp, #0
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	6018      	str	r0, [r3, #0]
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	6019      	str	r1, [r3, #0]
 8000742:	1dbb      	adds	r3, r7, #6
 8000744:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000746:	1dbb      	adds	r3, r7, #6
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	2bff      	cmp	r3, #255	; 0xff
 800074c:	d803      	bhi.n	8000756 <PN532_WriteFrame+0x26>
 800074e:	1dbb      	adds	r3, r7, #6
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d102      	bne.n	800075c <PN532_WriteFrame+0x2c>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000756:	f04f 33ff 	mov.w	r3, #4294967295
 800075a:	e080      	b.n	800085e <PN532_WriteFrame+0x12e>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8000762:	f107 0314 	add.w	r3, r7, #20
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2200      	movs	r2, #0
 8000770:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	22ff      	movs	r2, #255	; 0xff
 8000778:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000780:	e00e      	b.n	80007a0 <PN532_WriteFrame+0x70>
        checksum += frame[i];
 8000782:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000786:	f107 0214 	add.w	r2, r7, #20
 800078a:	5cd2      	ldrb	r2, [r2, r3]
 800078c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000790:	4413      	add	r3, r2
 8000792:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8000796:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800079a:	3301      	adds	r3, #1
 800079c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80007a0:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d9ec      	bls.n	8000782 <PN532_WriteFrame+0x52>
    }
    frame[3] = length & 0xFF;
 80007a8:	1dbb      	adds	r3, r7, #6
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80007b4:	1dbb      	adds	r3, r7, #6
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	425b      	negs	r3, r3
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 80007ca:	e01d      	b.n	8000808 <PN532_WriteFrame+0xd8>
        frame[5 + i] = data[i];
 80007cc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80007d0:	f107 0208 	add.w	r2, r7, #8
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	441a      	add	r2, r3
 80007d8:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80007dc:	3305      	adds	r3, #5
 80007de:	7811      	ldrb	r1, [r2, #0]
 80007e0:	f107 0214 	add.w	r2, r7, #20
 80007e4:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 80007e6:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80007ea:	f107 0208 	add.w	r2, r7, #8
 80007ee:	6812      	ldr	r2, [r2, #0]
 80007f0:	4413      	add	r3, r2
 80007f2:	781a      	ldrb	r2, [r3, #0]
 80007f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80007f8:	4413      	add	r3, r2
 80007fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 80007fe:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000802:	3301      	adds	r3, #1
 8000804:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000808:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 800080c:	b29b      	uxth	r3, r3
 800080e:	1dba      	adds	r2, r7, #6
 8000810:	8812      	ldrh	r2, [r2, #0]
 8000812:	429a      	cmp	r2, r3
 8000814:	d8da      	bhi.n	80007cc <PN532_WriteFrame+0x9c>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	881b      	ldrh	r3, [r3, #0]
 800081a:	3305      	adds	r3, #5
 800081c:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000820:	43d2      	mvns	r2, r2
 8000822:	b2d1      	uxtb	r1, r2
 8000824:	f107 0214 	add.w	r2, r7, #20
 8000828:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 800082a:	1dbb      	adds	r3, r7, #6
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	3306      	adds	r3, #6
 8000830:	f107 0214 	add.w	r2, r7, #20
 8000834:	2100      	movs	r1, #0
 8000836:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	1dba      	adds	r2, r7, #6
 8000842:	8812      	ldrh	r2, [r2, #0]
 8000844:	3207      	adds	r2, #7
 8000846:	b291      	uxth	r1, r2
 8000848:	f107 0214 	add.w	r2, r7, #20
 800084c:	4610      	mov	r0, r2
 800084e:	4798      	blx	r3
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <PN532_WriteFrame+0x12c>
        return PN532_STATUS_ERROR;
 8000856:	f04f 33ff 	mov.w	r3, #4294967295
 800085a:	e000      	b.n	800085e <PN532_WriteFrame+0x12e>
    }
    return PN532_STATUS_OK;
 800085c:	2300      	movs	r3, #0
}
 800085e:	4618      	mov	r0, r3
 8000860:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b0c8      	sub	sp, #288	; 0x120
 800086c:	af00      	add	r7, sp, #0
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	6018      	str	r0, [r3, #0]
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	6019      	str	r1, [r3, #0]
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	1dba      	adds	r2, r7, #6
 800088e:	8812      	ldrh	r2, [r2, #0]
 8000890:	3207      	adds	r2, #7
 8000892:	b291      	uxth	r1, r2
 8000894:	f107 0214 	add.w	r2, r7, #20
 8000898:	4610      	mov	r0, r2
 800089a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 80008a2:	e014      	b.n	80008ce <PN532_ReadFrame+0x66>
        offset += 1;
 80008a4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008a8:	3301      	adds	r3, #1
 80008aa:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 80008ae:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 80008b2:	1dbb      	adds	r3, r7, #6
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	3308      	adds	r3, #8
 80008b8:	429a      	cmp	r2, r3
 80008ba:	db08      	blt.n	80008ce <PN532_ReadFrame+0x66>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 80008bc:	f107 030c 	add.w	r3, r7, #12
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	484e      	ldr	r0, [pc, #312]	; (8000a00 <PN532_ReadFrame+0x198>)
 80008c6:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295
 80008cc:	e093      	b.n	80009f6 <PN532_ReadFrame+0x18e>
    while (buff[offset] == 0x00) {
 80008ce:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008d2:	f107 0214 	add.w	r2, r7, #20
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d0e3      	beq.n	80008a4 <PN532_ReadFrame+0x3c>
        }
    }
    if (buff[offset] != 0xFF) {
 80008dc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80008e0:	f107 0214 	add.w	r2, r7, #20
 80008e4:	5cd3      	ldrb	r3, [r2, r3]
 80008e6:	2bff      	cmp	r3, #255	; 0xff
 80008e8:	d008      	beq.n	80008fc <PN532_ReadFrame+0x94>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	695b      	ldr	r3, [r3, #20]
 80008f2:	4843      	ldr	r0, [pc, #268]	; (8000a00 <PN532_ReadFrame+0x198>)
 80008f4:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	e07c      	b.n	80009f6 <PN532_ReadFrame+0x18e>
    }
    offset += 1;
 80008fc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000900:	3301      	adds	r3, #1
 8000902:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8000906:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 800090a:	1dbb      	adds	r3, r7, #6
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	3308      	adds	r3, #8
 8000910:	429a      	cmp	r2, r3
 8000912:	db08      	blt.n	8000926 <PN532_ReadFrame+0xbe>
        pn532->log("Response contains no data!");
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	4839      	ldr	r0, [pc, #228]	; (8000a04 <PN532_ReadFrame+0x19c>)
 800091e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000920:	f04f 33ff 	mov.w	r3, #4294967295
 8000924:	e067      	b.n	80009f6 <PN532_ReadFrame+0x18e>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000926:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800092a:	f107 0214 	add.w	r2, r7, #20
 800092e:	5cd3      	ldrb	r3, [r2, r3]
 8000930:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000934:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000938:	3301      	adds	r3, #1
 800093a:	f107 0214 	add.w	r2, r7, #20
 800093e:	5cd2      	ldrb	r2, [r2, r3]
 8000940:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000944:	4413      	add	r3, r2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d008      	beq.n	800095e <PN532_ReadFrame+0xf6>
        pn532->log("Response length checksum did not match length!");
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	482c      	ldr	r0, [pc, #176]	; (8000a08 <PN532_ReadFrame+0x1a0>)
 8000956:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	e04b      	b.n	80009f6 <PN532_ReadFrame+0x18e>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800095e:	2300      	movs	r3, #0
 8000960:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000964:	e012      	b.n	800098c <PN532_ReadFrame+0x124>
        checksum += buff[offset + 2 + i];
 8000966:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800096a:	1c9a      	adds	r2, r3, #2
 800096c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000970:	4413      	add	r3, r2
 8000972:	f107 0214 	add.w	r2, r7, #20
 8000976:	5cd2      	ldrb	r2, [r2, r3]
 8000978:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800097c:	4413      	add	r3, r2
 800097e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000982:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000986:	3301      	adds	r3, #1
 8000988:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 800098c:	f897 211d 	ldrb.w	r2, [r7, #285]	; 0x11d
 8000990:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000994:	3301      	adds	r3, #1
 8000996:	429a      	cmp	r2, r3
 8000998:	dbe5      	blt.n	8000966 <PN532_ReadFrame+0xfe>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 800099a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d008      	beq.n	80009b4 <PN532_ReadFrame+0x14c>
        pn532->log("Response checksum did not match expected checksum");
 80009a2:	f107 030c 	add.w	r3, r7, #12
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <PN532_ReadFrame+0x1a4>)
 80009ac:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
 80009b2:	e020      	b.n	80009f6 <PN532_ReadFrame+0x18e>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 80009b4:	2300      	movs	r3, #0
 80009b6:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80009ba:	e014      	b.n	80009e6 <PN532_ReadFrame+0x17e>
        response[i] = buff[offset + 2 + i];
 80009bc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 80009c0:	1c9a      	adds	r2, r3, #2
 80009c2:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80009c6:	441a      	add	r2, r3
 80009c8:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80009cc:	f107 0108 	add.w	r1, r7, #8
 80009d0:	6809      	ldr	r1, [r1, #0]
 80009d2:	440b      	add	r3, r1
 80009d4:	f107 0114 	add.w	r1, r7, #20
 80009d8:	5c8a      	ldrb	r2, [r1, r2]
 80009da:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 80009dc:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 80009e0:	3301      	adds	r3, #1
 80009e2:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80009e6:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 80009ea:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d3e4      	bcc.n	80009bc <PN532_ReadFrame+0x154>
    }
    return frame_len;
 80009f2:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08004c1c 	.word	0x08004c1c
 8000a04:	08004c50 	.word	0x08004c50
 8000a08:	08004c6c 	.word	0x08004c6c
 8000a0c:	08004c9c 	.word	0x08004c9c

08000a10 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b0c7      	sub	sp, #284	; 0x11c
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	f107 040c 	add.w	r4, r7, #12
 8000a1a:	6020      	str	r0, [r4, #0]
 8000a1c:	4608      	mov	r0, r1
 8000a1e:	1d39      	adds	r1, r7, #4
 8000a20:	600a      	str	r2, [r1, #0]
 8000a22:	4619      	mov	r1, r3
 8000a24:	f107 030b 	add.w	r3, r7, #11
 8000a28:	4602      	mov	r2, r0
 8000a2a:	701a      	strb	r2, [r3, #0]
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	460a      	mov	r2, r1
 8000a32:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	22d4      	movs	r2, #212	; 0xd4
 8000a3a:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	f107 020b 	add.w	r2, r7, #11
 8000a44:	7812      	ldrb	r2, [r2, #0]
 8000a46:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000a48:	2300      	movs	r3, #0
 8000a4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000a4e:	e010      	b.n	8000a72 <PN532_CallFunction+0x62>
        buff[2 + i] = params[i];
 8000a50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a54:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000a58:	441a      	add	r2, r3
 8000a5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a5e:	3302      	adds	r3, #2
 8000a60:	7811      	ldrb	r1, [r2, #0]
 8000a62:	f107 0210 	add.w	r2, r7, #16
 8000a66:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8000a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000a72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	d8e7      	bhi.n	8000a50 <PN532_CallFunction+0x40>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8000a80:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000a84:	3302      	adds	r3, #2
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	f107 0110 	add.w	r1, r7, #16
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	6818      	ldr	r0, [r3, #0]
 8000a92:	f7ff fe4d 	bl	8000730 <PN532_WriteFrame>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d00d      	beq.n	8000ab8 <PN532_CallFunction+0xa8>
        pn532->wakeup();
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	691b      	ldr	r3, [r3, #16]
 8000aa4:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	484d      	ldr	r0, [pc, #308]	; (8000be4 <PN532_CallFunction+0x1d4>)
 8000ab0:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab6:	e08f      	b.n	8000bd8 <PN532_CallFunction+0x1c8>
    }
    if (!pn532->wait_ready(timeout)) {
 8000ab8:	f107 030c 	add.w	r3, r7, #12
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000ac4:	4798      	blx	r3
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	f083 0301 	eor.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d002      	beq.n	8000ad8 <PN532_CallFunction+0xc8>
        return PN532_STATUS_ERROR;
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	e07f      	b.n	8000bd8 <PN532_CallFunction+0x1c8>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f107 0210 	add.w	r2, r7, #16
 8000ae4:	2106      	movs	r1, #6
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000af0:	e018      	b.n	8000b24 <PN532_CallFunction+0x114>
        if (PN532_ACK[i] != buff[i]) {
 8000af2:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000af6:	4a3c      	ldr	r2, [pc, #240]	; (8000be8 <PN532_CallFunction+0x1d8>)
 8000af8:	5cd2      	ldrb	r2, [r2, r3]
 8000afa:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000afe:	f107 0110 	add.w	r1, r7, #16
 8000b02:	5ccb      	ldrb	r3, [r1, r3]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d008      	beq.n	8000b1a <PN532_CallFunction+0x10a>
            pn532->log("Did not receive expected ACK from PN532!");
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	4836      	ldr	r0, [pc, #216]	; (8000bec <PN532_CallFunction+0x1dc>)
 8000b12:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295
 8000b18:	e05e      	b.n	8000bd8 <PN532_CallFunction+0x1c8>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8000b1a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000b1e:	3301      	adds	r3, #1
 8000b20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8000b24:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8000b28:	2b05      	cmp	r3, #5
 8000b2a:	d9e2      	bls.n	8000af2 <PN532_CallFunction+0xe2>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8000b38:	4798      	blx	r3
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	f083 0301 	eor.w	r3, r3, #1
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <PN532_CallFunction+0x13c>
        return PN532_STATUS_ERROR;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e045      	b.n	8000bd8 <PN532_CallFunction+0x1c8>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 8000b4c:	f107 0308 	add.w	r3, r7, #8
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	3302      	adds	r3, #2
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	f107 0110 	add.w	r1, r7, #16
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	6818      	ldr	r0, [r3, #0]
 8000b60:	f7ff fe82 	bl	8000868 <PN532_ReadFrame>
 8000b64:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2bd5      	cmp	r3, #213	; 0xd5
 8000b70:	d109      	bne.n	8000b86 <PN532_CallFunction+0x176>
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	f107 030b 	add.w	r3, r7, #11
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	3301      	adds	r3, #1
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d008      	beq.n	8000b98 <PN532_CallFunction+0x188>
        pn532->log("Received unexpected command response!");
 8000b86:	f107 030c 	add.w	r3, r7, #12
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <PN532_CallFunction+0x1e0>)
 8000b90:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e01f      	b.n	8000bd8 <PN532_CallFunction+0x1c8>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000b9e:	e010      	b.n	8000bc2 <PN532_CallFunction+0x1b2>
        response[i] = buff[i + 2];
 8000ba0:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000ba4:	1c9a      	adds	r2, r3, #2
 8000ba6:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000baa:	1d39      	adds	r1, r7, #4
 8000bac:	6809      	ldr	r1, [r1, #0]
 8000bae:	440b      	add	r3, r1
 8000bb0:	f107 0110 	add.w	r1, r7, #16
 8000bb4:	5c8a      	ldrb	r2, [r1, r2]
 8000bb6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8000bb8:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000bc2:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	f107 0208 	add.w	r2, r7, #8
 8000bcc:	8812      	ldrh	r2, [r2, #0]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d8e6      	bhi.n	8000ba0 <PN532_CallFunction+0x190>
    }
    // The the number of bytes read
    return frame_len - 2;
 8000bd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000bd6:	3b02      	subs	r3, #2
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}
 8000be2:	bf00      	nop
 8000be4:	08004cd0 	.word	0x08004cd0
 8000be8:	08004dbc 	.word	0x08004dbc
 8000bec:	08004ce4 	.word	0x08004ce4
 8000bf0:	08004d10 	.word	0x08004d10

08000bf4 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 8000bfe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c02:	9302      	str	r3, [sp, #8]
 8000c04:	2300      	movs	r3, #0
 8000c06:	9301      	str	r3, [sp, #4]
 8000c08:	2300      	movs	r3, #0
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	2102      	movs	r1, #2
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	f7ff fefc 	bl	8000a10 <PN532_CallFunction>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1e:	d106      	bne.n	8000c2e <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <PN532_GetFirmwareVersion+0x44>)
 8000c26:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	e000      	b.n	8000c30 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 8000c2e:	2300      	movs	r3, #0
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	08004d38 	.word	0x08004d38

08000c3c <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af04      	add	r7, sp, #16
 8000c42:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8000c44:	4a0d      	ldr	r2, [pc, #52]	; (8000c7c <PN532_SamConfiguration+0x40>)
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	8019      	strh	r1, [r3, #0]
 8000c50:	3302      	adds	r3, #2
 8000c52:	0c12      	lsrs	r2, r2, #16
 8000c54:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	9302      	str	r3, [sp, #8]
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	9301      	str	r3, [sp, #4]
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2114      	movs	r1, #20
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff fecf 	bl	8000a10 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 8000c72:	2300      	movs	r3, #0
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	08004d54 	.word	0x08004d54

08000c80 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b090      	sub	sp, #64	; 0x40
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 8000c90:	2301      	movs	r3, #1
 8000c92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 8000c9c:	f107 0210 	add.w	r2, r7, #16
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2313      	movs	r3, #19
 8000cb0:	214a      	movs	r1, #74	; 0x4a
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f7ff feac 	bl	8000a10 <PN532_CallFunction>
 8000cb8:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8000cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	da02      	bge.n	8000cc6 <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	e02f      	b.n	8000d26 <PN532_ReadPassiveTarget+0xa6>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8000cc6:	7c3b      	ldrb	r3, [r7, #16]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d006      	beq.n	8000cda <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	4817      	ldr	r0, [pc, #92]	; (8000d30 <PN532_ReadPassiveTarget+0xb0>)
 8000cd2:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	e025      	b.n	8000d26 <PN532_ReadPassiveTarget+0xa6>
    }
    if (buff[5] > 7) {
 8000cda:	7d7b      	ldrb	r3, [r7, #21]
 8000cdc:	2b07      	cmp	r3, #7
 8000cde:	d906      	bls.n	8000cee <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	4813      	ldr	r0, [pc, #76]	; (8000d34 <PN532_ReadPassiveTarget+0xb4>)
 8000ce6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cec:	e01b      	b.n	8000d26 <PN532_ReadPassiveTarget+0xa6>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000cf4:	e011      	b.n	8000d1a <PN532_ReadPassiveTarget+0x9a>
        response[i] = buff[6 + i];
 8000cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cfa:	1d9a      	adds	r2, r3, #6
 8000cfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	440b      	add	r3, r1
 8000d04:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000d08:	440a      	add	r2, r1
 8000d0a:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8000d0e:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8000d10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d14:	3301      	adds	r3, #1
 8000d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d1a:	7d7b      	ldrb	r3, [r7, #21]
 8000d1c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3e8      	bcc.n	8000cf6 <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 8000d24:	7d7b      	ldrb	r3, [r7, #21]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3730      	adds	r7, #48	; 0x30
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	08004d58 	.word	0x08004d58
 8000d34:	08004d78 	.word	0x08004d78

08000d38 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d42:	480e      	ldr	r0, [pc, #56]	; (8000d7c <PN532_Reset+0x44>)
 8000d44:	f000 ff20 	bl	8001b88 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000d48:	2064      	movs	r0, #100	; 0x64
 8000d4a:	f000 fc1d 	bl	8001588 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d54:	4809      	ldr	r0, [pc, #36]	; (8000d7c <PN532_Reset+0x44>)
 8000d56:	f000 ff17 	bl	8001b88 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000d5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d5e:	f000 fc13 	bl	8001588 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d68:	4804      	ldr	r0, [pc, #16]	; (8000d7c <PN532_Reset+0x44>)
 8000d6a:	f000 ff0d 	bl	8001b88 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000d6e:	2064      	movs	r0, #100	; 0x64
 8000d70:	f000 fc0a 	bl	8001588 <HAL_Delay>
    return PN532_STATUS_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <PN532_Log>:

void PN532_Log(const char* log) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4803      	ldr	r0, [pc, #12]	; (8000d98 <PN532_Log+0x18>)
 8000d8c:	f002 fe5c 	bl	8003a48 <iprintf>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	08004da0 	.word	0x08004da0

08000d9c <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	460b      	mov	r3, r1
 8000da6:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2101      	movs	r1, #1
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <spi_rw+0x48>)
 8000dae:	f000 feeb 	bl	8001b88 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000db2:	2001      	movs	r0, #1
 8000db4:	f000 fbe8 	bl	8001588 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi1, data, data, count, _SPI_TIMEOUT);
 8000db8:	78fb      	ldrb	r3, [r7, #3]
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	4613      	mov	r3, r2
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <spi_rw+0x4c>)
 8000dc8:	f001 fb73 	bl	80024b2 <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8000dcc:	2001      	movs	r0, #1
 8000dce:	f000 fbdb 	bl	8001588 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4803      	ldr	r0, [pc, #12]	; (8000de4 <spi_rw+0x48>)
 8000dd8:	f000 fed6 	bl	8001b88 <HAL_GPIO_WritePin>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	2000009c 	.word	0x2000009c

08000dec <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8000dec:	b5b0      	push	{r4, r5, r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
 8000df8:	466b      	mov	r3, sp
 8000dfa:	461d      	mov	r5, r3
    uint8_t frame[count + 1];
 8000dfc:	887b      	ldrh	r3, [r7, #2]
 8000dfe:	1c58      	adds	r0, r3, #1
 8000e00:	1e43      	subs	r3, r0, #1
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	4603      	mov	r3, r0
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 0200 	mov.w	r2, #0
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	f04f 0400 	mov.w	r4, #0
 8000e14:	00d4      	lsls	r4, r2, #3
 8000e16:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e1a:	00cb      	lsls	r3, r1, #3
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	f04f 0400 	mov.w	r4, #0
 8000e2c:	00d4      	lsls	r4, r2, #3
 8000e2e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000e32:	00cb      	lsls	r3, r1, #3
 8000e34:	4603      	mov	r3, r0
 8000e36:	3307      	adds	r3, #7
 8000e38:	08db      	lsrs	r3, r3, #3
 8000e3a:	00db      	lsls	r3, r3, #3
 8000e3c:	ebad 0d03 	sub.w	sp, sp, r3
 8000e40:	466b      	mov	r3, sp
 8000e42:	3300      	adds	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	2203      	movs	r2, #3
 8000e4a:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 8000e4c:	2005      	movs	r0, #5
 8000e4e:	f000 fb9b 	bl	8001588 <HAL_Delay>
    spi_rw(frame, count + 1);
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4610      	mov	r0, r2
 8000e60:	f7ff ff9c 	bl	8000d9c <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 8000e64:	2300      	movs	r3, #0
 8000e66:	75fb      	strb	r3, [r7, #23]
 8000e68:	e00a      	b.n	8000e80 <PN532_SPI_ReadData+0x94>
        data[i] = frame[i + 1];
 8000e6a:	7dfb      	ldrb	r3, [r7, #23]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	6879      	ldr	r1, [r7, #4]
 8000e72:	440b      	add	r3, r1
 8000e74:	68f9      	ldr	r1, [r7, #12]
 8000e76:	5c8a      	ldrb	r2, [r1, r2]
 8000e78:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000e7a:	7dfb      	ldrb	r3, [r7, #23]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	75fb      	strb	r3, [r7, #23]
 8000e80:	7dfb      	ldrb	r3, [r7, #23]
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	887a      	ldrh	r2, [r7, #2]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d8ef      	bhi.n	8000e6a <PN532_SPI_ReadData+0x7e>
    }
    return PN532_STATUS_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	46ad      	mov	sp, r5
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bdb0      	pop	{r4, r5, r7, pc}

08000e96 <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 8000e96:	b5b0      	push	{r4, r5, r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	807b      	strh	r3, [r7, #2]
 8000ea2:	466b      	mov	r3, sp
 8000ea4:	461d      	mov	r5, r3
    uint8_t frame[count + 1];
 8000ea6:	887b      	ldrh	r3, [r7, #2]
 8000ea8:	1c58      	adds	r0, r3, #1
 8000eaa:	1e43      	subs	r3, r0, #1
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4603      	mov	r3, r0
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	f04f 0400 	mov.w	r4, #0
 8000ebe:	00d4      	lsls	r4, r2, #3
 8000ec0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000ec4:	00cb      	lsls	r3, r1, #3
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	f04f 0300 	mov.w	r3, #0
 8000ed2:	f04f 0400 	mov.w	r4, #0
 8000ed6:	00d4      	lsls	r4, r2, #3
 8000ed8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000edc:	00cb      	lsls	r3, r1, #3
 8000ede:	4603      	mov	r3, r0
 8000ee0:	3307      	adds	r3, #7
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	ebad 0d03 	sub.w	sp, sp, r3
 8000eea:	466b      	mov	r3, sp
 8000eec:	3300      	adds	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	75fb      	strb	r3, [r7, #23]
 8000efa:	e00a      	b.n	8000f12 <PN532_SPI_WriteData+0x7c>
        frame[i + 1] = data[i];
 8000efc:	7dfb      	ldrb	r3, [r7, #23]
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	441a      	add	r2, r3
 8000f02:	7dfb      	ldrb	r3, [r7, #23]
 8000f04:	3301      	adds	r3, #1
 8000f06:	7811      	ldrb	r1, [r2, #0]
 8000f08:	68fa      	ldr	r2, [r7, #12]
 8000f0a:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8000f0c:	7dfb      	ldrb	r3, [r7, #23]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	75fb      	strb	r3, [r7, #23]
 8000f12:	7dfb      	ldrb	r3, [r7, #23]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	887a      	ldrh	r2, [r7, #2]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8ef      	bhi.n	8000efc <PN532_SPI_WriteData+0x66>
    }
    spi_rw(frame, count + 1);
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	887b      	ldrh	r3, [r7, #2]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	4619      	mov	r1, r3
 8000f28:	4610      	mov	r0, r2
 8000f2a:	f7ff ff37 	bl	8000d9c <spi_rw>
    return PN532_STATUS_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	46ad      	mov	sp, r5
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3718      	adds	r7, #24
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bdb0      	pop	{r4, r5, r7, pc}

08000f3a <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 8000f42:	2302      	movs	r3, #2
 8000f44:	723b      	strb	r3, [r7, #8]
 8000f46:	2300      	movs	r3, #0
 8000f48:	727b      	strb	r3, [r7, #9]
    uint32_t tickstart = HAL_GetTick();
 8000f4a:	f000 fb13 	bl	8001574 <HAL_GetTick>
 8000f4e:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8000f50:	e010      	b.n	8000f74 <PN532_SPI_WaitReady+0x3a>
        HAL_Delay(10);
 8000f52:	200a      	movs	r0, #10
 8000f54:	f000 fb18 	bl	8001588 <HAL_Delay>
        spi_rw(status, sizeof(status));
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	2102      	movs	r1, #2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff1c 	bl	8000d9c <spi_rw>
        if (status[1] == _SPI_READY) {
 8000f64:	7a7b      	ldrb	r3, [r7, #9]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <PN532_SPI_WaitReady+0x34>
            return true;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00b      	b.n	8000f86 <PN532_SPI_WaitReady+0x4c>
        } else {
            HAL_Delay(5);
 8000f6e:	2005      	movs	r0, #5
 8000f70:	f000 fb0a 	bl	8001588 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8000f74:	f000 fafe 	bl	8001574 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d8e6      	bhi.n	8000f52 <PN532_SPI_WaitReady+0x18>
        }
    }
    return false;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 8000f96:	2300      	movs	r3, #0
 8000f98:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 8000f9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9e:	f000 faf3 	bl	8001588 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	480a      	ldr	r0, [pc, #40]	; (8000fd0 <PN532_SPI_Wakeup+0x40>)
 8000fa8:	f000 fdee 	bl	8001b88 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8000fac:	2002      	movs	r0, #2
 8000fae:	f000 faeb 	bl	8001588 <HAL_Delay>
    spi_rw(data, 1);
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fef0 	bl	8000d9c <spi_rw>
    HAL_Delay(1000);
 8000fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc0:	f000 fae2 	bl	8001588 <HAL_Delay>
    return PN532_STATUS_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <PN532_SPI_Init+0x3c>)
 8000fe0:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	; (8001014 <PN532_SPI_Init+0x40>)
 8000fe6:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <PN532_SPI_Init+0x44>)
 8000fec:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <PN532_SPI_Init+0x48>)
 8000ff2:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <PN532_SPI_Init+0x4c>)
 8000ff8:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <PN532_SPI_Init+0x50>)
 8000ffe:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	4798      	blx	r3
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	08000d39 	.word	0x08000d39
 8001014:	08000ded 	.word	0x08000ded
 8001018:	08000e97 	.word	0x08000e97
 800101c:	08000f3b 	.word	0x08000f3b
 8001020:	08000f91 	.word	0x08000f91
 8001024:	08000d81 	.word	0x08000d81

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_MspInit+0x5c>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	4a14      	ldr	r2, [pc, #80]	; (8001084 <HAL_MspInit+0x5c>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6193      	str	r3, [r2, #24]
 800103a:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_MspInit+0x5c>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <HAL_MspInit+0x5c>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <HAL_MspInit+0x5c>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	61d3      	str	r3, [r2, #28]
 8001052:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <HAL_MspInit+0x5c>)
 8001054:	69db      	ldr	r3, [r3, #28]
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_MspInit+0x60>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_MspInit+0x60>)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000

0800108c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <HAL_SPI_MspInit+0x88>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d12f      	bne.n	800110c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_SPI_MspInit+0x8c>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a19      	ldr	r2, [pc, #100]	; (8001118 <HAL_SPI_MspInit+0x8c>)
 80010b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_SPI_MspInit+0x8c>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <HAL_SPI_MspInit+0x8c>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	4a13      	ldr	r2, [pc, #76]	; (8001118 <HAL_SPI_MspInit+0x8c>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	6193      	str	r3, [r2, #24]
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_SPI_MspInit+0x8c>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	f003 0304 	and.w	r3, r3, #4
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80010dc:	23a0      	movs	r3, #160	; 0xa0
 80010de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e4:	2303      	movs	r3, #3
 80010e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <HAL_SPI_MspInit+0x90>)
 80010f0:	f000 fbf0 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010f4:	2340      	movs	r3, #64	; 0x40
 80010f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	4619      	mov	r1, r3
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_SPI_MspInit+0x90>)
 8001108:	f000 fbe4 	bl	80018d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800110c:	bf00      	nop
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40013000 	.word	0x40013000
 8001118:	40021000 	.word	0x40021000
 800111c:	40010800 	.word	0x40010800

08001120 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001130:	d113      	bne.n	800115a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001134:	69db      	ldr	r3, [r3, #28]
 8001136:	4a0b      	ldr	r2, [pc, #44]	; (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	61d3      	str	r3, [r2, #28]
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_TIM_Base_MspInit+0x44>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2100      	movs	r1, #0
 800114e:	201c      	movs	r0, #28
 8001150:	f000 fb13 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001154:	201c      	movs	r0, #28
 8001156:	f000 fb2c 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <HAL_UART_MspInit+0x98>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d137      	bne.n	80011f8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <HAL_UART_MspInit+0x9c>)
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	4a1d      	ldr	r2, [pc, #116]	; (8001204 <HAL_UART_MspInit+0x9c>)
 800118e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001192:	61d3      	str	r3, [r2, #28]
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <HAL_UART_MspInit+0x9c>)
 8001196:	69db      	ldr	r3, [r3, #28]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a0:	4b18      	ldr	r3, [pc, #96]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011a2:	699b      	ldr	r3, [r3, #24]
 80011a4:	4a17      	ldr	r2, [pc, #92]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011a6:	f043 0304 	orr.w	r3, r3, #4
 80011aa:	6193      	str	r3, [r2, #24]
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_UART_MspInit+0x9c>)
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011b8:	2304      	movs	r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c0:	2303      	movs	r3, #3
 80011c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	4619      	mov	r1, r3
 80011ca:	480f      	ldr	r0, [pc, #60]	; (8001208 <HAL_UART_MspInit+0xa0>)
 80011cc:	f000 fb82 	bl	80018d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011d0:	2308      	movs	r3, #8
 80011d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4809      	ldr	r0, [pc, #36]	; (8001208 <HAL_UART_MspInit+0xa0>)
 80011e4:	f000 fb76 	bl	80018d4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	2026      	movs	r0, #38	; 0x26
 80011ee:	f000 fac4 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011f2:	2026      	movs	r0, #38	; 0x26
 80011f4:	f000 fadd 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40004400 	.word	0x40004400
 8001204:	40021000 	.word	0x40021000
 8001208:	40010800 	.word	0x40010800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <HardFault_Handler+0x4>

0800121e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <MemManage_Handler+0x4>

08001224 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <BusFault_Handler+0x4>

0800122a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <UsageFault_Handler+0x4>

08001230 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f97a 	bl	8001550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(strlen(buffer)>0)
 8001264:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <TIM2_IRQHandler+0x30>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <TIM2_IRQHandler+0x18>
		timer_count++;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <TIM2_IRQHandler+0x34>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	b2da      	uxtb	r2, r3
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <TIM2_IRQHandler+0x34>)
 8001276:	701a      	strb	r2, [r3, #0]

	if(timer_count>5)
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <TIM2_IRQHandler+0x34>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b05      	cmp	r3, #5
 800127e:	d901      	bls.n	8001284 <TIM2_IRQHandler+0x24>
		Message_handler();
 8001280:	f7ff f9f0 	bl	8000664 <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <TIM2_IRQHandler+0x38>)
 8001286:	f001 fb8c 	bl	80029a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000174 	.word	0x20000174
 8001294:	2000008c 	.word	0x2000008c
 8001298:	200000f4 	.word	0x200000f4

0800129c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*)&buffer[buffer_index++], 1, 10);
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <USART2_IRQHandler+0x3c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	b2d1      	uxtb	r1, r2
 80012a8:	4a0b      	ldr	r2, [pc, #44]	; (80012d8 <USART2_IRQHandler+0x3c>)
 80012aa:	7011      	strb	r1, [r2, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <USART2_IRQHandler+0x40>)
 80012b0:	18d1      	adds	r1, r2, r3
 80012b2:	230a      	movs	r3, #10
 80012b4:	2201      	movs	r2, #1
 80012b6:	480a      	ldr	r0, [pc, #40]	; (80012e0 <USART2_IRQHandler+0x44>)
 80012b8:	f001 ff94 	bl	80031e4 <HAL_UART_Receive>

	if(buffer[buffer_index-1] == '\n')
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <USART2_IRQHandler+0x3c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	4a06      	ldr	r2, [pc, #24]	; (80012dc <USART2_IRQHandler+0x40>)
 80012c4:	5cd3      	ldrb	r3, [r2, r3]
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d101      	bne.n	80012ce <USART2_IRQHandler+0x32>
		Message_handler();
 80012ca:	f7ff f9cb 	bl	8000664 <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <USART2_IRQHandler+0x44>)
 80012d0:	f002 f82e 	bl	8003330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000008d 	.word	0x2000008d
 80012dc:	20000174 	.word	0x20000174
 80012e0:	20000134 	.word	0x20000134

080012e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	e00a      	b.n	800130c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012f6:	f3af 8000 	nop.w
 80012fa:	4601      	mov	r1, r0
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	60ba      	str	r2, [r7, #8]
 8001302:	b2ca      	uxtb	r2, r1
 8001304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbf0      	blt.n	80012f6 <_read+0x12>
	}

return len;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
 800132e:	e009      	b.n	8001344 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	60ba      	str	r2, [r7, #8]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	697a      	ldr	r2, [r7, #20]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	429a      	cmp	r2, r3
 800134a:	dbf1      	blt.n	8001330 <_write+0x12>
	}
	return len;
 800134c:	687b      	ldr	r3, [r7, #4]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <_close>:

int _close(int file)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
	return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137c:	605a      	str	r2, [r3, #4]
	return 0;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <_isatty>:

int _isatty(int file)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
	return 1;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
	return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
	...

080013b8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <_sbrk+0x50>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x16>
		heap_end = &end;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <_sbrk+0x50>)
 80013ca:	4a10      	ldr	r2, [pc, #64]	; (800140c <_sbrk+0x54>)
 80013cc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <_sbrk+0x50>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <_sbrk+0x50>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	466a      	mov	r2, sp
 80013de:	4293      	cmp	r3, r2
 80013e0:	d907      	bls.n	80013f2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80013e2:	f002 faff 	bl	80039e4 <__errno>
 80013e6:	4602      	mov	r2, r0
 80013e8:	230c      	movs	r3, #12
 80013ea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	e006      	b.n	8001400 <_sbrk+0x48>
	}

	heap_end += incr;
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <_sbrk+0x50>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a03      	ldr	r2, [pc, #12]	; (8001408 <_sbrk+0x50>)
 80013fc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000090 	.word	0x20000090
 800140c:	200001b0 	.word	0x200001b0

08001410 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <SystemInit+0x5c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <SystemInit+0x5c>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <SystemInit+0x5c>)
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4911      	ldr	r1, [pc, #68]	; (800146c <SystemInit+0x5c>)
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <SystemInit+0x60>)
 8001428:	4013      	ands	r3, r2
 800142a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <SystemInit+0x5c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <SystemInit+0x5c>)
 8001432:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <SystemInit+0x5c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SystemInit+0x5c>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <SystemInit+0x5c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <SystemInit+0x5c>)
 800144e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001452:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SystemInit+0x5c>)
 8001456:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800145a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <SystemInit+0x64>)
 800145e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001462:	609a      	str	r2, [r3, #8]
#endif 
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000
 8001470:	f8ff0000 	.word	0xf8ff0000
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001478:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800147a:	e003      	b.n	8001484 <LoopCopyDataInit>

0800147c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800147c:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800147e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001480:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001482:	3104      	adds	r1, #4

08001484 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001484:	480a      	ldr	r0, [pc, #40]	; (80014b0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001488:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800148a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800148c:	d3f6      	bcc.n	800147c <CopyDataInit>
  ldr r2, =_sbss
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001490:	e002      	b.n	8001498 <LoopFillZerobss>

08001492 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001494:	f842 3b04 	str.w	r3, [r2], #4

08001498 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <LoopFillZerobss+0x24>)
  cmp r2, r3
 800149a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800149c:	d3f9      	bcc.n	8001492 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800149e:	f7ff ffb7 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a2:	f002 faa5 	bl	80039f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014a6:	f7fe fe59 	bl	800015c <main>
  bx lr
 80014aa:	4770      	bx	lr
  ldr r3, =_sidata
 80014ac:	08004e7c 	.word	0x08004e7c
  ldr r0, =_sdata
 80014b0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014b4:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80014b8:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80014bc:	200001b0 	.word	0x200001b0

080014c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c0:	e7fe      	b.n	80014c0 <ADC1_2_IRQHandler>
	...

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_Init+0x28>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <HAL_Init+0x28>)
 80014ce:	f043 0310 	orr.w	r3, r3, #16
 80014d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 f945 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f808 	bl	80014f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e0:	f7ff fda2 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40022000 	.word	0x40022000

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <HAL_InitTick+0x54>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x58>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4619      	mov	r1, r3
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	fbb3 f3f1 	udiv	r3, r3, r1
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f95d 	bl	80017ce <HAL_SYSTICK_Config>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e00e      	b.n	800153c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d80a      	bhi.n	800153a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f925 	bl	800177a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001530:	4a06      	ldr	r2, [pc, #24]	; (800154c <HAL_InitTick+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000000 	.word	0x20000000
 8001548:	20000008 	.word	0x20000008
 800154c:	20000004 	.word	0x20000004

08001550 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_IncTick+0x1c>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	4b05      	ldr	r3, [pc, #20]	; (8001570 <HAL_IncTick+0x20>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4413      	add	r3, r2
 8001560:	4a03      	ldr	r2, [pc, #12]	; (8001570 <HAL_IncTick+0x20>)
 8001562:	6013      	str	r3, [r2, #0]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000008 	.word	0x20000008
 8001570:	200001a8 	.word	0x200001a8

08001574 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return uwTick;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_GetTick+0x10>)
 800157a:	681b      	ldr	r3, [r3, #0]
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr
 8001584:	200001a8 	.word	0x200001a8

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff fff0 	bl	8001574 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <HAL_Delay+0x40>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffe0 	bl	8001574 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000008 	.word	0x20000008

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	; (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4906      	ldr	r1, [pc, #24]	; (8001664 <__NVIC_EnableIRQ+0x34>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	; (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	; (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	; 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	; (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff90 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	; (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	; (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff2d 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff42 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff35 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d005      	beq.n	800180a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2204      	movs	r2, #4
 8001802:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
 8001808:	e051      	b.n	80018ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 020e 	bic.w	r2, r2, #14
 8001818:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0201 	bic.w	r2, r2, #1
 8001828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a22      	ldr	r2, [pc, #136]	; (80018b8 <HAL_DMA_Abort_IT+0xd0>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d029      	beq.n	8001888 <HAL_DMA_Abort_IT+0xa0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <HAL_DMA_Abort_IT+0xd4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d022      	beq.n	8001884 <HAL_DMA_Abort_IT+0x9c>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <HAL_DMA_Abort_IT+0xd8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d01a      	beq.n	800187e <HAL_DMA_Abort_IT+0x96>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1d      	ldr	r2, [pc, #116]	; (80018c4 <HAL_DMA_Abort_IT+0xdc>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d012      	beq.n	8001878 <HAL_DMA_Abort_IT+0x90>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a1c      	ldr	r2, [pc, #112]	; (80018c8 <HAL_DMA_Abort_IT+0xe0>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00a      	beq.n	8001872 <HAL_DMA_Abort_IT+0x8a>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1a      	ldr	r2, [pc, #104]	; (80018cc <HAL_DMA_Abort_IT+0xe4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d102      	bne.n	800186c <HAL_DMA_Abort_IT+0x84>
 8001866:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800186a:	e00e      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 800186c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001870:	e00b      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 8001872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001876:	e008      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 8001878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187c:	e005      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 800187e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001882:	e002      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 8001884:	2310      	movs	r3, #16
 8001886:	e000      	b.n	800188a <HAL_DMA_Abort_IT+0xa2>
 8001888:	2301      	movs	r3, #1
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_DMA_Abort_IT+0xe8>)
 800188c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
    } 
  }
  return status;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40020008 	.word	0x40020008
 80018bc:	4002001c 	.word	0x4002001c
 80018c0:	40020030 	.word	0x40020030
 80018c4:	40020044 	.word	0x40020044
 80018c8:	40020058 	.word	0x40020058
 80018cc:	4002006c 	.word	0x4002006c
 80018d0:	40020000 	.word	0x40020000

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b08b      	sub	sp, #44	; 0x2c
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e6:	e127      	b.n	8001b38 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018e8:	2201      	movs	r2, #1
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	429a      	cmp	r2, r3
 8001902:	f040 8116 	bne.w	8001b32 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b12      	cmp	r3, #18
 800190c:	d034      	beq.n	8001978 <HAL_GPIO_Init+0xa4>
 800190e:	2b12      	cmp	r3, #18
 8001910:	d80d      	bhi.n	800192e <HAL_GPIO_Init+0x5a>
 8001912:	2b02      	cmp	r3, #2
 8001914:	d02b      	beq.n	800196e <HAL_GPIO_Init+0x9a>
 8001916:	2b02      	cmp	r3, #2
 8001918:	d804      	bhi.n	8001924 <HAL_GPIO_Init+0x50>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d031      	beq.n	8001982 <HAL_GPIO_Init+0xae>
 800191e:	2b01      	cmp	r3, #1
 8001920:	d01c      	beq.n	800195c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001922:	e048      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001924:	2b03      	cmp	r3, #3
 8001926:	d043      	beq.n	80019b0 <HAL_GPIO_Init+0xdc>
 8001928:	2b11      	cmp	r3, #17
 800192a:	d01b      	beq.n	8001964 <HAL_GPIO_Init+0x90>
          break;
 800192c:	e043      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800192e:	4a89      	ldr	r2, [pc, #548]	; (8001b54 <HAL_GPIO_Init+0x280>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d026      	beq.n	8001982 <HAL_GPIO_Init+0xae>
 8001934:	4a87      	ldr	r2, [pc, #540]	; (8001b54 <HAL_GPIO_Init+0x280>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d806      	bhi.n	8001948 <HAL_GPIO_Init+0x74>
 800193a:	4a87      	ldr	r2, [pc, #540]	; (8001b58 <HAL_GPIO_Init+0x284>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d020      	beq.n	8001982 <HAL_GPIO_Init+0xae>
 8001940:	4a86      	ldr	r2, [pc, #536]	; (8001b5c <HAL_GPIO_Init+0x288>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01d      	beq.n	8001982 <HAL_GPIO_Init+0xae>
          break;
 8001946:	e036      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001948:	4a85      	ldr	r2, [pc, #532]	; (8001b60 <HAL_GPIO_Init+0x28c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d019      	beq.n	8001982 <HAL_GPIO_Init+0xae>
 800194e:	4a85      	ldr	r2, [pc, #532]	; (8001b64 <HAL_GPIO_Init+0x290>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d016      	beq.n	8001982 <HAL_GPIO_Init+0xae>
 8001954:	4a84      	ldr	r2, [pc, #528]	; (8001b68 <HAL_GPIO_Init+0x294>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0xae>
          break;
 800195a:	e02c      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	623b      	str	r3, [r7, #32]
          break;
 8001962:	e028      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	3304      	adds	r3, #4
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e023      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	3308      	adds	r3, #8
 8001974:	623b      	str	r3, [r7, #32]
          break;
 8001976:	e01e      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	330c      	adds	r3, #12
 800197e:	623b      	str	r3, [r7, #32]
          break;
 8001980:	e019      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800198a:	2304      	movs	r3, #4
 800198c:	623b      	str	r3, [r7, #32]
          break;
 800198e:	e012      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	611a      	str	r2, [r3, #16]
          break;
 80019a2:	e008      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019a4:	2308      	movs	r3, #8
 80019a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69fa      	ldr	r2, [r7, #28]
 80019ac:	615a      	str	r2, [r3, #20]
          break;
 80019ae:	e002      	b.n	80019b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019b0:	2300      	movs	r3, #0
 80019b2:	623b      	str	r3, [r7, #32]
          break;
 80019b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2bff      	cmp	r3, #255	; 0xff
 80019ba:	d801      	bhi.n	80019c0 <HAL_GPIO_Init+0xec>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	e001      	b.n	80019c4 <HAL_GPIO_Init+0xf0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3304      	adds	r3, #4
 80019c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	2bff      	cmp	r3, #255	; 0xff
 80019ca:	d802      	bhi.n	80019d2 <HAL_GPIO_Init+0xfe>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x104>
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	3b08      	subs	r3, #8
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	210f      	movs	r1, #15
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	401a      	ands	r2, r3
 80019ea:	6a39      	ldr	r1, [r7, #32]
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	431a      	orrs	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 8096 	beq.w	8001b32 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a06:	4b59      	ldr	r3, [pc, #356]	; (8001b6c <HAL_GPIO_Init+0x298>)
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <HAL_GPIO_Init+0x298>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6193      	str	r3, [r2, #24]
 8001a12:	4b56      	ldr	r3, [pc, #344]	; (8001b6c <HAL_GPIO_Init+0x298>)
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a1e:	4a54      	ldr	r2, [pc, #336]	; (8001b70 <HAL_GPIO_Init+0x29c>)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4b      	ldr	r2, [pc, #300]	; (8001b74 <HAL_GPIO_Init+0x2a0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d013      	beq.n	8001a72 <HAL_GPIO_Init+0x19e>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4a      	ldr	r2, [pc, #296]	; (8001b78 <HAL_GPIO_Init+0x2a4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d00d      	beq.n	8001a6e <HAL_GPIO_Init+0x19a>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a49      	ldr	r2, [pc, #292]	; (8001b7c <HAL_GPIO_Init+0x2a8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d007      	beq.n	8001a6a <HAL_GPIO_Init+0x196>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_GPIO_Init+0x2ac>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d101      	bne.n	8001a66 <HAL_GPIO_Init+0x192>
 8001a62:	2303      	movs	r3, #3
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x1a0>
 8001a66:	2304      	movs	r3, #4
 8001a68:	e004      	b.n	8001a74 <HAL_GPIO_Init+0x1a0>
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_Init+0x1a0>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <HAL_GPIO_Init+0x1a0>
 8001a72:	2300      	movs	r3, #0
 8001a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a76:	f002 0203 	and.w	r2, r2, #3
 8001a7a:	0092      	lsls	r2, r2, #2
 8001a7c:	4093      	lsls	r3, r2
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a84:	493a      	ldr	r1, [pc, #232]	; (8001b70 <HAL_GPIO_Init+0x29c>)
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	089b      	lsrs	r3, r3, #2
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a9e:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	4938      	ldr	r1, [pc, #224]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]
 8001aaa:	e006      	b.n	8001aba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aac:	4b35      	ldr	r3, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	4933      	ldr	r1, [pc, #204]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d006      	beq.n	8001ad4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ac6:	4b2f      	ldr	r3, [pc, #188]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	492e      	ldr	r1, [pc, #184]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e006      	b.n	8001ae2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	43db      	mvns	r3, r3
 8001adc:	4929      	ldr	r1, [pc, #164]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001aee:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	4924      	ldr	r1, [pc, #144]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	608b      	str	r3, [r1, #8]
 8001afa:	e006      	b.n	8001b0a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	43db      	mvns	r3, r3
 8001b04:	491f      	ldr	r1, [pc, #124]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001b06:	4013      	ands	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b16:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	491a      	ldr	r1, [pc, #104]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60cb      	str	r3, [r1, #12]
 8001b22:	e006      	b.n	8001b32 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b24:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	4915      	ldr	r1, [pc, #84]	; (8001b84 <HAL_GPIO_Init+0x2b0>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	3301      	adds	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f47f aed0 	bne.w	80018e8 <HAL_GPIO_Init+0x14>
  }
}
 8001b48:	bf00      	nop
 8001b4a:	372c      	adds	r7, #44	; 0x2c
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	10210000 	.word	0x10210000
 8001b58:	10110000 	.word	0x10110000
 8001b5c:	10120000 	.word	0x10120000
 8001b60:	10310000 	.word	0x10310000
 8001b64:	10320000 	.word	0x10320000
 8001b68:	10220000 	.word	0x10220000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	40010000 	.word	0x40010000
 8001b74:	40010800 	.word	0x40010800
 8001b78:	40010c00 	.word	0x40010c00
 8001b7c:	40011000 	.word	0x40011000
 8001b80:	40011400 	.word	0x40011400
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e26c      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8087 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd8:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d00c      	beq.n	8001bfe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be4:	4b8f      	ldr	r3, [pc, #572]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 030c 	and.w	r3, r3, #12
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d112      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5e>
 8001bf0:	4b8c      	ldr	r3, [pc, #560]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d10b      	bne.n	8001c16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfe:	4b89      	ldr	r3, [pc, #548]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d06c      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x12c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d168      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e246      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1e:	d106      	bne.n	8001c2e <HAL_RCC_OscConfig+0x76>
 8001c20:	4b80      	ldr	r3, [pc, #512]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a7f      	ldr	r2, [pc, #508]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e02e      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x98>
 8001c36:	4b7b      	ldr	r3, [pc, #492]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a7a      	ldr	r2, [pc, #488]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b78      	ldr	r3, [pc, #480]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a77      	ldr	r2, [pc, #476]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e01d      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0xbc>
 8001c5a:	4b72      	ldr	r3, [pc, #456]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a71      	ldr	r2, [pc, #452]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0xd4>
 8001c74:	4b6b      	ldr	r3, [pc, #428]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a6a      	ldr	r2, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	4b68      	ldr	r3, [pc, #416]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a67      	ldr	r2, [pc, #412]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d013      	beq.n	8001cbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fc6e 	bl	8001574 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff fc6a 	bl	8001574 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1fa      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0xe4>
 8001cba:	e014      	b.n	8001ce6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fc5a 	bl	8001574 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7ff fc56 	bl	8001574 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	; 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e1e6      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd6:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x10c>
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d063      	beq.n	8001dba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf2:	4b4c      	ldr	r3, [pc, #304]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfe:	4b49      	ldr	r3, [pc, #292]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d11c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x18c>
 8001d0a:	4b46      	ldr	r3, [pc, #280]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d116      	bne.n	8001d44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x176>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e1ba      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4939      	ldr	r1, [pc, #228]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d42:	e03a      	b.n	8001dba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d020      	beq.n	8001d8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	2201      	movs	r2, #1
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fc0f 	bl	8001574 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fc0b 	bl	8001574 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e19b      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	695b      	ldr	r3, [r3, #20]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4927      	ldr	r1, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]
 8001d8c:	e015      	b.n	8001dba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <HAL_RCC_OscConfig+0x270>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fbee 	bl	8001574 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fbea 	bl	8001574 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e17a      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b1d      	ldr	r3, [pc, #116]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d03a      	beq.n	8001e3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d019      	beq.n	8001e02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dce:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fbce 	bl	8001574 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ddc:	f7ff fbca 	bl	8001574 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e15a      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_RCC_OscConfig+0x26c>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f000 fada 	bl	80023b4 <RCC_Delay>
 8001e00:	e01c      	b.n	8001e3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_RCC_OscConfig+0x274>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e08:	f7ff fbb4 	bl	8001574 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0e:	e00f      	b.n	8001e30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7ff fbb0 	bl	8001574 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d908      	bls.n	8001e30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e140      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	42420000 	.word	0x42420000
 8001e2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e30:	4b9e      	ldr	r3, [pc, #632]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1e9      	bne.n	8001e10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 80a6 	beq.w	8001f96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4e:	4b97      	ldr	r3, [pc, #604]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10d      	bne.n	8001e76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5a:	4b94      	ldr	r3, [pc, #592]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	4a93      	ldr	r2, [pc, #588]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e64:	61d3      	str	r3, [r2, #28]
 8001e66:	4b91      	ldr	r3, [pc, #580]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001e68:	69db      	ldr	r3, [r3, #28]
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e72:	2301      	movs	r3, #1
 8001e74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e76:	4b8e      	ldr	r3, [pc, #568]	; (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d118      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e82:	4b8b      	ldr	r3, [pc, #556]	; (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a8a      	ldr	r2, [pc, #552]	; (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7ff fb71 	bl	8001574 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e96:	f7ff fb6d 	bl	8001574 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b64      	cmp	r3, #100	; 0x64
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e0fd      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	4b81      	ldr	r3, [pc, #516]	; (80020b0 <HAL_RCC_OscConfig+0x4f8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f0      	beq.n	8001e96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_OscConfig+0x312>
 8001ebc:	4b7b      	ldr	r3, [pc, #492]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	4a7a      	ldr	r2, [pc, #488]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6213      	str	r3, [r2, #32]
 8001ec8:	e02d      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10c      	bne.n	8001eec <HAL_RCC_OscConfig+0x334>
 8001ed2:	4b76      	ldr	r3, [pc, #472]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	4a75      	ldr	r2, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6213      	str	r3, [r2, #32]
 8001ede:	4b73      	ldr	r3, [pc, #460]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4a72      	ldr	r2, [pc, #456]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	f023 0304 	bic.w	r3, r3, #4
 8001ee8:	6213      	str	r3, [r2, #32]
 8001eea:	e01c      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b05      	cmp	r3, #5
 8001ef2:	d10c      	bne.n	8001f0e <HAL_RCC_OscConfig+0x356>
 8001ef4:	4b6d      	ldr	r3, [pc, #436]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	4a6c      	ldr	r2, [pc, #432]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	f043 0304 	orr.w	r3, r3, #4
 8001efe:	6213      	str	r3, [r2, #32]
 8001f00:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	4a69      	ldr	r2, [pc, #420]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6213      	str	r3, [r2, #32]
 8001f0c:	e00b      	b.n	8001f26 <HAL_RCC_OscConfig+0x36e>
 8001f0e:	4b67      	ldr	r3, [pc, #412]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	4a66      	ldr	r2, [pc, #408]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	f023 0301 	bic.w	r3, r3, #1
 8001f18:	6213      	str	r3, [r2, #32]
 8001f1a:	4b64      	ldr	r3, [pc, #400]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
 8001f1e:	4a63      	ldr	r2, [pc, #396]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	f023 0304 	bic.w	r3, r3, #4
 8001f24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d015      	beq.n	8001f5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fb21 	bl	8001574 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7ff fb1d 	bl	8001574 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e0ab      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4c:	4b57      	ldr	r3, [pc, #348]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0ee      	beq.n	8001f36 <HAL_RCC_OscConfig+0x37e>
 8001f58:	e014      	b.n	8001f84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fb0b 	bl	8001574 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f60:	e00a      	b.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff fb07 	bl	8001574 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e095      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f78:	4b4c      	ldr	r3, [pc, #304]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d1ee      	bne.n	8001f62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d105      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8a:	4b48      	ldr	r3, [pc, #288]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	4a47      	ldr	r2, [pc, #284]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f000 8081 	beq.w	80020a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d061      	beq.n	8002070 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d146      	bne.n	8002042 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_RCC_OscConfig+0x4fc>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fba:	f7ff fadb 	bl	8001574 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7ff fad7 	bl	8001574 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e067      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a1b      	ldr	r3, [r3, #32]
 8001fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fea:	4b30      	ldr	r3, [pc, #192]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	492d      	ldr	r1, [pc, #180]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ffc:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a19      	ldr	r1, [r3, #32]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200c:	430b      	orrs	r3, r1
 800200e:	4927      	ldr	r1, [pc, #156]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8002010:	4313      	orrs	r3, r2
 8002012:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <HAL_RCC_OscConfig+0x4fc>)
 8002016:	2201      	movs	r2, #1
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff faab 	bl	8001574 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff faa7 	bl	8001574 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e037      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x46a>
 8002040:	e02f      	b.n	80020a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_RCC_OscConfig+0x4fc>)
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fa94 	bl	8001574 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002050:	f7ff fa90 	bl	8001574 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b02      	cmp	r3, #2
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e020      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002062:	4b12      	ldr	r3, [pc, #72]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0x498>
 800206e:	e018      	b.n	80020a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e013      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800207c:	4b0b      	ldr	r3, [pc, #44]	; (80020ac <HAL_RCC_OscConfig+0x4f4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	429a      	cmp	r2, r3
 800208e:	d106      	bne.n	800209e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40007000 	.word	0x40007000
 80020b4:	42420060 	.word	0x42420060

080020b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d0      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b67      	ldr	r3, [pc, #412]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4965      	ldr	r1, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800211e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d040      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b41      	ldr	r3, [pc, #260]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e073      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4936      	ldr	r1, [pc, #216]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7ff f9e4 	bl	8001574 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7ff f9e0 	bl	8001574 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e053      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d210      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4922      	ldr	r1, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f821 	bl	800228c <HAL_RCC_GetSysClockFreq>
 800224a:	4601      	mov	r1, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	4a0a      	ldr	r2, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	5cd3      	ldrb	r3, [r2, r3]
 800225a:	fa21 f303 	lsr.w	r3, r1, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1cc>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f942 	bl	80014f0 <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	08004dc4 	.word	0x08004dc4
 8002284:	20000000 	.word	0x20000000
 8002288:	20000004 	.word	0x20000004

0800228c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	b490      	push	{r4, r7}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002292:	4b2a      	ldr	r3, [pc, #168]	; (800233c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002294:	1d3c      	adds	r4, r7, #4
 8002296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800229c:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_RCC_GetSysClockFreq+0xb4>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022b6:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d002      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0x40>
 80022c6:	2b08      	cmp	r3, #8
 80022c8:	d003      	beq.n	80022d2 <HAL_RCC_GetSysClockFreq+0x46>
 80022ca:	e02d      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022ce:	623b      	str	r3, [r7, #32]
      break;
 80022d0:	e02d      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	0c9b      	lsrs	r3, r3, #18
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022de:	4413      	add	r3, r2
 80022e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022e4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d013      	beq.n	8002318 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	0c5b      	lsrs	r3, r3, #17
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022fe:	4413      	add	r3, r2
 8002300:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002304:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 800230a:	fb02 f203 	mul.w	r2, r2, r3
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	fbb2 f3f3 	udiv	r3, r2, r3
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e004      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_RCC_GetSysClockFreq+0xc0>)
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	623b      	str	r3, [r7, #32]
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <HAL_RCC_GetSysClockFreq+0xbc>)
 800232a:	623b      	str	r3, [r7, #32]
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	6a3b      	ldr	r3, [r7, #32]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3728      	adds	r7, #40	; 0x28
 8002334:	46bd      	mov	sp, r7
 8002336:	bc90      	pop	{r4, r7}
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	08004da8 	.word	0x08004da8
 8002340:	08004db8 	.word	0x08004db8
 8002344:	40021000 	.word	0x40021000
 8002348:	007a1200 	.word	0x007a1200
 800234c:	003d0900 	.word	0x003d0900

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002354:	4b02      	ldr	r3, [pc, #8]	; (8002360 <HAL_RCC_GetHCLKFreq+0x10>)
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	20000000 	.word	0x20000000

08002364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002368:	f7ff fff2 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 800236c:	4601      	mov	r1, r0
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	4a03      	ldr	r2, [pc, #12]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	08004dd4 	.word	0x08004dd4

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffde 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 8002394:	4601      	mov	r1, r0
 8002396:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	4a03      	ldr	r2, [pc, #12]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	08004dd4 	.word	0x08004dd4

080023b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <RCC_Delay+0x34>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <RCC_Delay+0x38>)
 80023c2:	fba2 2303 	umull	r2, r3, r2, r3
 80023c6:	0a5b      	lsrs	r3, r3, #9
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	fb02 f303 	mul.w	r3, r2, r3
 80023ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023d0:	bf00      	nop
  }
  while (Delay --);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1e5a      	subs	r2, r3, #1
 80023d6:	60fa      	str	r2, [r7, #12]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f9      	bne.n	80023d0 <RCC_Delay+0x1c>
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc80      	pop	{r7}
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	20000000 	.word	0x20000000
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e053      	b.n	80024aa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d106      	bne.n	8002422 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7fe fe35 	bl	800108c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002438:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	431a      	orrs	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	ea42 0103 	orr.w	r1, r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	0c1a      	lsrs	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f002 0204 	and.w	r2, r2, #4
 8002488:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002498:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b08c      	sub	sp, #48	; 0x30
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024c0:	2301      	movs	r3, #1
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_SPI_TransmitReceive+0x26>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e18a      	b.n	80027ee <HAL_SPI_TransmitReceive+0x33c>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024e0:	f7ff f848 	bl	8001574 <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80024f6:	887b      	ldrh	r3, [r7, #2]
 80024f8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80024fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d00f      	beq.n	8002522 <HAL_SPI_TransmitReceive+0x70>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002508:	d107      	bne.n	800251a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <HAL_SPI_TransmitReceive+0x68>
 8002512:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002516:	2b04      	cmp	r3, #4
 8002518:	d003      	beq.n	8002522 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800251a:	2302      	movs	r3, #2
 800251c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002520:	e15b      	b.n	80027da <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_SPI_TransmitReceive+0x82>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d002      	beq.n	8002534 <HAL_SPI_TransmitReceive+0x82>
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d103      	bne.n	800253c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800253a:	e14e      	b.n	80027da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b04      	cmp	r3, #4
 8002546:	d003      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2205      	movs	r2, #5
 800254c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	887a      	ldrh	r2, [r7, #2]
 8002560:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	887a      	ldrh	r2, [r7, #2]
 8002572:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	887a      	ldrh	r2, [r7, #2]
 8002578:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002590:	2b40      	cmp	r3, #64	; 0x40
 8002592:	d007      	beq.n	80025a4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025ac:	d178      	bne.n	80026a0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d002      	beq.n	80025bc <HAL_SPI_TransmitReceive+0x10a>
 80025b6:	8b7b      	ldrh	r3, [r7, #26]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d166      	bne.n	800268a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025cc:	1c9a      	adds	r2, r3, #2
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	3b01      	subs	r3, #1
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e0:	e053      	b.n	800268a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d11b      	bne.n	8002628 <HAL_SPI_TransmitReceive+0x176>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <HAL_SPI_TransmitReceive+0x176>
 80025fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d113      	bne.n	8002628 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002604:	881a      	ldrh	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	1c9a      	adds	r2, r3, #2
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b01      	cmp	r3, #1
 8002634:	d119      	bne.n	800266a <HAL_SPI_TransmitReceive+0x1b8>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d014      	beq.n	800266a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264a:	b292      	uxth	r2, r2
 800264c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	1c9a      	adds	r2, r3, #2
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002666:	2301      	movs	r3, #1
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800266a:	f7fe ff83 	bl	8001574 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002676:	429a      	cmp	r2, r3
 8002678:	d807      	bhi.n	800268a <HAL_SPI_TransmitReceive+0x1d8>
 800267a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002680:	d003      	beq.n	800268a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002688:	e0a7      	b.n	80027da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800268e:	b29b      	uxth	r3, r3
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1a6      	bne.n	80025e2 <HAL_SPI_TransmitReceive+0x130>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1a1      	bne.n	80025e2 <HAL_SPI_TransmitReceive+0x130>
 800269e:	e07c      	b.n	800279a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_SPI_TransmitReceive+0x1fc>
 80026a8:	8b7b      	ldrh	r3, [r7, #26]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d16b      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	330c      	adds	r3, #12
 80026b8:	7812      	ldrb	r2, [r2, #0]
 80026ba:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026d4:	e057      	b.n	8002786 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d11c      	bne.n	800271e <HAL_SPI_TransmitReceive+0x26c>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d017      	beq.n	800271e <HAL_SPI_TransmitReceive+0x26c>
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d114      	bne.n	800271e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	330c      	adds	r3, #12
 80026fe:	7812      	ldrb	r2, [r2, #0]
 8002700:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d119      	bne.n	8002760 <HAL_SPI_TransmitReceive+0x2ae>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d014      	beq.n	8002760 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002752:	b29b      	uxth	r3, r3
 8002754:	3b01      	subs	r3, #1
 8002756:	b29a      	uxth	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800275c:	2301      	movs	r3, #1
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002760:	f7fe ff08 	bl	8001574 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800276c:	429a      	cmp	r2, r3
 800276e:	d803      	bhi.n	8002778 <HAL_SPI_TransmitReceive+0x2c6>
 8002770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002776:	d102      	bne.n	800277e <HAL_SPI_TransmitReceive+0x2cc>
 8002778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800277a:	2b00      	cmp	r3, #0
 800277c:	d103      	bne.n	8002786 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002784:	e029      	b.n	80027da <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278a:	b29b      	uxth	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1a2      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x224>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d19d      	bne.n	80026d6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800279a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800279c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f893 	bl	80028ca <SPI_EndRxTxTransaction>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80027b6:	e010      	b.n	80027da <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10b      	bne.n	80027d8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	e000      	b.n	80027da <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80027d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80027ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3730      	adds	r7, #48	; 0x30
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b084      	sub	sp, #16
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	60f8      	str	r0, [r7, #12]
 80027fe:	60b9      	str	r1, [r7, #8]
 8002800:	603b      	str	r3, [r7, #0]
 8002802:	4613      	mov	r3, r2
 8002804:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002806:	e04c      	b.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280e:	d048      	beq.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002810:	f7fe feb0 	bl	8001574 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	429a      	cmp	r2, r3
 800281e:	d902      	bls.n	8002826 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d13d      	bne.n	80028a2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800283e:	d111      	bne.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002848:	d004      	beq.n	8002854 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002852:	d107      	bne.n	8002864 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286c:	d10f      	bne.n	800288e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800288c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e00f      	b.n	80028c2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	bf0c      	ite	eq
 80028b2:	2301      	moveq	r3, #1
 80028b4:	2300      	movne	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d1a3      	bne.n	8002808 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b086      	sub	sp, #24
 80028ce:	af02      	add	r7, sp, #8
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f7ff ff88 	bl	80027f6 <SPI_WaitFlagStateUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f0:	f043 0220 	orr.w	r2, r3, #32
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e000      	b.n	80028fe <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e01d      	b.n	8002954 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fe fbf7 	bl	8001120 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3304      	adds	r3, #4
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f000 fa19 	bl	8002d7c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f042 0201 	orr.w	r2, r2, #1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b06      	cmp	r3, #6
 8002984:	d007      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d122      	bne.n	80029fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d11b      	bne.n	80029fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f06f 0202 	mvn.w	r2, #2
 80029ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f9ad 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 80029ea:	e005      	b.n	80029f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f9a0 	bl	8002d32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f000 f9af 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b04      	cmp	r3, #4
 8002a0a:	d122      	bne.n	8002a52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d11b      	bne.n	8002a52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f06f 0204 	mvn.w	r2, #4
 8002a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d003      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f983 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002a3e:	e005      	b.n	8002a4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f976 	bl	8002d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f985 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d122      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d11b      	bne.n	8002aa6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f06f 0208 	mvn.w	r2, #8
 8002a76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f959 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002a92:	e005      	b.n	8002aa0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f94c 	bl	8002d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f95b 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b10      	cmp	r3, #16
 8002ab2:	d122      	bne.n	8002afa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f003 0310 	and.w	r3, r3, #16
 8002abe:	2b10      	cmp	r3, #16
 8002ac0:	d11b      	bne.n	8002afa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f06f 0210 	mvn.w	r2, #16
 8002aca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2208      	movs	r2, #8
 8002ad0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f000 f92f 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8002ae6:	e005      	b.n	8002af4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f922 	bl	8002d32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f931 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10e      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d107      	bne.n	8002b26 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f06f 0201 	mvn.w	r2, #1
 8002b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f8fd 	bl	8002d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d10e      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3e:	2b80      	cmp	r3, #128	; 0x80
 8002b40:	d107      	bne.n	8002b52 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fa5a 	bl	8003006 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5c:	2b40      	cmp	r3, #64	; 0x40
 8002b5e:	d10e      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d107      	bne.n	8002b7e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f8f5 	bl	8002d68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b20      	cmp	r3, #32
 8002b8a:	d10e      	bne.n	8002baa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d107      	bne.n	8002baa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f06f 0220 	mvn.w	r2, #32
 8002ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fa25 	bl	8002ff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_ConfigClockSource+0x18>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0a6      	b.n	8002d18 <HAL_TIM_ConfigClockSource+0x166>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002be8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bf0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d067      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x120>
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d80b      	bhi.n	8002c1e <HAL_TIM_ConfigClockSource+0x6c>
 8002c06:	2b10      	cmp	r3, #16
 8002c08:	d073      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x140>
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d802      	bhi.n	8002c14 <HAL_TIM_ConfigClockSource+0x62>
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d06f      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c12:	e078      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	d06c      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x140>
 8002c18:	2b30      	cmp	r3, #48	; 0x30
 8002c1a:	d06a      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c1c:	e073      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c1e:	2b70      	cmp	r3, #112	; 0x70
 8002c20:	d00d      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0x8c>
 8002c22:	2b70      	cmp	r3, #112	; 0x70
 8002c24:	d804      	bhi.n	8002c30 <HAL_TIM_ConfigClockSource+0x7e>
 8002c26:	2b50      	cmp	r3, #80	; 0x50
 8002c28:	d033      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0xe0>
 8002c2a:	2b60      	cmp	r3, #96	; 0x60
 8002c2c:	d041      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c2e:	e06a      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c34:	d066      	beq.n	8002d04 <HAL_TIM_ConfigClockSource+0x152>
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d017      	beq.n	8002c6c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c3c:	e063      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f000 f96e 	bl	8002f2e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	609a      	str	r2, [r3, #8]
      break;
 8002c6a:	e04c      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6899      	ldr	r1, [r3, #8]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f000 f957 	bl	8002f2e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8e:	609a      	str	r2, [r3, #8]
      break;
 8002c90:	e039      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f000 f8ce 	bl	8002e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2150      	movs	r1, #80	; 0x50
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f925 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002cb0:	e029      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6859      	ldr	r1, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f000 f8ec 	bl	8002e9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2160      	movs	r1, #96	; 0x60
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f915 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002cd0:	e019      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f000 f8ae 	bl	8002e40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2140      	movs	r1, #64	; 0x40
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f905 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002cf0:	e009      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f000 f8fc 	bl	8002efa <TIM_ITRx_SetConfig>
      break;
 8002d02:	e000      	b.n	8002d06 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr
	...

08002d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a29      	ldr	r2, [pc, #164]	; (8002e34 <TIM_Base_SetConfig+0xb8>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d00b      	beq.n	8002dac <TIM_Base_SetConfig+0x30>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9a:	d007      	beq.n	8002dac <TIM_Base_SetConfig+0x30>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <TIM_Base_SetConfig+0xbc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d003      	beq.n	8002dac <TIM_Base_SetConfig+0x30>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a25      	ldr	r2, [pc, #148]	; (8002e3c <TIM_Base_SetConfig+0xc0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d108      	bne.n	8002dbe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1c      	ldr	r2, [pc, #112]	; (8002e34 <TIM_Base_SetConfig+0xb8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00b      	beq.n	8002dde <TIM_Base_SetConfig+0x62>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dcc:	d007      	beq.n	8002dde <TIM_Base_SetConfig+0x62>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a19      	ldr	r2, [pc, #100]	; (8002e38 <TIM_Base_SetConfig+0xbc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d003      	beq.n	8002dde <TIM_Base_SetConfig+0x62>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <TIM_Base_SetConfig+0xc0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d108      	bne.n	8002df0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689a      	ldr	r2, [r3, #8]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a07      	ldr	r2, [pc, #28]	; (8002e34 <TIM_Base_SetConfig+0xb8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d103      	bne.n	8002e24 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	615a      	str	r2, [r3, #20]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr
 8002e34:	40012c00 	.word	0x40012c00
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800

08002e40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b087      	sub	sp, #28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	f023 0201 	bic.w	r2, r3, #1
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	699b      	ldr	r3, [r3, #24]
 8002e62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f023 030a 	bic.w	r3, r3, #10
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	621a      	str	r2, [r3, #32]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	f023 0210 	bic.w	r2, r3, #16
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ec6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	031b      	lsls	r3, r3, #12
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ed8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	621a      	str	r2, [r3, #32]
}
 8002ef0:	bf00      	nop
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b085      	sub	sp, #20
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f043 0307 	orr.w	r3, r3, #7
 8002f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	609a      	str	r2, [r3, #8]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bc80      	pop	{r7}
 8002f2c:	4770      	bx	lr

08002f2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b087      	sub	sp, #28
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	60f8      	str	r0, [r7, #12]
 8002f36:	60b9      	str	r1, [r7, #8]
 8002f38:	607a      	str	r2, [r7, #4]
 8002f3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	021a      	lsls	r2, r3, #8
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	697a      	ldr	r2, [r7, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	609a      	str	r2, [r3, #8]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e032      	b.n	8002fea <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fbc:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bc80      	pop	{r7}
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ffc:	bf00      	nop
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	bc80      	pop	{r7}
 8003016:	4770      	bx	lr

08003018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e03f      	b.n	80030aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe f892 	bl	8001168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2224      	movs	r2, #36	; 0x24
 8003048:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800305a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fbe7 	bl	8003830 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003070:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695a      	ldr	r2, [r3, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003080:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003090:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b088      	sub	sp, #32
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	f040 8083 	bne.w	80031da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_UART_Transmit+0x2e>
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e07b      	b.n	80031dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_UART_Transmit+0x40>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e074      	b.n	80031dc <HAL_UART_Transmit+0x12a>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2221      	movs	r2, #33	; 0x21
 8003104:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003108:	f7fe fa34 	bl	8001574 <HAL_GetTick>
 800310c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	88fa      	ldrh	r2, [r7, #6]
 8003112:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	88fa      	ldrh	r2, [r7, #6]
 8003118:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800311a:	e042      	b.n	80031a2 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003132:	d122      	bne.n	800317a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2200      	movs	r2, #0
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fa0d 	bl	800355e <UART_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e046      	b.n	80031dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	881b      	ldrh	r3, [r3, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003160:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	3302      	adds	r3, #2
 800316e:	60bb      	str	r3, [r7, #8]
 8003170:	e017      	b.n	80031a2 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	e013      	b.n	80031a2 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2200      	movs	r2, #0
 8003182:	2180      	movs	r1, #128	; 0x80
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f9ea 	bl	800355e <UART_WaitOnFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e023      	b.n	80031dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	60ba      	str	r2, [r7, #8]
 800319a:	781a      	ldrb	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1b7      	bne.n	800311c <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	2140      	movs	r1, #64	; 0x40
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f9d1 	bl	800355e <UART_WaitOnFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e00a      	b.n	80031dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2220      	movs	r2, #32
 80031ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e000      	b.n	80031dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80031da:	2302      	movs	r3, #2
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b20      	cmp	r3, #32
 8003202:	f040 8090 	bne.w	8003326 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <HAL_UART_Receive+0x2e>
 800320c:	88fb      	ldrh	r3, [r7, #6]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e088      	b.n	8003328 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_UART_Receive+0x40>
 8003220:	2302      	movs	r3, #2
 8003222:	e081      	b.n	8003328 <HAL_UART_Receive+0x144>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2222      	movs	r2, #34	; 0x22
 8003236:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800323a:	f7fe f99b 	bl	8001574 <HAL_GetTick>
 800323e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	88fa      	ldrh	r2, [r7, #6]
 8003244:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	88fa      	ldrh	r2, [r7, #6]
 800324a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800324c:	e05c      	b.n	8003308 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003264:	d12b      	bne.n	80032be <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2200      	movs	r2, #0
 800326e:	2120      	movs	r1, #32
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f000 f974 	bl	800355e <UART_WaitOnFlagUntilTimeout>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e053      	b.n	8003328 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10c      	bne.n	80032a6 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	b29b      	uxth	r3, r3
 8003294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003298:	b29a      	uxth	r2, r3
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	3302      	adds	r3, #2
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	e030      	b.n	8003308 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3301      	adds	r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	e024      	b.n	8003308 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2200      	movs	r2, #0
 80032c6:	2120      	movs	r1, #32
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f948 	bl	800355e <UART_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e027      	b.n	8003328 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d108      	bne.n	80032f2 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	60ba      	str	r2, [r7, #8]
 80032ec:	b2ca      	uxtb	r2, r1
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	e00a      	b.n	8003308 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1c59      	adds	r1, r3, #1
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d19d      	bne.n	800324e <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_UART_IRQHandler+0x52>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9d7 	bl	800372e <UART_Receive_IT>
      return;
 8003380:	e0cc      	b.n	800351c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80ab 	beq.w	80034e0 <HAL_UART_IRQHandler+0x1b0>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_UART_IRQHandler+0x70>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80a0 	beq.w	80034e0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_UART_IRQHandler+0x90>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_UART_IRQHandler+0xb0>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_UART_IRQHandler+0xd0>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_UART_IRQHandler+0xf0>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003418:	f043 0208 	orr.w	r2, r3, #8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d078      	beq.n	800351a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_UART_IRQHandler+0x112>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f976 	bl	800372e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d102      	bne.n	800346a <HAL_UART_IRQHandler+0x13a>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d031      	beq.n	80034ce <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f8c1 	bl	80035f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d023      	beq.n	80034c6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800348c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003492:	2b00      	cmp	r3, #0
 8003494:	d013      	beq.n	80034be <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349a:	4a22      	ldr	r2, [pc, #136]	; (8003524 <HAL_UART_IRQHandler+0x1f4>)
 800349c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fe f9a0 	bl	80017e8 <HAL_DMA_Abort_IT>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d016      	beq.n	80034dc <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034b8:	4610      	mov	r0, r2
 80034ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034bc:	e00e      	b.n	80034dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f844 	bl	800354c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	e00a      	b.n	80034dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f840 	bl	800354c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034cc:	e006      	b.n	80034dc <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f83c 	bl	800354c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80034da:	e01e      	b.n	800351a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	bf00      	nop
    return;
 80034de:	e01c      	b.n	800351a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_UART_IRQHandler+0x1cc>
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f8ad 	bl	8003654 <UART_Transmit_IT>
    return;
 80034fa:	e00f      	b.n	800351c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_UART_IRQHandler+0x1ec>
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8f4 	bl	80036fe <UART_EndTransmit_IT>
    return;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <HAL_UART_IRQHandler+0x1ec>
    return;
 800351a:	bf00      	nop
  }
}
 800351c:	3720      	adds	r7, #32
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	0800362d 	.word	0x0800362d

08003528 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	bc80      	pop	{r7}
 800355c:	4770      	bx	lr

0800355e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	603b      	str	r3, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800356e:	e02c      	b.n	80035ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003576:	d028      	beq.n	80035ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <UART_WaitOnFlagUntilTimeout+0x30>
 800357e:	f7fd fff9 	bl	8001574 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	429a      	cmp	r2, r3
 800358c:	d21d      	bcs.n	80035ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800359c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	695a      	ldr	r2, [r3, #20]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e00f      	b.n	80035ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4013      	ands	r3, r2
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	79fb      	ldrb	r3, [r7, #7]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d0c3      	beq.n	8003570 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b083      	sub	sp, #12
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68da      	ldr	r2, [r3, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003608:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff ff80 	bl	800354c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b21      	cmp	r3, #33	; 0x21
 8003666:	d144      	bne.n	80036f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003670:	d11a      	bne.n	80036a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003686:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	1c9a      	adds	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]
 800369a:	e00e      	b.n	80036ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	1c5a      	adds	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	621a      	str	r2, [r3, #32]
 80036a6:	e008      	b.n	80036ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	1c59      	adds	r1, r3, #1
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6211      	str	r1, [r2, #32]
 80036b2:	781a      	ldrb	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036be:	b29b      	uxth	r3, r3
 80036c0:	3b01      	subs	r3, #1
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	4619      	mov	r1, r3
 80036c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10f      	bne.n	80036ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68da      	ldr	r2, [r3, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f7ff ff02 	bl	8003528 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b22      	cmp	r3, #34	; 0x22
 8003740:	d171      	bne.n	8003826 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374a:	d123      	bne.n	8003794 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003750:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10e      	bne.n	8003778 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	1c9a      	adds	r2, r3, #2
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
 8003776:	e029      	b.n	80037cc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	b29b      	uxth	r3, r3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	629a      	str	r2, [r3, #40]	; 0x28
 8003792:	e01b      	b.n	80037cc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6858      	ldr	r0, [r3, #4]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6291      	str	r1, [r2, #40]	; 0x28
 80037ac:	b2c2      	uxtb	r2, r0
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e00c      	b.n	80037cc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	1c58      	adds	r0, r3, #1
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	6288      	str	r0, [r1, #40]	; 0x28
 80037c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4619      	mov	r1, r3
 80037da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d120      	bne.n	8003822 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0220 	bic.w	r2, r2, #32
 80037ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695a      	ldr	r2, [r3, #20]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fe8e 	bl	800353a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e002      	b.n	8003828 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003822:	2300      	movs	r3, #0
 8003824:	e000      	b.n	8003828 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003826:	2302      	movs	r3, #2
  }
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800386a:	f023 030c 	bic.w	r3, r3, #12
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	68f9      	ldr	r1, [r7, #12]
 8003874:	430b      	orrs	r3, r1
 8003876:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a52      	ldr	r2, [pc, #328]	; (80039dc <UART_SetConfig+0x1ac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d14e      	bne.n	8003936 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003898:	f7fe fd78 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 800389c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	4a4a      	ldr	r2, [pc, #296]	; (80039e0 <UART_SetConfig+0x1b0>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	0119      	lsls	r1, r3, #4
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	009a      	lsls	r2, r3, #2
 80038c8:	441a      	add	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038d4:	4b42      	ldr	r3, [pc, #264]	; (80039e0 <UART_SetConfig+0x1b0>)
 80038d6:	fba3 0302 	umull	r0, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2064      	movs	r0, #100	; 0x64
 80038de:	fb00 f303 	mul.w	r3, r0, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	3332      	adds	r3, #50	; 0x32
 80038e8:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <UART_SetConfig+0x1b0>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038f4:	4419      	add	r1, r3
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	009a      	lsls	r2, r3, #2
 8003900:	441a      	add	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	fbb2 f2f3 	udiv	r2, r2, r3
 800390c:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <UART_SetConfig+0x1b0>)
 800390e:	fba3 0302 	umull	r0, r3, r3, r2
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	2064      	movs	r0, #100	; 0x64
 8003916:	fb00 f303 	mul.w	r3, r0, r3
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	3332      	adds	r3, #50	; 0x32
 8003920:	4a2f      	ldr	r2, [pc, #188]	; (80039e0 <UART_SetConfig+0x1b0>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	095b      	lsrs	r3, r3, #5
 8003928:	f003 020f 	and.w	r2, r3, #15
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	440a      	add	r2, r1
 8003932:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003934:	e04d      	b.n	80039d2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003936:	f7fe fd15 	bl	8002364 <HAL_RCC_GetPCLK1Freq>
 800393a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	009a      	lsls	r2, r3, #2
 8003946:	441a      	add	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <UART_SetConfig+0x1b0>)
 8003954:	fba2 2303 	umull	r2, r3, r2, r3
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	0119      	lsls	r1, r3, #4
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	009a      	lsls	r2, r3, #2
 8003966:	441a      	add	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003972:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <UART_SetConfig+0x1b0>)
 8003974:	fba3 0302 	umull	r0, r3, r3, r2
 8003978:	095b      	lsrs	r3, r3, #5
 800397a:	2064      	movs	r0, #100	; 0x64
 800397c:	fb00 f303 	mul.w	r3, r0, r3
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	3332      	adds	r3, #50	; 0x32
 8003986:	4a16      	ldr	r2, [pc, #88]	; (80039e0 <UART_SetConfig+0x1b0>)
 8003988:	fba2 2303 	umull	r2, r3, r2, r3
 800398c:	095b      	lsrs	r3, r3, #5
 800398e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003992:	4419      	add	r1, r3
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	009a      	lsls	r2, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <UART_SetConfig+0x1b0>)
 80039ac:	fba3 0302 	umull	r0, r3, r3, r2
 80039b0:	095b      	lsrs	r3, r3, #5
 80039b2:	2064      	movs	r0, #100	; 0x64
 80039b4:	fb00 f303 	mul.w	r3, r0, r3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	3332      	adds	r3, #50	; 0x32
 80039be:	4a08      	ldr	r2, [pc, #32]	; (80039e0 <UART_SetConfig+0x1b0>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	095b      	lsrs	r3, r3, #5
 80039c6:	f003 020f 	and.w	r2, r3, #15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	440a      	add	r2, r1
 80039d0:	609a      	str	r2, [r3, #8]
}
 80039d2:	bf00      	nop
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40013800 	.word	0x40013800
 80039e0:	51eb851f 	.word	0x51eb851f

080039e4 <__errno>:
 80039e4:	4b01      	ldr	r3, [pc, #4]	; (80039ec <__errno+0x8>)
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	2000000c 	.word	0x2000000c

080039f0 <__libc_init_array>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	2500      	movs	r5, #0
 80039f4:	4e0c      	ldr	r6, [pc, #48]	; (8003a28 <__libc_init_array+0x38>)
 80039f6:	4c0d      	ldr	r4, [pc, #52]	; (8003a2c <__libc_init_array+0x3c>)
 80039f8:	1ba4      	subs	r4, r4, r6
 80039fa:	10a4      	asrs	r4, r4, #2
 80039fc:	42a5      	cmp	r5, r4
 80039fe:	d109      	bne.n	8003a14 <__libc_init_array+0x24>
 8003a00:	f001 f8e4 	bl	8004bcc <_init>
 8003a04:	2500      	movs	r5, #0
 8003a06:	4e0a      	ldr	r6, [pc, #40]	; (8003a30 <__libc_init_array+0x40>)
 8003a08:	4c0a      	ldr	r4, [pc, #40]	; (8003a34 <__libc_init_array+0x44>)
 8003a0a:	1ba4      	subs	r4, r4, r6
 8003a0c:	10a4      	asrs	r4, r4, #2
 8003a0e:	42a5      	cmp	r5, r4
 8003a10:	d105      	bne.n	8003a1e <__libc_init_array+0x2e>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a18:	4798      	blx	r3
 8003a1a:	3501      	adds	r5, #1
 8003a1c:	e7ee      	b.n	80039fc <__libc_init_array+0xc>
 8003a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a22:	4798      	blx	r3
 8003a24:	3501      	adds	r5, #1
 8003a26:	e7f2      	b.n	8003a0e <__libc_init_array+0x1e>
 8003a28:	08004e74 	.word	0x08004e74
 8003a2c:	08004e74 	.word	0x08004e74
 8003a30:	08004e74 	.word	0x08004e74
 8003a34:	08004e78 	.word	0x08004e78

08003a38 <memset>:
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4402      	add	r2, r0
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d100      	bne.n	8003a42 <memset+0xa>
 8003a40:	4770      	bx	lr
 8003a42:	f803 1b01 	strb.w	r1, [r3], #1
 8003a46:	e7f9      	b.n	8003a3c <memset+0x4>

08003a48 <iprintf>:
 8003a48:	b40f      	push	{r0, r1, r2, r3}
 8003a4a:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <iprintf+0x2c>)
 8003a4c:	b513      	push	{r0, r1, r4, lr}
 8003a4e:	681c      	ldr	r4, [r3, #0]
 8003a50:	b124      	cbz	r4, 8003a5c <iprintf+0x14>
 8003a52:	69a3      	ldr	r3, [r4, #24]
 8003a54:	b913      	cbnz	r3, 8003a5c <iprintf+0x14>
 8003a56:	4620      	mov	r0, r4
 8003a58:	f000 f87e 	bl	8003b58 <__sinit>
 8003a5c:	ab05      	add	r3, sp, #20
 8003a5e:	9a04      	ldr	r2, [sp, #16]
 8003a60:	68a1      	ldr	r1, [r4, #8]
 8003a62:	4620      	mov	r0, r4
 8003a64:	9301      	str	r3, [sp, #4]
 8003a66:	f000 fad5 	bl	8004014 <_vfiprintf_r>
 8003a6a:	b002      	add	sp, #8
 8003a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a70:	b004      	add	sp, #16
 8003a72:	4770      	bx	lr
 8003a74:	2000000c 	.word	0x2000000c

08003a78 <siprintf>:
 8003a78:	b40e      	push	{r1, r2, r3}
 8003a7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a7e:	b500      	push	{lr}
 8003a80:	b09c      	sub	sp, #112	; 0x70
 8003a82:	ab1d      	add	r3, sp, #116	; 0x74
 8003a84:	9002      	str	r0, [sp, #8]
 8003a86:	9006      	str	r0, [sp, #24]
 8003a88:	9107      	str	r1, [sp, #28]
 8003a8a:	9104      	str	r1, [sp, #16]
 8003a8c:	4808      	ldr	r0, [pc, #32]	; (8003ab0 <siprintf+0x38>)
 8003a8e:	4909      	ldr	r1, [pc, #36]	; (8003ab4 <siprintf+0x3c>)
 8003a90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a94:	9105      	str	r1, [sp, #20]
 8003a96:	6800      	ldr	r0, [r0, #0]
 8003a98:	a902      	add	r1, sp, #8
 8003a9a:	9301      	str	r3, [sp, #4]
 8003a9c:	f000 f99a 	bl	8003dd4 <_svfiprintf_r>
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	9b02      	ldr	r3, [sp, #8]
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	b01c      	add	sp, #112	; 0x70
 8003aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aac:	b003      	add	sp, #12
 8003aae:	4770      	bx	lr
 8003ab0:	2000000c 	.word	0x2000000c
 8003ab4:	ffff0208 	.word	0xffff0208

08003ab8 <strcat>:
 8003ab8:	4603      	mov	r3, r0
 8003aba:	b510      	push	{r4, lr}
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	1c5c      	adds	r4, r3, #1
 8003ac0:	b93a      	cbnz	r2, 8003ad2 <strcat+0x1a>
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ac8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003acc:	2a00      	cmp	r2, #0
 8003ace:	d1f9      	bne.n	8003ac4 <strcat+0xc>
 8003ad0:	bd10      	pop	{r4, pc}
 8003ad2:	4623      	mov	r3, r4
 8003ad4:	e7f2      	b.n	8003abc <strcat+0x4>
	...

08003ad8 <std>:
 8003ad8:	2300      	movs	r3, #0
 8003ada:	b510      	push	{r4, lr}
 8003adc:	4604      	mov	r4, r0
 8003ade:	e9c0 3300 	strd	r3, r3, [r0]
 8003ae2:	6083      	str	r3, [r0, #8]
 8003ae4:	8181      	strh	r1, [r0, #12]
 8003ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ae8:	81c2      	strh	r2, [r0, #14]
 8003aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003aee:	6183      	str	r3, [r0, #24]
 8003af0:	4619      	mov	r1, r3
 8003af2:	2208      	movs	r2, #8
 8003af4:	305c      	adds	r0, #92	; 0x5c
 8003af6:	f7ff ff9f 	bl	8003a38 <memset>
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <std+0x38>)
 8003afc:	6224      	str	r4, [r4, #32]
 8003afe:	6263      	str	r3, [r4, #36]	; 0x24
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <std+0x3c>)
 8003b02:	62a3      	str	r3, [r4, #40]	; 0x28
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <std+0x40>)
 8003b06:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <std+0x44>)
 8003b0a:	6323      	str	r3, [r4, #48]	; 0x30
 8003b0c:	bd10      	pop	{r4, pc}
 8003b0e:	bf00      	nop
 8003b10:	08004571 	.word	0x08004571
 8003b14:	08004593 	.word	0x08004593
 8003b18:	080045cb 	.word	0x080045cb
 8003b1c:	080045ef 	.word	0x080045ef

08003b20 <_cleanup_r>:
 8003b20:	4901      	ldr	r1, [pc, #4]	; (8003b28 <_cleanup_r+0x8>)
 8003b22:	f000 b885 	b.w	8003c30 <_fwalk_reent>
 8003b26:	bf00      	nop
 8003b28:	080048c9 	.word	0x080048c9

08003b2c <__sfmoreglue>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	2568      	movs	r5, #104	; 0x68
 8003b30:	1e4a      	subs	r2, r1, #1
 8003b32:	4355      	muls	r5, r2
 8003b34:	460e      	mov	r6, r1
 8003b36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003b3a:	f000 f897 	bl	8003c6c <_malloc_r>
 8003b3e:	4604      	mov	r4, r0
 8003b40:	b140      	cbz	r0, 8003b54 <__sfmoreglue+0x28>
 8003b42:	2100      	movs	r1, #0
 8003b44:	e9c0 1600 	strd	r1, r6, [r0]
 8003b48:	300c      	adds	r0, #12
 8003b4a:	60a0      	str	r0, [r4, #8]
 8003b4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003b50:	f7ff ff72 	bl	8003a38 <memset>
 8003b54:	4620      	mov	r0, r4
 8003b56:	bd70      	pop	{r4, r5, r6, pc}

08003b58 <__sinit>:
 8003b58:	6983      	ldr	r3, [r0, #24]
 8003b5a:	b510      	push	{r4, lr}
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	bb33      	cbnz	r3, 8003bae <__sinit+0x56>
 8003b60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003b64:	6503      	str	r3, [r0, #80]	; 0x50
 8003b66:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <__sinit+0x58>)
 8003b68:	4a12      	ldr	r2, [pc, #72]	; (8003bb4 <__sinit+0x5c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6282      	str	r2, [r0, #40]	; 0x28
 8003b6e:	4298      	cmp	r0, r3
 8003b70:	bf04      	itt	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	6183      	streq	r3, [r0, #24]
 8003b76:	f000 f81f 	bl	8003bb8 <__sfp>
 8003b7a:	6060      	str	r0, [r4, #4]
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f000 f81b 	bl	8003bb8 <__sfp>
 8003b82:	60a0      	str	r0, [r4, #8]
 8003b84:	4620      	mov	r0, r4
 8003b86:	f000 f817 	bl	8003bb8 <__sfp>
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	60e0      	str	r0, [r4, #12]
 8003b8e:	2104      	movs	r1, #4
 8003b90:	6860      	ldr	r0, [r4, #4]
 8003b92:	f7ff ffa1 	bl	8003ad8 <std>
 8003b96:	2201      	movs	r2, #1
 8003b98:	2109      	movs	r1, #9
 8003b9a:	68a0      	ldr	r0, [r4, #8]
 8003b9c:	f7ff ff9c 	bl	8003ad8 <std>
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	2112      	movs	r1, #18
 8003ba4:	68e0      	ldr	r0, [r4, #12]
 8003ba6:	f7ff ff97 	bl	8003ad8 <std>
 8003baa:	2301      	movs	r3, #1
 8003bac:	61a3      	str	r3, [r4, #24]
 8003bae:	bd10      	pop	{r4, pc}
 8003bb0:	08004ddc 	.word	0x08004ddc
 8003bb4:	08003b21 	.word	0x08003b21

08003bb8 <__sfp>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <__sfp+0x70>)
 8003bbc:	4607      	mov	r7, r0
 8003bbe:	681e      	ldr	r6, [r3, #0]
 8003bc0:	69b3      	ldr	r3, [r6, #24]
 8003bc2:	b913      	cbnz	r3, 8003bca <__sfp+0x12>
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f7ff ffc7 	bl	8003b58 <__sinit>
 8003bca:	3648      	adds	r6, #72	; 0x48
 8003bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	d503      	bpl.n	8003bdc <__sfp+0x24>
 8003bd4:	6833      	ldr	r3, [r6, #0]
 8003bd6:	b133      	cbz	r3, 8003be6 <__sfp+0x2e>
 8003bd8:	6836      	ldr	r6, [r6, #0]
 8003bda:	e7f7      	b.n	8003bcc <__sfp+0x14>
 8003bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003be0:	b16d      	cbz	r5, 8003bfe <__sfp+0x46>
 8003be2:	3468      	adds	r4, #104	; 0x68
 8003be4:	e7f4      	b.n	8003bd0 <__sfp+0x18>
 8003be6:	2104      	movs	r1, #4
 8003be8:	4638      	mov	r0, r7
 8003bea:	f7ff ff9f 	bl	8003b2c <__sfmoreglue>
 8003bee:	6030      	str	r0, [r6, #0]
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d1f1      	bne.n	8003bd8 <__sfp+0x20>
 8003bf4:	230c      	movs	r3, #12
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <__sfp+0x74>)
 8003c00:	6665      	str	r5, [r4, #100]	; 0x64
 8003c02:	e9c4 5500 	strd	r5, r5, [r4]
 8003c06:	60a5      	str	r5, [r4, #8]
 8003c08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003c0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003c10:	2208      	movs	r2, #8
 8003c12:	4629      	mov	r1, r5
 8003c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c18:	f7ff ff0e 	bl	8003a38 <memset>
 8003c1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003c20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003c24:	e7e9      	b.n	8003bfa <__sfp+0x42>
 8003c26:	bf00      	nop
 8003c28:	08004ddc 	.word	0x08004ddc
 8003c2c:	ffff0001 	.word	0xffff0001

08003c30 <_fwalk_reent>:
 8003c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c34:	4680      	mov	r8, r0
 8003c36:	4689      	mov	r9, r1
 8003c38:	2600      	movs	r6, #0
 8003c3a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003c3e:	b914      	cbnz	r4, 8003c46 <_fwalk_reent+0x16>
 8003c40:	4630      	mov	r0, r6
 8003c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003c4a:	3f01      	subs	r7, #1
 8003c4c:	d501      	bpl.n	8003c52 <_fwalk_reent+0x22>
 8003c4e:	6824      	ldr	r4, [r4, #0]
 8003c50:	e7f5      	b.n	8003c3e <_fwalk_reent+0xe>
 8003c52:	89ab      	ldrh	r3, [r5, #12]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d907      	bls.n	8003c68 <_fwalk_reent+0x38>
 8003c58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	d003      	beq.n	8003c68 <_fwalk_reent+0x38>
 8003c60:	4629      	mov	r1, r5
 8003c62:	4640      	mov	r0, r8
 8003c64:	47c8      	blx	r9
 8003c66:	4306      	orrs	r6, r0
 8003c68:	3568      	adds	r5, #104	; 0x68
 8003c6a:	e7ee      	b.n	8003c4a <_fwalk_reent+0x1a>

08003c6c <_malloc_r>:
 8003c6c:	b570      	push	{r4, r5, r6, lr}
 8003c6e:	1ccd      	adds	r5, r1, #3
 8003c70:	f025 0503 	bic.w	r5, r5, #3
 8003c74:	3508      	adds	r5, #8
 8003c76:	2d0c      	cmp	r5, #12
 8003c78:	bf38      	it	cc
 8003c7a:	250c      	movcc	r5, #12
 8003c7c:	2d00      	cmp	r5, #0
 8003c7e:	4606      	mov	r6, r0
 8003c80:	db01      	blt.n	8003c86 <_malloc_r+0x1a>
 8003c82:	42a9      	cmp	r1, r5
 8003c84:	d903      	bls.n	8003c8e <_malloc_r+0x22>
 8003c86:	230c      	movs	r3, #12
 8003c88:	6033      	str	r3, [r6, #0]
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
 8003c8e:	f000 feed 	bl	8004a6c <__malloc_lock>
 8003c92:	4a21      	ldr	r2, [pc, #132]	; (8003d18 <_malloc_r+0xac>)
 8003c94:	6814      	ldr	r4, [r2, #0]
 8003c96:	4621      	mov	r1, r4
 8003c98:	b991      	cbnz	r1, 8003cc0 <_malloc_r+0x54>
 8003c9a:	4c20      	ldr	r4, [pc, #128]	; (8003d1c <_malloc_r+0xb0>)
 8003c9c:	6823      	ldr	r3, [r4, #0]
 8003c9e:	b91b      	cbnz	r3, 8003ca8 <_malloc_r+0x3c>
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f000 fc55 	bl	8004550 <_sbrk_r>
 8003ca6:	6020      	str	r0, [r4, #0]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	4630      	mov	r0, r6
 8003cac:	f000 fc50 	bl	8004550 <_sbrk_r>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d124      	bne.n	8003cfe <_malloc_r+0x92>
 8003cb4:	230c      	movs	r3, #12
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	6033      	str	r3, [r6, #0]
 8003cba:	f000 fed8 	bl	8004a6e <__malloc_unlock>
 8003cbe:	e7e4      	b.n	8003c8a <_malloc_r+0x1e>
 8003cc0:	680b      	ldr	r3, [r1, #0]
 8003cc2:	1b5b      	subs	r3, r3, r5
 8003cc4:	d418      	bmi.n	8003cf8 <_malloc_r+0x8c>
 8003cc6:	2b0b      	cmp	r3, #11
 8003cc8:	d90f      	bls.n	8003cea <_malloc_r+0x7e>
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	18cc      	adds	r4, r1, r3
 8003cce:	50cd      	str	r5, [r1, r3]
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	f000 fecc 	bl	8004a6e <__malloc_unlock>
 8003cd6:	f104 000b 	add.w	r0, r4, #11
 8003cda:	1d23      	adds	r3, r4, #4
 8003cdc:	f020 0007 	bic.w	r0, r0, #7
 8003ce0:	1ac3      	subs	r3, r0, r3
 8003ce2:	d0d3      	beq.n	8003c8c <_malloc_r+0x20>
 8003ce4:	425a      	negs	r2, r3
 8003ce6:	50e2      	str	r2, [r4, r3]
 8003ce8:	e7d0      	b.n	8003c8c <_malloc_r+0x20>
 8003cea:	684b      	ldr	r3, [r1, #4]
 8003cec:	428c      	cmp	r4, r1
 8003cee:	bf16      	itet	ne
 8003cf0:	6063      	strne	r3, [r4, #4]
 8003cf2:	6013      	streq	r3, [r2, #0]
 8003cf4:	460c      	movne	r4, r1
 8003cf6:	e7eb      	b.n	8003cd0 <_malloc_r+0x64>
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	6849      	ldr	r1, [r1, #4]
 8003cfc:	e7cc      	b.n	8003c98 <_malloc_r+0x2c>
 8003cfe:	1cc4      	adds	r4, r0, #3
 8003d00:	f024 0403 	bic.w	r4, r4, #3
 8003d04:	42a0      	cmp	r0, r4
 8003d06:	d005      	beq.n	8003d14 <_malloc_r+0xa8>
 8003d08:	1a21      	subs	r1, r4, r0
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f000 fc20 	bl	8004550 <_sbrk_r>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d0cf      	beq.n	8003cb4 <_malloc_r+0x48>
 8003d14:	6025      	str	r5, [r4, #0]
 8003d16:	e7db      	b.n	8003cd0 <_malloc_r+0x64>
 8003d18:	20000094 	.word	0x20000094
 8003d1c:	20000098 	.word	0x20000098

08003d20 <__ssputs_r>:
 8003d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	688e      	ldr	r6, [r1, #8]
 8003d26:	4682      	mov	sl, r0
 8003d28:	429e      	cmp	r6, r3
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	4690      	mov	r8, r2
 8003d2e:	4699      	mov	r9, r3
 8003d30:	d837      	bhi.n	8003da2 <__ssputs_r+0x82>
 8003d32:	898a      	ldrh	r2, [r1, #12]
 8003d34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d38:	d031      	beq.n	8003d9e <__ssputs_r+0x7e>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	6825      	ldr	r5, [r4, #0]
 8003d3e:	6909      	ldr	r1, [r1, #16]
 8003d40:	1a6f      	subs	r7, r5, r1
 8003d42:	6965      	ldr	r5, [r4, #20]
 8003d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d48:	fb95 f5f3 	sdiv	r5, r5, r3
 8003d4c:	f109 0301 	add.w	r3, r9, #1
 8003d50:	443b      	add	r3, r7
 8003d52:	429d      	cmp	r5, r3
 8003d54:	bf38      	it	cc
 8003d56:	461d      	movcc	r5, r3
 8003d58:	0553      	lsls	r3, r2, #21
 8003d5a:	d530      	bpl.n	8003dbe <__ssputs_r+0x9e>
 8003d5c:	4629      	mov	r1, r5
 8003d5e:	f7ff ff85 	bl	8003c6c <_malloc_r>
 8003d62:	4606      	mov	r6, r0
 8003d64:	b950      	cbnz	r0, 8003d7c <__ssputs_r+0x5c>
 8003d66:	230c      	movs	r3, #12
 8003d68:	f04f 30ff 	mov.w	r0, #4294967295
 8003d6c:	f8ca 3000 	str.w	r3, [sl]
 8003d70:	89a3      	ldrh	r3, [r4, #12]
 8003d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d76:	81a3      	strh	r3, [r4, #12]
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	463a      	mov	r2, r7
 8003d7e:	6921      	ldr	r1, [r4, #16]
 8003d80:	f000 fe50 	bl	8004a24 <memcpy>
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	6126      	str	r6, [r4, #16]
 8003d92:	443e      	add	r6, r7
 8003d94:	6026      	str	r6, [r4, #0]
 8003d96:	464e      	mov	r6, r9
 8003d98:	6165      	str	r5, [r4, #20]
 8003d9a:	1bed      	subs	r5, r5, r7
 8003d9c:	60a5      	str	r5, [r4, #8]
 8003d9e:	454e      	cmp	r6, r9
 8003da0:	d900      	bls.n	8003da4 <__ssputs_r+0x84>
 8003da2:	464e      	mov	r6, r9
 8003da4:	4632      	mov	r2, r6
 8003da6:	4641      	mov	r1, r8
 8003da8:	6820      	ldr	r0, [r4, #0]
 8003daa:	f000 fe46 	bl	8004a3a <memmove>
 8003dae:	68a3      	ldr	r3, [r4, #8]
 8003db0:	2000      	movs	r0, #0
 8003db2:	1b9b      	subs	r3, r3, r6
 8003db4:	60a3      	str	r3, [r4, #8]
 8003db6:	6823      	ldr	r3, [r4, #0]
 8003db8:	441e      	add	r6, r3
 8003dba:	6026      	str	r6, [r4, #0]
 8003dbc:	e7dc      	b.n	8003d78 <__ssputs_r+0x58>
 8003dbe:	462a      	mov	r2, r5
 8003dc0:	f000 fea2 	bl	8004b08 <_realloc_r>
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d1e2      	bne.n	8003d90 <__ssputs_r+0x70>
 8003dca:	6921      	ldr	r1, [r4, #16]
 8003dcc:	4650      	mov	r0, sl
 8003dce:	f000 fe4f 	bl	8004a70 <_free_r>
 8003dd2:	e7c8      	b.n	8003d66 <__ssputs_r+0x46>

08003dd4 <_svfiprintf_r>:
 8003dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dd8:	461d      	mov	r5, r3
 8003dda:	898b      	ldrh	r3, [r1, #12]
 8003ddc:	b09d      	sub	sp, #116	; 0x74
 8003dde:	061f      	lsls	r7, r3, #24
 8003de0:	4680      	mov	r8, r0
 8003de2:	460c      	mov	r4, r1
 8003de4:	4616      	mov	r6, r2
 8003de6:	d50f      	bpl.n	8003e08 <_svfiprintf_r+0x34>
 8003de8:	690b      	ldr	r3, [r1, #16]
 8003dea:	b96b      	cbnz	r3, 8003e08 <_svfiprintf_r+0x34>
 8003dec:	2140      	movs	r1, #64	; 0x40
 8003dee:	f7ff ff3d 	bl	8003c6c <_malloc_r>
 8003df2:	6020      	str	r0, [r4, #0]
 8003df4:	6120      	str	r0, [r4, #16]
 8003df6:	b928      	cbnz	r0, 8003e04 <_svfiprintf_r+0x30>
 8003df8:	230c      	movs	r3, #12
 8003dfa:	f8c8 3000 	str.w	r3, [r8]
 8003dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003e02:	e0c8      	b.n	8003f96 <_svfiprintf_r+0x1c2>
 8003e04:	2340      	movs	r3, #64	; 0x40
 8003e06:	6163      	str	r3, [r4, #20]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8003e0c:	2320      	movs	r3, #32
 8003e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e12:	2330      	movs	r3, #48	; 0x30
 8003e14:	f04f 0b01 	mov.w	fp, #1
 8003e18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e1c:	9503      	str	r5, [sp, #12]
 8003e1e:	4637      	mov	r7, r6
 8003e20:	463d      	mov	r5, r7
 8003e22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e26:	b10b      	cbz	r3, 8003e2c <_svfiprintf_r+0x58>
 8003e28:	2b25      	cmp	r3, #37	; 0x25
 8003e2a:	d13e      	bne.n	8003eaa <_svfiprintf_r+0xd6>
 8003e2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e30:	d00b      	beq.n	8003e4a <_svfiprintf_r+0x76>
 8003e32:	4653      	mov	r3, sl
 8003e34:	4632      	mov	r2, r6
 8003e36:	4621      	mov	r1, r4
 8003e38:	4640      	mov	r0, r8
 8003e3a:	f7ff ff71 	bl	8003d20 <__ssputs_r>
 8003e3e:	3001      	adds	r0, #1
 8003e40:	f000 80a4 	beq.w	8003f8c <_svfiprintf_r+0x1b8>
 8003e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e46:	4453      	add	r3, sl
 8003e48:	9309      	str	r3, [sp, #36]	; 0x24
 8003e4a:	783b      	ldrb	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 809d 	beq.w	8003f8c <_svfiprintf_r+0x1b8>
 8003e52:	2300      	movs	r3, #0
 8003e54:	f04f 32ff 	mov.w	r2, #4294967295
 8003e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e5c:	9304      	str	r3, [sp, #16]
 8003e5e:	9307      	str	r3, [sp, #28]
 8003e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e64:	931a      	str	r3, [sp, #104]	; 0x68
 8003e66:	462f      	mov	r7, r5
 8003e68:	2205      	movs	r2, #5
 8003e6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003e6e:	4850      	ldr	r0, [pc, #320]	; (8003fb0 <_svfiprintf_r+0x1dc>)
 8003e70:	f000 fdca 	bl	8004a08 <memchr>
 8003e74:	9b04      	ldr	r3, [sp, #16]
 8003e76:	b9d0      	cbnz	r0, 8003eae <_svfiprintf_r+0xda>
 8003e78:	06d9      	lsls	r1, r3, #27
 8003e7a:	bf44      	itt	mi
 8003e7c:	2220      	movmi	r2, #32
 8003e7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e82:	071a      	lsls	r2, r3, #28
 8003e84:	bf44      	itt	mi
 8003e86:	222b      	movmi	r2, #43	; 0x2b
 8003e88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e8c:	782a      	ldrb	r2, [r5, #0]
 8003e8e:	2a2a      	cmp	r2, #42	; 0x2a
 8003e90:	d015      	beq.n	8003ebe <_svfiprintf_r+0xea>
 8003e92:	462f      	mov	r7, r5
 8003e94:	2000      	movs	r0, #0
 8003e96:	250a      	movs	r5, #10
 8003e98:	9a07      	ldr	r2, [sp, #28]
 8003e9a:	4639      	mov	r1, r7
 8003e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ea0:	3b30      	subs	r3, #48	; 0x30
 8003ea2:	2b09      	cmp	r3, #9
 8003ea4:	d94d      	bls.n	8003f42 <_svfiprintf_r+0x16e>
 8003ea6:	b1b8      	cbz	r0, 8003ed8 <_svfiprintf_r+0x104>
 8003ea8:	e00f      	b.n	8003eca <_svfiprintf_r+0xf6>
 8003eaa:	462f      	mov	r7, r5
 8003eac:	e7b8      	b.n	8003e20 <_svfiprintf_r+0x4c>
 8003eae:	4a40      	ldr	r2, [pc, #256]	; (8003fb0 <_svfiprintf_r+0x1dc>)
 8003eb0:	463d      	mov	r5, r7
 8003eb2:	1a80      	subs	r0, r0, r2
 8003eb4:	fa0b f000 	lsl.w	r0, fp, r0
 8003eb8:	4318      	orrs	r0, r3
 8003eba:	9004      	str	r0, [sp, #16]
 8003ebc:	e7d3      	b.n	8003e66 <_svfiprintf_r+0x92>
 8003ebe:	9a03      	ldr	r2, [sp, #12]
 8003ec0:	1d11      	adds	r1, r2, #4
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	9103      	str	r1, [sp, #12]
 8003ec6:	2a00      	cmp	r2, #0
 8003ec8:	db01      	blt.n	8003ece <_svfiprintf_r+0xfa>
 8003eca:	9207      	str	r2, [sp, #28]
 8003ecc:	e004      	b.n	8003ed8 <_svfiprintf_r+0x104>
 8003ece:	4252      	negs	r2, r2
 8003ed0:	f043 0302 	orr.w	r3, r3, #2
 8003ed4:	9207      	str	r2, [sp, #28]
 8003ed6:	9304      	str	r3, [sp, #16]
 8003ed8:	783b      	ldrb	r3, [r7, #0]
 8003eda:	2b2e      	cmp	r3, #46	; 0x2e
 8003edc:	d10c      	bne.n	8003ef8 <_svfiprintf_r+0x124>
 8003ede:	787b      	ldrb	r3, [r7, #1]
 8003ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8003ee2:	d133      	bne.n	8003f4c <_svfiprintf_r+0x178>
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	3702      	adds	r7, #2
 8003ee8:	1d1a      	adds	r2, r3, #4
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	9203      	str	r2, [sp, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bfb8      	it	lt
 8003ef2:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ef6:	9305      	str	r3, [sp, #20]
 8003ef8:	4d2e      	ldr	r5, [pc, #184]	; (8003fb4 <_svfiprintf_r+0x1e0>)
 8003efa:	2203      	movs	r2, #3
 8003efc:	7839      	ldrb	r1, [r7, #0]
 8003efe:	4628      	mov	r0, r5
 8003f00:	f000 fd82 	bl	8004a08 <memchr>
 8003f04:	b138      	cbz	r0, 8003f16 <_svfiprintf_r+0x142>
 8003f06:	2340      	movs	r3, #64	; 0x40
 8003f08:	1b40      	subs	r0, r0, r5
 8003f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8003f0e:	9b04      	ldr	r3, [sp, #16]
 8003f10:	3701      	adds	r7, #1
 8003f12:	4303      	orrs	r3, r0
 8003f14:	9304      	str	r3, [sp, #16]
 8003f16:	7839      	ldrb	r1, [r7, #0]
 8003f18:	2206      	movs	r2, #6
 8003f1a:	4827      	ldr	r0, [pc, #156]	; (8003fb8 <_svfiprintf_r+0x1e4>)
 8003f1c:	1c7e      	adds	r6, r7, #1
 8003f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f22:	f000 fd71 	bl	8004a08 <memchr>
 8003f26:	2800      	cmp	r0, #0
 8003f28:	d038      	beq.n	8003f9c <_svfiprintf_r+0x1c8>
 8003f2a:	4b24      	ldr	r3, [pc, #144]	; (8003fbc <_svfiprintf_r+0x1e8>)
 8003f2c:	bb13      	cbnz	r3, 8003f74 <_svfiprintf_r+0x1a0>
 8003f2e:	9b03      	ldr	r3, [sp, #12]
 8003f30:	3307      	adds	r3, #7
 8003f32:	f023 0307 	bic.w	r3, r3, #7
 8003f36:	3308      	adds	r3, #8
 8003f38:	9303      	str	r3, [sp, #12]
 8003f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f3c:	444b      	add	r3, r9
 8003f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8003f40:	e76d      	b.n	8003e1e <_svfiprintf_r+0x4a>
 8003f42:	fb05 3202 	mla	r2, r5, r2, r3
 8003f46:	2001      	movs	r0, #1
 8003f48:	460f      	mov	r7, r1
 8003f4a:	e7a6      	b.n	8003e9a <_svfiprintf_r+0xc6>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	250a      	movs	r5, #10
 8003f50:	4619      	mov	r1, r3
 8003f52:	3701      	adds	r7, #1
 8003f54:	9305      	str	r3, [sp, #20]
 8003f56:	4638      	mov	r0, r7
 8003f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f5c:	3a30      	subs	r2, #48	; 0x30
 8003f5e:	2a09      	cmp	r2, #9
 8003f60:	d903      	bls.n	8003f6a <_svfiprintf_r+0x196>
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0c8      	beq.n	8003ef8 <_svfiprintf_r+0x124>
 8003f66:	9105      	str	r1, [sp, #20]
 8003f68:	e7c6      	b.n	8003ef8 <_svfiprintf_r+0x124>
 8003f6a:	fb05 2101 	mla	r1, r5, r1, r2
 8003f6e:	2301      	movs	r3, #1
 8003f70:	4607      	mov	r7, r0
 8003f72:	e7f0      	b.n	8003f56 <_svfiprintf_r+0x182>
 8003f74:	ab03      	add	r3, sp, #12
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4622      	mov	r2, r4
 8003f7a:	4b11      	ldr	r3, [pc, #68]	; (8003fc0 <_svfiprintf_r+0x1ec>)
 8003f7c:	a904      	add	r1, sp, #16
 8003f7e:	4640      	mov	r0, r8
 8003f80:	f3af 8000 	nop.w
 8003f84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f88:	4681      	mov	r9, r0
 8003f8a:	d1d6      	bne.n	8003f3a <_svfiprintf_r+0x166>
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	065b      	lsls	r3, r3, #25
 8003f90:	f53f af35 	bmi.w	8003dfe <_svfiprintf_r+0x2a>
 8003f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f96:	b01d      	add	sp, #116	; 0x74
 8003f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f9c:	ab03      	add	r3, sp, #12
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <_svfiprintf_r+0x1ec>)
 8003fa4:	a904      	add	r1, sp, #16
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	f000 f9c0 	bl	800432c <_printf_i>
 8003fac:	e7ea      	b.n	8003f84 <_svfiprintf_r+0x1b0>
 8003fae:	bf00      	nop
 8003fb0:	08004e40 	.word	0x08004e40
 8003fb4:	08004e46 	.word	0x08004e46
 8003fb8:	08004e4a 	.word	0x08004e4a
 8003fbc:	00000000 	.word	0x00000000
 8003fc0:	08003d21 	.word	0x08003d21

08003fc4 <__sfputc_r>:
 8003fc4:	6893      	ldr	r3, [r2, #8]
 8003fc6:	b410      	push	{r4}
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	6093      	str	r3, [r2, #8]
 8003fce:	da07      	bge.n	8003fe0 <__sfputc_r+0x1c>
 8003fd0:	6994      	ldr	r4, [r2, #24]
 8003fd2:	42a3      	cmp	r3, r4
 8003fd4:	db01      	blt.n	8003fda <__sfputc_r+0x16>
 8003fd6:	290a      	cmp	r1, #10
 8003fd8:	d102      	bne.n	8003fe0 <__sfputc_r+0x1c>
 8003fda:	bc10      	pop	{r4}
 8003fdc:	f000 bb0c 	b.w	80045f8 <__swbuf_r>
 8003fe0:	6813      	ldr	r3, [r2, #0]
 8003fe2:	1c58      	adds	r0, r3, #1
 8003fe4:	6010      	str	r0, [r2, #0]
 8003fe6:	7019      	strb	r1, [r3, #0]
 8003fe8:	4608      	mov	r0, r1
 8003fea:	bc10      	pop	{r4}
 8003fec:	4770      	bx	lr

08003fee <__sfputs_r>:
 8003fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff0:	4606      	mov	r6, r0
 8003ff2:	460f      	mov	r7, r1
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	18d5      	adds	r5, r2, r3
 8003ff8:	42ac      	cmp	r4, r5
 8003ffa:	d101      	bne.n	8004000 <__sfputs_r+0x12>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e007      	b.n	8004010 <__sfputs_r+0x22>
 8004000:	463a      	mov	r2, r7
 8004002:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004006:	4630      	mov	r0, r6
 8004008:	f7ff ffdc 	bl	8003fc4 <__sfputc_r>
 800400c:	1c43      	adds	r3, r0, #1
 800400e:	d1f3      	bne.n	8003ff8 <__sfputs_r+0xa>
 8004010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004014 <_vfiprintf_r>:
 8004014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004018:	460c      	mov	r4, r1
 800401a:	b09d      	sub	sp, #116	; 0x74
 800401c:	4617      	mov	r7, r2
 800401e:	461d      	mov	r5, r3
 8004020:	4606      	mov	r6, r0
 8004022:	b118      	cbz	r0, 800402c <_vfiprintf_r+0x18>
 8004024:	6983      	ldr	r3, [r0, #24]
 8004026:	b90b      	cbnz	r3, 800402c <_vfiprintf_r+0x18>
 8004028:	f7ff fd96 	bl	8003b58 <__sinit>
 800402c:	4b7c      	ldr	r3, [pc, #496]	; (8004220 <_vfiprintf_r+0x20c>)
 800402e:	429c      	cmp	r4, r3
 8004030:	d158      	bne.n	80040e4 <_vfiprintf_r+0xd0>
 8004032:	6874      	ldr	r4, [r6, #4]
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	0718      	lsls	r0, r3, #28
 8004038:	d55e      	bpl.n	80040f8 <_vfiprintf_r+0xe4>
 800403a:	6923      	ldr	r3, [r4, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05b      	beq.n	80040f8 <_vfiprintf_r+0xe4>
 8004040:	2300      	movs	r3, #0
 8004042:	9309      	str	r3, [sp, #36]	; 0x24
 8004044:	2320      	movs	r3, #32
 8004046:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800404a:	2330      	movs	r3, #48	; 0x30
 800404c:	f04f 0b01 	mov.w	fp, #1
 8004050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004054:	9503      	str	r5, [sp, #12]
 8004056:	46b8      	mov	r8, r7
 8004058:	4645      	mov	r5, r8
 800405a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800405e:	b10b      	cbz	r3, 8004064 <_vfiprintf_r+0x50>
 8004060:	2b25      	cmp	r3, #37	; 0x25
 8004062:	d154      	bne.n	800410e <_vfiprintf_r+0xfa>
 8004064:	ebb8 0a07 	subs.w	sl, r8, r7
 8004068:	d00b      	beq.n	8004082 <_vfiprintf_r+0x6e>
 800406a:	4653      	mov	r3, sl
 800406c:	463a      	mov	r2, r7
 800406e:	4621      	mov	r1, r4
 8004070:	4630      	mov	r0, r6
 8004072:	f7ff ffbc 	bl	8003fee <__sfputs_r>
 8004076:	3001      	adds	r0, #1
 8004078:	f000 80c2 	beq.w	8004200 <_vfiprintf_r+0x1ec>
 800407c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800407e:	4453      	add	r3, sl
 8004080:	9309      	str	r3, [sp, #36]	; 0x24
 8004082:	f898 3000 	ldrb.w	r3, [r8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80ba 	beq.w	8004200 <_vfiprintf_r+0x1ec>
 800408c:	2300      	movs	r3, #0
 800408e:	f04f 32ff 	mov.w	r2, #4294967295
 8004092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004096:	9304      	str	r3, [sp, #16]
 8004098:	9307      	str	r3, [sp, #28]
 800409a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800409e:	931a      	str	r3, [sp, #104]	; 0x68
 80040a0:	46a8      	mov	r8, r5
 80040a2:	2205      	movs	r2, #5
 80040a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80040a8:	485e      	ldr	r0, [pc, #376]	; (8004224 <_vfiprintf_r+0x210>)
 80040aa:	f000 fcad 	bl	8004a08 <memchr>
 80040ae:	9b04      	ldr	r3, [sp, #16]
 80040b0:	bb78      	cbnz	r0, 8004112 <_vfiprintf_r+0xfe>
 80040b2:	06d9      	lsls	r1, r3, #27
 80040b4:	bf44      	itt	mi
 80040b6:	2220      	movmi	r2, #32
 80040b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040bc:	071a      	lsls	r2, r3, #28
 80040be:	bf44      	itt	mi
 80040c0:	222b      	movmi	r2, #43	; 0x2b
 80040c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040c6:	782a      	ldrb	r2, [r5, #0]
 80040c8:	2a2a      	cmp	r2, #42	; 0x2a
 80040ca:	d02a      	beq.n	8004122 <_vfiprintf_r+0x10e>
 80040cc:	46a8      	mov	r8, r5
 80040ce:	2000      	movs	r0, #0
 80040d0:	250a      	movs	r5, #10
 80040d2:	9a07      	ldr	r2, [sp, #28]
 80040d4:	4641      	mov	r1, r8
 80040d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040da:	3b30      	subs	r3, #48	; 0x30
 80040dc:	2b09      	cmp	r3, #9
 80040de:	d969      	bls.n	80041b4 <_vfiprintf_r+0x1a0>
 80040e0:	b360      	cbz	r0, 800413c <_vfiprintf_r+0x128>
 80040e2:	e024      	b.n	800412e <_vfiprintf_r+0x11a>
 80040e4:	4b50      	ldr	r3, [pc, #320]	; (8004228 <_vfiprintf_r+0x214>)
 80040e6:	429c      	cmp	r4, r3
 80040e8:	d101      	bne.n	80040ee <_vfiprintf_r+0xda>
 80040ea:	68b4      	ldr	r4, [r6, #8]
 80040ec:	e7a2      	b.n	8004034 <_vfiprintf_r+0x20>
 80040ee:	4b4f      	ldr	r3, [pc, #316]	; (800422c <_vfiprintf_r+0x218>)
 80040f0:	429c      	cmp	r4, r3
 80040f2:	bf08      	it	eq
 80040f4:	68f4      	ldreq	r4, [r6, #12]
 80040f6:	e79d      	b.n	8004034 <_vfiprintf_r+0x20>
 80040f8:	4621      	mov	r1, r4
 80040fa:	4630      	mov	r0, r6
 80040fc:	f000 fae0 	bl	80046c0 <__swsetup_r>
 8004100:	2800      	cmp	r0, #0
 8004102:	d09d      	beq.n	8004040 <_vfiprintf_r+0x2c>
 8004104:	f04f 30ff 	mov.w	r0, #4294967295
 8004108:	b01d      	add	sp, #116	; 0x74
 800410a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800410e:	46a8      	mov	r8, r5
 8004110:	e7a2      	b.n	8004058 <_vfiprintf_r+0x44>
 8004112:	4a44      	ldr	r2, [pc, #272]	; (8004224 <_vfiprintf_r+0x210>)
 8004114:	4645      	mov	r5, r8
 8004116:	1a80      	subs	r0, r0, r2
 8004118:	fa0b f000 	lsl.w	r0, fp, r0
 800411c:	4318      	orrs	r0, r3
 800411e:	9004      	str	r0, [sp, #16]
 8004120:	e7be      	b.n	80040a0 <_vfiprintf_r+0x8c>
 8004122:	9a03      	ldr	r2, [sp, #12]
 8004124:	1d11      	adds	r1, r2, #4
 8004126:	6812      	ldr	r2, [r2, #0]
 8004128:	9103      	str	r1, [sp, #12]
 800412a:	2a00      	cmp	r2, #0
 800412c:	db01      	blt.n	8004132 <_vfiprintf_r+0x11e>
 800412e:	9207      	str	r2, [sp, #28]
 8004130:	e004      	b.n	800413c <_vfiprintf_r+0x128>
 8004132:	4252      	negs	r2, r2
 8004134:	f043 0302 	orr.w	r3, r3, #2
 8004138:	9207      	str	r2, [sp, #28]
 800413a:	9304      	str	r3, [sp, #16]
 800413c:	f898 3000 	ldrb.w	r3, [r8]
 8004140:	2b2e      	cmp	r3, #46	; 0x2e
 8004142:	d10e      	bne.n	8004162 <_vfiprintf_r+0x14e>
 8004144:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004148:	2b2a      	cmp	r3, #42	; 0x2a
 800414a:	d138      	bne.n	80041be <_vfiprintf_r+0x1aa>
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	f108 0802 	add.w	r8, r8, #2
 8004152:	1d1a      	adds	r2, r3, #4
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	9203      	str	r2, [sp, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	bfb8      	it	lt
 800415c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004160:	9305      	str	r3, [sp, #20]
 8004162:	4d33      	ldr	r5, [pc, #204]	; (8004230 <_vfiprintf_r+0x21c>)
 8004164:	2203      	movs	r2, #3
 8004166:	f898 1000 	ldrb.w	r1, [r8]
 800416a:	4628      	mov	r0, r5
 800416c:	f000 fc4c 	bl	8004a08 <memchr>
 8004170:	b140      	cbz	r0, 8004184 <_vfiprintf_r+0x170>
 8004172:	2340      	movs	r3, #64	; 0x40
 8004174:	1b40      	subs	r0, r0, r5
 8004176:	fa03 f000 	lsl.w	r0, r3, r0
 800417a:	9b04      	ldr	r3, [sp, #16]
 800417c:	f108 0801 	add.w	r8, r8, #1
 8004180:	4303      	orrs	r3, r0
 8004182:	9304      	str	r3, [sp, #16]
 8004184:	f898 1000 	ldrb.w	r1, [r8]
 8004188:	2206      	movs	r2, #6
 800418a:	482a      	ldr	r0, [pc, #168]	; (8004234 <_vfiprintf_r+0x220>)
 800418c:	f108 0701 	add.w	r7, r8, #1
 8004190:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004194:	f000 fc38 	bl	8004a08 <memchr>
 8004198:	2800      	cmp	r0, #0
 800419a:	d037      	beq.n	800420c <_vfiprintf_r+0x1f8>
 800419c:	4b26      	ldr	r3, [pc, #152]	; (8004238 <_vfiprintf_r+0x224>)
 800419e:	bb1b      	cbnz	r3, 80041e8 <_vfiprintf_r+0x1d4>
 80041a0:	9b03      	ldr	r3, [sp, #12]
 80041a2:	3307      	adds	r3, #7
 80041a4:	f023 0307 	bic.w	r3, r3, #7
 80041a8:	3308      	adds	r3, #8
 80041aa:	9303      	str	r3, [sp, #12]
 80041ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ae:	444b      	add	r3, r9
 80041b0:	9309      	str	r3, [sp, #36]	; 0x24
 80041b2:	e750      	b.n	8004056 <_vfiprintf_r+0x42>
 80041b4:	fb05 3202 	mla	r2, r5, r2, r3
 80041b8:	2001      	movs	r0, #1
 80041ba:	4688      	mov	r8, r1
 80041bc:	e78a      	b.n	80040d4 <_vfiprintf_r+0xc0>
 80041be:	2300      	movs	r3, #0
 80041c0:	250a      	movs	r5, #10
 80041c2:	4619      	mov	r1, r3
 80041c4:	f108 0801 	add.w	r8, r8, #1
 80041c8:	9305      	str	r3, [sp, #20]
 80041ca:	4640      	mov	r0, r8
 80041cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041d0:	3a30      	subs	r2, #48	; 0x30
 80041d2:	2a09      	cmp	r2, #9
 80041d4:	d903      	bls.n	80041de <_vfiprintf_r+0x1ca>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0c3      	beq.n	8004162 <_vfiprintf_r+0x14e>
 80041da:	9105      	str	r1, [sp, #20]
 80041dc:	e7c1      	b.n	8004162 <_vfiprintf_r+0x14e>
 80041de:	fb05 2101 	mla	r1, r5, r1, r2
 80041e2:	2301      	movs	r3, #1
 80041e4:	4680      	mov	r8, r0
 80041e6:	e7f0      	b.n	80041ca <_vfiprintf_r+0x1b6>
 80041e8:	ab03      	add	r3, sp, #12
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	4622      	mov	r2, r4
 80041ee:	4b13      	ldr	r3, [pc, #76]	; (800423c <_vfiprintf_r+0x228>)
 80041f0:	a904      	add	r1, sp, #16
 80041f2:	4630      	mov	r0, r6
 80041f4:	f3af 8000 	nop.w
 80041f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80041fc:	4681      	mov	r9, r0
 80041fe:	d1d5      	bne.n	80041ac <_vfiprintf_r+0x198>
 8004200:	89a3      	ldrh	r3, [r4, #12]
 8004202:	065b      	lsls	r3, r3, #25
 8004204:	f53f af7e 	bmi.w	8004104 <_vfiprintf_r+0xf0>
 8004208:	9809      	ldr	r0, [sp, #36]	; 0x24
 800420a:	e77d      	b.n	8004108 <_vfiprintf_r+0xf4>
 800420c:	ab03      	add	r3, sp, #12
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	4622      	mov	r2, r4
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <_vfiprintf_r+0x228>)
 8004214:	a904      	add	r1, sp, #16
 8004216:	4630      	mov	r0, r6
 8004218:	f000 f888 	bl	800432c <_printf_i>
 800421c:	e7ec      	b.n	80041f8 <_vfiprintf_r+0x1e4>
 800421e:	bf00      	nop
 8004220:	08004e00 	.word	0x08004e00
 8004224:	08004e40 	.word	0x08004e40
 8004228:	08004e20 	.word	0x08004e20
 800422c:	08004de0 	.word	0x08004de0
 8004230:	08004e46 	.word	0x08004e46
 8004234:	08004e4a 	.word	0x08004e4a
 8004238:	00000000 	.word	0x00000000
 800423c:	08003fef 	.word	0x08003fef

08004240 <_printf_common>:
 8004240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004244:	4691      	mov	r9, r2
 8004246:	461f      	mov	r7, r3
 8004248:	688a      	ldr	r2, [r1, #8]
 800424a:	690b      	ldr	r3, [r1, #16]
 800424c:	4606      	mov	r6, r0
 800424e:	4293      	cmp	r3, r2
 8004250:	bfb8      	it	lt
 8004252:	4613      	movlt	r3, r2
 8004254:	f8c9 3000 	str.w	r3, [r9]
 8004258:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800425c:	460c      	mov	r4, r1
 800425e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004262:	b112      	cbz	r2, 800426a <_printf_common+0x2a>
 8004264:	3301      	adds	r3, #1
 8004266:	f8c9 3000 	str.w	r3, [r9]
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	0699      	lsls	r1, r3, #26
 800426e:	bf42      	ittt	mi
 8004270:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004274:	3302      	addmi	r3, #2
 8004276:	f8c9 3000 	strmi.w	r3, [r9]
 800427a:	6825      	ldr	r5, [r4, #0]
 800427c:	f015 0506 	ands.w	r5, r5, #6
 8004280:	d107      	bne.n	8004292 <_printf_common+0x52>
 8004282:	f104 0a19 	add.w	sl, r4, #25
 8004286:	68e3      	ldr	r3, [r4, #12]
 8004288:	f8d9 2000 	ldr.w	r2, [r9]
 800428c:	1a9b      	subs	r3, r3, r2
 800428e:	42ab      	cmp	r3, r5
 8004290:	dc29      	bgt.n	80042e6 <_printf_common+0xa6>
 8004292:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004296:	6822      	ldr	r2, [r4, #0]
 8004298:	3300      	adds	r3, #0
 800429a:	bf18      	it	ne
 800429c:	2301      	movne	r3, #1
 800429e:	0692      	lsls	r2, r2, #26
 80042a0:	d42e      	bmi.n	8004300 <_printf_common+0xc0>
 80042a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a6:	4639      	mov	r1, r7
 80042a8:	4630      	mov	r0, r6
 80042aa:	47c0      	blx	r8
 80042ac:	3001      	adds	r0, #1
 80042ae:	d021      	beq.n	80042f4 <_printf_common+0xb4>
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	68e5      	ldr	r5, [r4, #12]
 80042b4:	f003 0306 	and.w	r3, r3, #6
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	bf18      	it	ne
 80042bc:	2500      	movne	r5, #0
 80042be:	f8d9 2000 	ldr.w	r2, [r9]
 80042c2:	f04f 0900 	mov.w	r9, #0
 80042c6:	bf08      	it	eq
 80042c8:	1aad      	subeq	r5, r5, r2
 80042ca:	68a3      	ldr	r3, [r4, #8]
 80042cc:	6922      	ldr	r2, [r4, #16]
 80042ce:	bf08      	it	eq
 80042d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d4:	4293      	cmp	r3, r2
 80042d6:	bfc4      	itt	gt
 80042d8:	1a9b      	subgt	r3, r3, r2
 80042da:	18ed      	addgt	r5, r5, r3
 80042dc:	341a      	adds	r4, #26
 80042de:	454d      	cmp	r5, r9
 80042e0:	d11a      	bne.n	8004318 <_printf_common+0xd8>
 80042e2:	2000      	movs	r0, #0
 80042e4:	e008      	b.n	80042f8 <_printf_common+0xb8>
 80042e6:	2301      	movs	r3, #1
 80042e8:	4652      	mov	r2, sl
 80042ea:	4639      	mov	r1, r7
 80042ec:	4630      	mov	r0, r6
 80042ee:	47c0      	blx	r8
 80042f0:	3001      	adds	r0, #1
 80042f2:	d103      	bne.n	80042fc <_printf_common+0xbc>
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fc:	3501      	adds	r5, #1
 80042fe:	e7c2      	b.n	8004286 <_printf_common+0x46>
 8004300:	2030      	movs	r0, #48	; 0x30
 8004302:	18e1      	adds	r1, r4, r3
 8004304:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800430e:	4422      	add	r2, r4
 8004310:	3302      	adds	r3, #2
 8004312:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004316:	e7c4      	b.n	80042a2 <_printf_common+0x62>
 8004318:	2301      	movs	r3, #1
 800431a:	4622      	mov	r2, r4
 800431c:	4639      	mov	r1, r7
 800431e:	4630      	mov	r0, r6
 8004320:	47c0      	blx	r8
 8004322:	3001      	adds	r0, #1
 8004324:	d0e6      	beq.n	80042f4 <_printf_common+0xb4>
 8004326:	f109 0901 	add.w	r9, r9, #1
 800432a:	e7d8      	b.n	80042de <_printf_common+0x9e>

0800432c <_printf_i>:
 800432c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004330:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004334:	460c      	mov	r4, r1
 8004336:	7e09      	ldrb	r1, [r1, #24]
 8004338:	b085      	sub	sp, #20
 800433a:	296e      	cmp	r1, #110	; 0x6e
 800433c:	4617      	mov	r7, r2
 800433e:	4606      	mov	r6, r0
 8004340:	4698      	mov	r8, r3
 8004342:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004344:	f000 80b3 	beq.w	80044ae <_printf_i+0x182>
 8004348:	d822      	bhi.n	8004390 <_printf_i+0x64>
 800434a:	2963      	cmp	r1, #99	; 0x63
 800434c:	d036      	beq.n	80043bc <_printf_i+0x90>
 800434e:	d80a      	bhi.n	8004366 <_printf_i+0x3a>
 8004350:	2900      	cmp	r1, #0
 8004352:	f000 80b9 	beq.w	80044c8 <_printf_i+0x19c>
 8004356:	2958      	cmp	r1, #88	; 0x58
 8004358:	f000 8083 	beq.w	8004462 <_printf_i+0x136>
 800435c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004360:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004364:	e032      	b.n	80043cc <_printf_i+0xa0>
 8004366:	2964      	cmp	r1, #100	; 0x64
 8004368:	d001      	beq.n	800436e <_printf_i+0x42>
 800436a:	2969      	cmp	r1, #105	; 0x69
 800436c:	d1f6      	bne.n	800435c <_printf_i+0x30>
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	6813      	ldr	r3, [r2, #0]
 8004372:	0605      	lsls	r5, r0, #24
 8004374:	f103 0104 	add.w	r1, r3, #4
 8004378:	d52a      	bpl.n	80043d0 <_printf_i+0xa4>
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6011      	str	r1, [r2, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	da03      	bge.n	800438a <_printf_i+0x5e>
 8004382:	222d      	movs	r2, #45	; 0x2d
 8004384:	425b      	negs	r3, r3
 8004386:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800438a:	486f      	ldr	r0, [pc, #444]	; (8004548 <_printf_i+0x21c>)
 800438c:	220a      	movs	r2, #10
 800438e:	e039      	b.n	8004404 <_printf_i+0xd8>
 8004390:	2973      	cmp	r1, #115	; 0x73
 8004392:	f000 809d 	beq.w	80044d0 <_printf_i+0x1a4>
 8004396:	d808      	bhi.n	80043aa <_printf_i+0x7e>
 8004398:	296f      	cmp	r1, #111	; 0x6f
 800439a:	d020      	beq.n	80043de <_printf_i+0xb2>
 800439c:	2970      	cmp	r1, #112	; 0x70
 800439e:	d1dd      	bne.n	800435c <_printf_i+0x30>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	f043 0320 	orr.w	r3, r3, #32
 80043a6:	6023      	str	r3, [r4, #0]
 80043a8:	e003      	b.n	80043b2 <_printf_i+0x86>
 80043aa:	2975      	cmp	r1, #117	; 0x75
 80043ac:	d017      	beq.n	80043de <_printf_i+0xb2>
 80043ae:	2978      	cmp	r1, #120	; 0x78
 80043b0:	d1d4      	bne.n	800435c <_printf_i+0x30>
 80043b2:	2378      	movs	r3, #120	; 0x78
 80043b4:	4865      	ldr	r0, [pc, #404]	; (800454c <_printf_i+0x220>)
 80043b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043ba:	e055      	b.n	8004468 <_printf_i+0x13c>
 80043bc:	6813      	ldr	r3, [r2, #0]
 80043be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043c2:	1d19      	adds	r1, r3, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6011      	str	r1, [r2, #0]
 80043c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043cc:	2301      	movs	r3, #1
 80043ce:	e08c      	b.n	80044ea <_printf_i+0x1be>
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043d6:	6011      	str	r1, [r2, #0]
 80043d8:	bf18      	it	ne
 80043da:	b21b      	sxthne	r3, r3
 80043dc:	e7cf      	b.n	800437e <_printf_i+0x52>
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	6825      	ldr	r5, [r4, #0]
 80043e2:	1d18      	adds	r0, r3, #4
 80043e4:	6010      	str	r0, [r2, #0]
 80043e6:	0628      	lsls	r0, r5, #24
 80043e8:	d501      	bpl.n	80043ee <_printf_i+0xc2>
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	e002      	b.n	80043f4 <_printf_i+0xc8>
 80043ee:	0668      	lsls	r0, r5, #25
 80043f0:	d5fb      	bpl.n	80043ea <_printf_i+0xbe>
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	296f      	cmp	r1, #111	; 0x6f
 80043f6:	bf14      	ite	ne
 80043f8:	220a      	movne	r2, #10
 80043fa:	2208      	moveq	r2, #8
 80043fc:	4852      	ldr	r0, [pc, #328]	; (8004548 <_printf_i+0x21c>)
 80043fe:	2100      	movs	r1, #0
 8004400:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004404:	6865      	ldr	r5, [r4, #4]
 8004406:	2d00      	cmp	r5, #0
 8004408:	60a5      	str	r5, [r4, #8]
 800440a:	f2c0 8095 	blt.w	8004538 <_printf_i+0x20c>
 800440e:	6821      	ldr	r1, [r4, #0]
 8004410:	f021 0104 	bic.w	r1, r1, #4
 8004414:	6021      	str	r1, [r4, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d13d      	bne.n	8004496 <_printf_i+0x16a>
 800441a:	2d00      	cmp	r5, #0
 800441c:	f040 808e 	bne.w	800453c <_printf_i+0x210>
 8004420:	4665      	mov	r5, ip
 8004422:	2a08      	cmp	r2, #8
 8004424:	d10b      	bne.n	800443e <_printf_i+0x112>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	07db      	lsls	r3, r3, #31
 800442a:	d508      	bpl.n	800443e <_printf_i+0x112>
 800442c:	6923      	ldr	r3, [r4, #16]
 800442e:	6862      	ldr	r2, [r4, #4]
 8004430:	429a      	cmp	r2, r3
 8004432:	bfde      	ittt	le
 8004434:	2330      	movle	r3, #48	; 0x30
 8004436:	f805 3c01 	strble.w	r3, [r5, #-1]
 800443a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800443e:	ebac 0305 	sub.w	r3, ip, r5
 8004442:	6123      	str	r3, [r4, #16]
 8004444:	f8cd 8000 	str.w	r8, [sp]
 8004448:	463b      	mov	r3, r7
 800444a:	aa03      	add	r2, sp, #12
 800444c:	4621      	mov	r1, r4
 800444e:	4630      	mov	r0, r6
 8004450:	f7ff fef6 	bl	8004240 <_printf_common>
 8004454:	3001      	adds	r0, #1
 8004456:	d14d      	bne.n	80044f4 <_printf_i+0x1c8>
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	b005      	add	sp, #20
 800445e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004462:	4839      	ldr	r0, [pc, #228]	; (8004548 <_printf_i+0x21c>)
 8004464:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004468:	6813      	ldr	r3, [r2, #0]
 800446a:	6821      	ldr	r1, [r4, #0]
 800446c:	1d1d      	adds	r5, r3, #4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6015      	str	r5, [r2, #0]
 8004472:	060a      	lsls	r2, r1, #24
 8004474:	d50b      	bpl.n	800448e <_printf_i+0x162>
 8004476:	07ca      	lsls	r2, r1, #31
 8004478:	bf44      	itt	mi
 800447a:	f041 0120 	orrmi.w	r1, r1, #32
 800447e:	6021      	strmi	r1, [r4, #0]
 8004480:	b91b      	cbnz	r3, 800448a <_printf_i+0x15e>
 8004482:	6822      	ldr	r2, [r4, #0]
 8004484:	f022 0220 	bic.w	r2, r2, #32
 8004488:	6022      	str	r2, [r4, #0]
 800448a:	2210      	movs	r2, #16
 800448c:	e7b7      	b.n	80043fe <_printf_i+0xd2>
 800448e:	064d      	lsls	r5, r1, #25
 8004490:	bf48      	it	mi
 8004492:	b29b      	uxthmi	r3, r3
 8004494:	e7ef      	b.n	8004476 <_printf_i+0x14a>
 8004496:	4665      	mov	r5, ip
 8004498:	fbb3 f1f2 	udiv	r1, r3, r2
 800449c:	fb02 3311 	mls	r3, r2, r1, r3
 80044a0:	5cc3      	ldrb	r3, [r0, r3]
 80044a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044a6:	460b      	mov	r3, r1
 80044a8:	2900      	cmp	r1, #0
 80044aa:	d1f5      	bne.n	8004498 <_printf_i+0x16c>
 80044ac:	e7b9      	b.n	8004422 <_printf_i+0xf6>
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	6825      	ldr	r5, [r4, #0]
 80044b2:	1d18      	adds	r0, r3, #4
 80044b4:	6961      	ldr	r1, [r4, #20]
 80044b6:	6010      	str	r0, [r2, #0]
 80044b8:	0628      	lsls	r0, r5, #24
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	d501      	bpl.n	80044c2 <_printf_i+0x196>
 80044be:	6019      	str	r1, [r3, #0]
 80044c0:	e002      	b.n	80044c8 <_printf_i+0x19c>
 80044c2:	066a      	lsls	r2, r5, #25
 80044c4:	d5fb      	bpl.n	80044be <_printf_i+0x192>
 80044c6:	8019      	strh	r1, [r3, #0]
 80044c8:	2300      	movs	r3, #0
 80044ca:	4665      	mov	r5, ip
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	e7b9      	b.n	8004444 <_printf_i+0x118>
 80044d0:	6813      	ldr	r3, [r2, #0]
 80044d2:	1d19      	adds	r1, r3, #4
 80044d4:	6011      	str	r1, [r2, #0]
 80044d6:	681d      	ldr	r5, [r3, #0]
 80044d8:	6862      	ldr	r2, [r4, #4]
 80044da:	2100      	movs	r1, #0
 80044dc:	4628      	mov	r0, r5
 80044de:	f000 fa93 	bl	8004a08 <memchr>
 80044e2:	b108      	cbz	r0, 80044e8 <_printf_i+0x1bc>
 80044e4:	1b40      	subs	r0, r0, r5
 80044e6:	6060      	str	r0, [r4, #4]
 80044e8:	6863      	ldr	r3, [r4, #4]
 80044ea:	6123      	str	r3, [r4, #16]
 80044ec:	2300      	movs	r3, #0
 80044ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f2:	e7a7      	b.n	8004444 <_printf_i+0x118>
 80044f4:	6923      	ldr	r3, [r4, #16]
 80044f6:	462a      	mov	r2, r5
 80044f8:	4639      	mov	r1, r7
 80044fa:	4630      	mov	r0, r6
 80044fc:	47c0      	blx	r8
 80044fe:	3001      	adds	r0, #1
 8004500:	d0aa      	beq.n	8004458 <_printf_i+0x12c>
 8004502:	6823      	ldr	r3, [r4, #0]
 8004504:	079b      	lsls	r3, r3, #30
 8004506:	d413      	bmi.n	8004530 <_printf_i+0x204>
 8004508:	68e0      	ldr	r0, [r4, #12]
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	4298      	cmp	r0, r3
 800450e:	bfb8      	it	lt
 8004510:	4618      	movlt	r0, r3
 8004512:	e7a3      	b.n	800445c <_printf_i+0x130>
 8004514:	2301      	movs	r3, #1
 8004516:	464a      	mov	r2, r9
 8004518:	4639      	mov	r1, r7
 800451a:	4630      	mov	r0, r6
 800451c:	47c0      	blx	r8
 800451e:	3001      	adds	r0, #1
 8004520:	d09a      	beq.n	8004458 <_printf_i+0x12c>
 8004522:	3501      	adds	r5, #1
 8004524:	68e3      	ldr	r3, [r4, #12]
 8004526:	9a03      	ldr	r2, [sp, #12]
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	42ab      	cmp	r3, r5
 800452c:	dcf2      	bgt.n	8004514 <_printf_i+0x1e8>
 800452e:	e7eb      	b.n	8004508 <_printf_i+0x1dc>
 8004530:	2500      	movs	r5, #0
 8004532:	f104 0919 	add.w	r9, r4, #25
 8004536:	e7f5      	b.n	8004524 <_printf_i+0x1f8>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1ac      	bne.n	8004496 <_printf_i+0x16a>
 800453c:	7803      	ldrb	r3, [r0, #0]
 800453e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004546:	e76c      	b.n	8004422 <_printf_i+0xf6>
 8004548:	08004e51 	.word	0x08004e51
 800454c:	08004e62 	.word	0x08004e62

08004550 <_sbrk_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	2300      	movs	r3, #0
 8004554:	4c05      	ldr	r4, [pc, #20]	; (800456c <_sbrk_r+0x1c>)
 8004556:	4605      	mov	r5, r0
 8004558:	4608      	mov	r0, r1
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	f7fc ff2c 	bl	80013b8 <_sbrk>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_sbrk_r+0x1a>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	b103      	cbz	r3, 800456a <_sbrk_r+0x1a>
 8004568:	602b      	str	r3, [r5, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	200001ac 	.word	0x200001ac

08004570 <__sread>:
 8004570:	b510      	push	{r4, lr}
 8004572:	460c      	mov	r4, r1
 8004574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004578:	f000 faec 	bl	8004b54 <_read_r>
 800457c:	2800      	cmp	r0, #0
 800457e:	bfab      	itete	ge
 8004580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004582:	89a3      	ldrhlt	r3, [r4, #12]
 8004584:	181b      	addge	r3, r3, r0
 8004586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800458a:	bfac      	ite	ge
 800458c:	6563      	strge	r3, [r4, #84]	; 0x54
 800458e:	81a3      	strhlt	r3, [r4, #12]
 8004590:	bd10      	pop	{r4, pc}

08004592 <__swrite>:
 8004592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004596:	461f      	mov	r7, r3
 8004598:	898b      	ldrh	r3, [r1, #12]
 800459a:	4605      	mov	r5, r0
 800459c:	05db      	lsls	r3, r3, #23
 800459e:	460c      	mov	r4, r1
 80045a0:	4616      	mov	r6, r2
 80045a2:	d505      	bpl.n	80045b0 <__swrite+0x1e>
 80045a4:	2302      	movs	r3, #2
 80045a6:	2200      	movs	r2, #0
 80045a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ac:	f000 f9b6 	bl	800491c <_lseek_r>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	4632      	mov	r2, r6
 80045b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045b8:	81a3      	strh	r3, [r4, #12]
 80045ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045be:	463b      	mov	r3, r7
 80045c0:	4628      	mov	r0, r5
 80045c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c6:	f000 b869 	b.w	800469c <_write_r>

080045ca <__sseek>:
 80045ca:	b510      	push	{r4, lr}
 80045cc:	460c      	mov	r4, r1
 80045ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d2:	f000 f9a3 	bl	800491c <_lseek_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	bf15      	itete	ne
 80045dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80045de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045e6:	81a3      	strheq	r3, [r4, #12]
 80045e8:	bf18      	it	ne
 80045ea:	81a3      	strhne	r3, [r4, #12]
 80045ec:	bd10      	pop	{r4, pc}

080045ee <__sclose>:
 80045ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f2:	f000 b8d3 	b.w	800479c <_close_r>
	...

080045f8 <__swbuf_r>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	460e      	mov	r6, r1
 80045fc:	4614      	mov	r4, r2
 80045fe:	4605      	mov	r5, r0
 8004600:	b118      	cbz	r0, 800460a <__swbuf_r+0x12>
 8004602:	6983      	ldr	r3, [r0, #24]
 8004604:	b90b      	cbnz	r3, 800460a <__swbuf_r+0x12>
 8004606:	f7ff faa7 	bl	8003b58 <__sinit>
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <__swbuf_r+0x98>)
 800460c:	429c      	cmp	r4, r3
 800460e:	d12a      	bne.n	8004666 <__swbuf_r+0x6e>
 8004610:	686c      	ldr	r4, [r5, #4]
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	60a3      	str	r3, [r4, #8]
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	071a      	lsls	r2, r3, #28
 800461a:	d52e      	bpl.n	800467a <__swbuf_r+0x82>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	b363      	cbz	r3, 800467a <__swbuf_r+0x82>
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	6820      	ldr	r0, [r4, #0]
 8004624:	b2f6      	uxtb	r6, r6
 8004626:	1ac0      	subs	r0, r0, r3
 8004628:	6963      	ldr	r3, [r4, #20]
 800462a:	4637      	mov	r7, r6
 800462c:	4283      	cmp	r3, r0
 800462e:	dc04      	bgt.n	800463a <__swbuf_r+0x42>
 8004630:	4621      	mov	r1, r4
 8004632:	4628      	mov	r0, r5
 8004634:	f000 f948 	bl	80048c8 <_fflush_r>
 8004638:	bb28      	cbnz	r0, 8004686 <__swbuf_r+0x8e>
 800463a:	68a3      	ldr	r3, [r4, #8]
 800463c:	3001      	adds	r0, #1
 800463e:	3b01      	subs	r3, #1
 8004640:	60a3      	str	r3, [r4, #8]
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	701e      	strb	r6, [r3, #0]
 800464a:	6963      	ldr	r3, [r4, #20]
 800464c:	4283      	cmp	r3, r0
 800464e:	d004      	beq.n	800465a <__swbuf_r+0x62>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	07db      	lsls	r3, r3, #31
 8004654:	d519      	bpl.n	800468a <__swbuf_r+0x92>
 8004656:	2e0a      	cmp	r6, #10
 8004658:	d117      	bne.n	800468a <__swbuf_r+0x92>
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f933 	bl	80048c8 <_fflush_r>
 8004662:	b190      	cbz	r0, 800468a <__swbuf_r+0x92>
 8004664:	e00f      	b.n	8004686 <__swbuf_r+0x8e>
 8004666:	4b0b      	ldr	r3, [pc, #44]	; (8004694 <__swbuf_r+0x9c>)
 8004668:	429c      	cmp	r4, r3
 800466a:	d101      	bne.n	8004670 <__swbuf_r+0x78>
 800466c:	68ac      	ldr	r4, [r5, #8]
 800466e:	e7d0      	b.n	8004612 <__swbuf_r+0x1a>
 8004670:	4b09      	ldr	r3, [pc, #36]	; (8004698 <__swbuf_r+0xa0>)
 8004672:	429c      	cmp	r4, r3
 8004674:	bf08      	it	eq
 8004676:	68ec      	ldreq	r4, [r5, #12]
 8004678:	e7cb      	b.n	8004612 <__swbuf_r+0x1a>
 800467a:	4621      	mov	r1, r4
 800467c:	4628      	mov	r0, r5
 800467e:	f000 f81f 	bl	80046c0 <__swsetup_r>
 8004682:	2800      	cmp	r0, #0
 8004684:	d0cc      	beq.n	8004620 <__swbuf_r+0x28>
 8004686:	f04f 37ff 	mov.w	r7, #4294967295
 800468a:	4638      	mov	r0, r7
 800468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800468e:	bf00      	nop
 8004690:	08004e00 	.word	0x08004e00
 8004694:	08004e20 	.word	0x08004e20
 8004698:	08004de0 	.word	0x08004de0

0800469c <_write_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4605      	mov	r5, r0
 80046a0:	4608      	mov	r0, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	2200      	movs	r2, #0
 80046a6:	4c05      	ldr	r4, [pc, #20]	; (80046bc <_write_r+0x20>)
 80046a8:	6022      	str	r2, [r4, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f7fc fe37 	bl	800131e <_write>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d102      	bne.n	80046ba <_write_r+0x1e>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	b103      	cbz	r3, 80046ba <_write_r+0x1e>
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	200001ac 	.word	0x200001ac

080046c0 <__swsetup_r>:
 80046c0:	4b32      	ldr	r3, [pc, #200]	; (800478c <__swsetup_r+0xcc>)
 80046c2:	b570      	push	{r4, r5, r6, lr}
 80046c4:	681d      	ldr	r5, [r3, #0]
 80046c6:	4606      	mov	r6, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	b125      	cbz	r5, 80046d6 <__swsetup_r+0x16>
 80046cc:	69ab      	ldr	r3, [r5, #24]
 80046ce:	b913      	cbnz	r3, 80046d6 <__swsetup_r+0x16>
 80046d0:	4628      	mov	r0, r5
 80046d2:	f7ff fa41 	bl	8003b58 <__sinit>
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <__swsetup_r+0xd0>)
 80046d8:	429c      	cmp	r4, r3
 80046da:	d10f      	bne.n	80046fc <__swsetup_r+0x3c>
 80046dc:	686c      	ldr	r4, [r5, #4]
 80046de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	0715      	lsls	r5, r2, #28
 80046e6:	d42c      	bmi.n	8004742 <__swsetup_r+0x82>
 80046e8:	06d0      	lsls	r0, r2, #27
 80046ea:	d411      	bmi.n	8004710 <__swsetup_r+0x50>
 80046ec:	2209      	movs	r2, #9
 80046ee:	6032      	str	r2, [r6, #0]
 80046f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f4:	81a3      	strh	r3, [r4, #12]
 80046f6:	f04f 30ff 	mov.w	r0, #4294967295
 80046fa:	e03e      	b.n	800477a <__swsetup_r+0xba>
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <__swsetup_r+0xd4>)
 80046fe:	429c      	cmp	r4, r3
 8004700:	d101      	bne.n	8004706 <__swsetup_r+0x46>
 8004702:	68ac      	ldr	r4, [r5, #8]
 8004704:	e7eb      	b.n	80046de <__swsetup_r+0x1e>
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <__swsetup_r+0xd8>)
 8004708:	429c      	cmp	r4, r3
 800470a:	bf08      	it	eq
 800470c:	68ec      	ldreq	r4, [r5, #12]
 800470e:	e7e6      	b.n	80046de <__swsetup_r+0x1e>
 8004710:	0751      	lsls	r1, r2, #29
 8004712:	d512      	bpl.n	800473a <__swsetup_r+0x7a>
 8004714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004716:	b141      	cbz	r1, 800472a <__swsetup_r+0x6a>
 8004718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800471c:	4299      	cmp	r1, r3
 800471e:	d002      	beq.n	8004726 <__swsetup_r+0x66>
 8004720:	4630      	mov	r0, r6
 8004722:	f000 f9a5 	bl	8004a70 <_free_r>
 8004726:	2300      	movs	r3, #0
 8004728:	6363      	str	r3, [r4, #52]	; 0x34
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	2300      	movs	r3, #0
 8004734:	6063      	str	r3, [r4, #4]
 8004736:	6923      	ldr	r3, [r4, #16]
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	81a3      	strh	r3, [r4, #12]
 8004742:	6923      	ldr	r3, [r4, #16]
 8004744:	b94b      	cbnz	r3, 800475a <__swsetup_r+0x9a>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800474c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004750:	d003      	beq.n	800475a <__swsetup_r+0x9a>
 8004752:	4621      	mov	r1, r4
 8004754:	4630      	mov	r0, r6
 8004756:	f000 f917 	bl	8004988 <__smakebuf_r>
 800475a:	89a2      	ldrh	r2, [r4, #12]
 800475c:	f012 0301 	ands.w	r3, r2, #1
 8004760:	d00c      	beq.n	800477c <__swsetup_r+0xbc>
 8004762:	2300      	movs	r3, #0
 8004764:	60a3      	str	r3, [r4, #8]
 8004766:	6963      	ldr	r3, [r4, #20]
 8004768:	425b      	negs	r3, r3
 800476a:	61a3      	str	r3, [r4, #24]
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	b953      	cbnz	r3, 8004786 <__swsetup_r+0xc6>
 8004770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004774:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004778:	d1ba      	bne.n	80046f0 <__swsetup_r+0x30>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	0792      	lsls	r2, r2, #30
 800477e:	bf58      	it	pl
 8004780:	6963      	ldrpl	r3, [r4, #20]
 8004782:	60a3      	str	r3, [r4, #8]
 8004784:	e7f2      	b.n	800476c <__swsetup_r+0xac>
 8004786:	2000      	movs	r0, #0
 8004788:	e7f7      	b.n	800477a <__swsetup_r+0xba>
 800478a:	bf00      	nop
 800478c:	2000000c 	.word	0x2000000c
 8004790:	08004e00 	.word	0x08004e00
 8004794:	08004e20 	.word	0x08004e20
 8004798:	08004de0 	.word	0x08004de0

0800479c <_close_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	2300      	movs	r3, #0
 80047a0:	4c05      	ldr	r4, [pc, #20]	; (80047b8 <_close_r+0x1c>)
 80047a2:	4605      	mov	r5, r0
 80047a4:	4608      	mov	r0, r1
 80047a6:	6023      	str	r3, [r4, #0]
 80047a8:	f7fc fdd5 	bl	8001356 <_close>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d102      	bne.n	80047b6 <_close_r+0x1a>
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	b103      	cbz	r3, 80047b6 <_close_r+0x1a>
 80047b4:	602b      	str	r3, [r5, #0]
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
 80047b8:	200001ac 	.word	0x200001ac

080047bc <__sflush_r>:
 80047bc:	898a      	ldrh	r2, [r1, #12]
 80047be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c2:	4605      	mov	r5, r0
 80047c4:	0710      	lsls	r0, r2, #28
 80047c6:	460c      	mov	r4, r1
 80047c8:	d458      	bmi.n	800487c <__sflush_r+0xc0>
 80047ca:	684b      	ldr	r3, [r1, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	dc05      	bgt.n	80047dc <__sflush_r+0x20>
 80047d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dc02      	bgt.n	80047dc <__sflush_r+0x20>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d0f9      	beq.n	80047d6 <__sflush_r+0x1a>
 80047e2:	2300      	movs	r3, #0
 80047e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047e8:	682f      	ldr	r7, [r5, #0]
 80047ea:	6a21      	ldr	r1, [r4, #32]
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	d032      	beq.n	8004856 <__sflush_r+0x9a>
 80047f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	075a      	lsls	r2, r3, #29
 80047f6:	d505      	bpl.n	8004804 <__sflush_r+0x48>
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	1ac0      	subs	r0, r0, r3
 80047fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047fe:	b10b      	cbz	r3, 8004804 <__sflush_r+0x48>
 8004800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004802:	1ac0      	subs	r0, r0, r3
 8004804:	2300      	movs	r3, #0
 8004806:	4602      	mov	r2, r0
 8004808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800480a:	6a21      	ldr	r1, [r4, #32]
 800480c:	4628      	mov	r0, r5
 800480e:	47b0      	blx	r6
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	d106      	bne.n	8004824 <__sflush_r+0x68>
 8004816:	6829      	ldr	r1, [r5, #0]
 8004818:	291d      	cmp	r1, #29
 800481a:	d848      	bhi.n	80048ae <__sflush_r+0xf2>
 800481c:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <__sflush_r+0x108>)
 800481e:	40ca      	lsrs	r2, r1
 8004820:	07d6      	lsls	r6, r2, #31
 8004822:	d544      	bpl.n	80048ae <__sflush_r+0xf2>
 8004824:	2200      	movs	r2, #0
 8004826:	6062      	str	r2, [r4, #4]
 8004828:	6922      	ldr	r2, [r4, #16]
 800482a:	04d9      	lsls	r1, r3, #19
 800482c:	6022      	str	r2, [r4, #0]
 800482e:	d504      	bpl.n	800483a <__sflush_r+0x7e>
 8004830:	1c42      	adds	r2, r0, #1
 8004832:	d101      	bne.n	8004838 <__sflush_r+0x7c>
 8004834:	682b      	ldr	r3, [r5, #0]
 8004836:	b903      	cbnz	r3, 800483a <__sflush_r+0x7e>
 8004838:	6560      	str	r0, [r4, #84]	; 0x54
 800483a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800483c:	602f      	str	r7, [r5, #0]
 800483e:	2900      	cmp	r1, #0
 8004840:	d0c9      	beq.n	80047d6 <__sflush_r+0x1a>
 8004842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004846:	4299      	cmp	r1, r3
 8004848:	d002      	beq.n	8004850 <__sflush_r+0x94>
 800484a:	4628      	mov	r0, r5
 800484c:	f000 f910 	bl	8004a70 <_free_r>
 8004850:	2000      	movs	r0, #0
 8004852:	6360      	str	r0, [r4, #52]	; 0x34
 8004854:	e7c0      	b.n	80047d8 <__sflush_r+0x1c>
 8004856:	2301      	movs	r3, #1
 8004858:	4628      	mov	r0, r5
 800485a:	47b0      	blx	r6
 800485c:	1c41      	adds	r1, r0, #1
 800485e:	d1c8      	bne.n	80047f2 <__sflush_r+0x36>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0c5      	beq.n	80047f2 <__sflush_r+0x36>
 8004866:	2b1d      	cmp	r3, #29
 8004868:	d001      	beq.n	800486e <__sflush_r+0xb2>
 800486a:	2b16      	cmp	r3, #22
 800486c:	d101      	bne.n	8004872 <__sflush_r+0xb6>
 800486e:	602f      	str	r7, [r5, #0]
 8004870:	e7b1      	b.n	80047d6 <__sflush_r+0x1a>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	e7ad      	b.n	80047d8 <__sflush_r+0x1c>
 800487c:	690f      	ldr	r7, [r1, #16]
 800487e:	2f00      	cmp	r7, #0
 8004880:	d0a9      	beq.n	80047d6 <__sflush_r+0x1a>
 8004882:	0793      	lsls	r3, r2, #30
 8004884:	bf18      	it	ne
 8004886:	2300      	movne	r3, #0
 8004888:	680e      	ldr	r6, [r1, #0]
 800488a:	bf08      	it	eq
 800488c:	694b      	ldreq	r3, [r1, #20]
 800488e:	eba6 0807 	sub.w	r8, r6, r7
 8004892:	600f      	str	r7, [r1, #0]
 8004894:	608b      	str	r3, [r1, #8]
 8004896:	f1b8 0f00 	cmp.w	r8, #0
 800489a:	dd9c      	ble.n	80047d6 <__sflush_r+0x1a>
 800489c:	4643      	mov	r3, r8
 800489e:	463a      	mov	r2, r7
 80048a0:	6a21      	ldr	r1, [r4, #32]
 80048a2:	4628      	mov	r0, r5
 80048a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048a6:	47b0      	blx	r6
 80048a8:	2800      	cmp	r0, #0
 80048aa:	dc06      	bgt.n	80048ba <__sflush_r+0xfe>
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b2:	81a3      	strh	r3, [r4, #12]
 80048b4:	f04f 30ff 	mov.w	r0, #4294967295
 80048b8:	e78e      	b.n	80047d8 <__sflush_r+0x1c>
 80048ba:	4407      	add	r7, r0
 80048bc:	eba8 0800 	sub.w	r8, r8, r0
 80048c0:	e7e9      	b.n	8004896 <__sflush_r+0xda>
 80048c2:	bf00      	nop
 80048c4:	20400001 	.word	0x20400001

080048c8 <_fflush_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	690b      	ldr	r3, [r1, #16]
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	b1db      	cbz	r3, 800490a <_fflush_r+0x42>
 80048d2:	b118      	cbz	r0, 80048dc <_fflush_r+0x14>
 80048d4:	6983      	ldr	r3, [r0, #24]
 80048d6:	b90b      	cbnz	r3, 80048dc <_fflush_r+0x14>
 80048d8:	f7ff f93e 	bl	8003b58 <__sinit>
 80048dc:	4b0c      	ldr	r3, [pc, #48]	; (8004910 <_fflush_r+0x48>)
 80048de:	429c      	cmp	r4, r3
 80048e0:	d109      	bne.n	80048f6 <_fflush_r+0x2e>
 80048e2:	686c      	ldr	r4, [r5, #4]
 80048e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e8:	b17b      	cbz	r3, 800490a <_fflush_r+0x42>
 80048ea:	4621      	mov	r1, r4
 80048ec:	4628      	mov	r0, r5
 80048ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f2:	f7ff bf63 	b.w	80047bc <__sflush_r>
 80048f6:	4b07      	ldr	r3, [pc, #28]	; (8004914 <_fflush_r+0x4c>)
 80048f8:	429c      	cmp	r4, r3
 80048fa:	d101      	bne.n	8004900 <_fflush_r+0x38>
 80048fc:	68ac      	ldr	r4, [r5, #8]
 80048fe:	e7f1      	b.n	80048e4 <_fflush_r+0x1c>
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <_fflush_r+0x50>)
 8004902:	429c      	cmp	r4, r3
 8004904:	bf08      	it	eq
 8004906:	68ec      	ldreq	r4, [r5, #12]
 8004908:	e7ec      	b.n	80048e4 <_fflush_r+0x1c>
 800490a:	2000      	movs	r0, #0
 800490c:	bd38      	pop	{r3, r4, r5, pc}
 800490e:	bf00      	nop
 8004910:	08004e00 	.word	0x08004e00
 8004914:	08004e20 	.word	0x08004e20
 8004918:	08004de0 	.word	0x08004de0

0800491c <_lseek_r>:
 800491c:	b538      	push	{r3, r4, r5, lr}
 800491e:	4605      	mov	r5, r0
 8004920:	4608      	mov	r0, r1
 8004922:	4611      	mov	r1, r2
 8004924:	2200      	movs	r2, #0
 8004926:	4c05      	ldr	r4, [pc, #20]	; (800493c <_lseek_r+0x20>)
 8004928:	6022      	str	r2, [r4, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	f7fc fd37 	bl	800139e <_lseek>
 8004930:	1c43      	adds	r3, r0, #1
 8004932:	d102      	bne.n	800493a <_lseek_r+0x1e>
 8004934:	6823      	ldr	r3, [r4, #0]
 8004936:	b103      	cbz	r3, 800493a <_lseek_r+0x1e>
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	bd38      	pop	{r3, r4, r5, pc}
 800493c:	200001ac 	.word	0x200001ac

08004940 <__swhatbuf_r>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	460e      	mov	r6, r1
 8004944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004948:	b096      	sub	sp, #88	; 0x58
 800494a:	2900      	cmp	r1, #0
 800494c:	4614      	mov	r4, r2
 800494e:	461d      	mov	r5, r3
 8004950:	da07      	bge.n	8004962 <__swhatbuf_r+0x22>
 8004952:	2300      	movs	r3, #0
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	89b3      	ldrh	r3, [r6, #12]
 8004958:	061a      	lsls	r2, r3, #24
 800495a:	d410      	bmi.n	800497e <__swhatbuf_r+0x3e>
 800495c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004960:	e00e      	b.n	8004980 <__swhatbuf_r+0x40>
 8004962:	466a      	mov	r2, sp
 8004964:	f000 f908 	bl	8004b78 <_fstat_r>
 8004968:	2800      	cmp	r0, #0
 800496a:	dbf2      	blt.n	8004952 <__swhatbuf_r+0x12>
 800496c:	9a01      	ldr	r2, [sp, #4]
 800496e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004972:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004976:	425a      	negs	r2, r3
 8004978:	415a      	adcs	r2, r3
 800497a:	602a      	str	r2, [r5, #0]
 800497c:	e7ee      	b.n	800495c <__swhatbuf_r+0x1c>
 800497e:	2340      	movs	r3, #64	; 0x40
 8004980:	2000      	movs	r0, #0
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	b016      	add	sp, #88	; 0x58
 8004986:	bd70      	pop	{r4, r5, r6, pc}

08004988 <__smakebuf_r>:
 8004988:	898b      	ldrh	r3, [r1, #12]
 800498a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800498c:	079d      	lsls	r5, r3, #30
 800498e:	4606      	mov	r6, r0
 8004990:	460c      	mov	r4, r1
 8004992:	d507      	bpl.n	80049a4 <__smakebuf_r+0x1c>
 8004994:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	2301      	movs	r3, #1
 800499e:	6163      	str	r3, [r4, #20]
 80049a0:	b002      	add	sp, #8
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
 80049a4:	ab01      	add	r3, sp, #4
 80049a6:	466a      	mov	r2, sp
 80049a8:	f7ff ffca 	bl	8004940 <__swhatbuf_r>
 80049ac:	9900      	ldr	r1, [sp, #0]
 80049ae:	4605      	mov	r5, r0
 80049b0:	4630      	mov	r0, r6
 80049b2:	f7ff f95b 	bl	8003c6c <_malloc_r>
 80049b6:	b948      	cbnz	r0, 80049cc <__smakebuf_r+0x44>
 80049b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049bc:	059a      	lsls	r2, r3, #22
 80049be:	d4ef      	bmi.n	80049a0 <__smakebuf_r+0x18>
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	e7e3      	b.n	8004994 <__smakebuf_r+0xc>
 80049cc:	4b0d      	ldr	r3, [pc, #52]	; (8004a04 <__smakebuf_r+0x7c>)
 80049ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	6020      	str	r0, [r4, #0]
 80049d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d8:	81a3      	strh	r3, [r4, #12]
 80049da:	9b00      	ldr	r3, [sp, #0]
 80049dc:	6120      	str	r0, [r4, #16]
 80049de:	6163      	str	r3, [r4, #20]
 80049e0:	9b01      	ldr	r3, [sp, #4]
 80049e2:	b15b      	cbz	r3, 80049fc <__smakebuf_r+0x74>
 80049e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 f8d7 	bl	8004b9c <_isatty_r>
 80049ee:	b128      	cbz	r0, 80049fc <__smakebuf_r+0x74>
 80049f0:	89a3      	ldrh	r3, [r4, #12]
 80049f2:	f023 0303 	bic.w	r3, r3, #3
 80049f6:	f043 0301 	orr.w	r3, r3, #1
 80049fa:	81a3      	strh	r3, [r4, #12]
 80049fc:	89a3      	ldrh	r3, [r4, #12]
 80049fe:	431d      	orrs	r5, r3
 8004a00:	81a5      	strh	r5, [r4, #12]
 8004a02:	e7cd      	b.n	80049a0 <__smakebuf_r+0x18>
 8004a04:	08003b21 	.word	0x08003b21

08004a08 <memchr>:
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	b2c9      	uxtb	r1, r1
 8004a0c:	4402      	add	r2, r0
 8004a0e:	4290      	cmp	r0, r2
 8004a10:	4603      	mov	r3, r0
 8004a12:	d101      	bne.n	8004a18 <memchr+0x10>
 8004a14:	2300      	movs	r3, #0
 8004a16:	e003      	b.n	8004a20 <memchr+0x18>
 8004a18:	781c      	ldrb	r4, [r3, #0]
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	428c      	cmp	r4, r1
 8004a1e:	d1f6      	bne.n	8004a0e <memchr+0x6>
 8004a20:	4618      	mov	r0, r3
 8004a22:	bd10      	pop	{r4, pc}

08004a24 <memcpy>:
 8004a24:	b510      	push	{r4, lr}
 8004a26:	1e43      	subs	r3, r0, #1
 8004a28:	440a      	add	r2, r1
 8004a2a:	4291      	cmp	r1, r2
 8004a2c:	d100      	bne.n	8004a30 <memcpy+0xc>
 8004a2e:	bd10      	pop	{r4, pc}
 8004a30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a38:	e7f7      	b.n	8004a2a <memcpy+0x6>

08004a3a <memmove>:
 8004a3a:	4288      	cmp	r0, r1
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	eb01 0302 	add.w	r3, r1, r2
 8004a42:	d807      	bhi.n	8004a54 <memmove+0x1a>
 8004a44:	1e42      	subs	r2, r0, #1
 8004a46:	4299      	cmp	r1, r3
 8004a48:	d00a      	beq.n	8004a60 <memmove+0x26>
 8004a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a52:	e7f8      	b.n	8004a46 <memmove+0xc>
 8004a54:	4283      	cmp	r3, r0
 8004a56:	d9f5      	bls.n	8004a44 <memmove+0xa>
 8004a58:	1881      	adds	r1, r0, r2
 8004a5a:	1ad2      	subs	r2, r2, r3
 8004a5c:	42d3      	cmn	r3, r2
 8004a5e:	d100      	bne.n	8004a62 <memmove+0x28>
 8004a60:	bd10      	pop	{r4, pc}
 8004a62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a6a:	e7f7      	b.n	8004a5c <memmove+0x22>

08004a6c <__malloc_lock>:
 8004a6c:	4770      	bx	lr

08004a6e <__malloc_unlock>:
 8004a6e:	4770      	bx	lr

08004a70 <_free_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	4605      	mov	r5, r0
 8004a74:	2900      	cmp	r1, #0
 8004a76:	d043      	beq.n	8004b00 <_free_r+0x90>
 8004a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a7c:	1f0c      	subs	r4, r1, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	bfb8      	it	lt
 8004a82:	18e4      	addlt	r4, r4, r3
 8004a84:	f7ff fff2 	bl	8004a6c <__malloc_lock>
 8004a88:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <_free_r+0x94>)
 8004a8a:	6813      	ldr	r3, [r2, #0]
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	b933      	cbnz	r3, 8004a9e <_free_r+0x2e>
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	6014      	str	r4, [r2, #0]
 8004a94:	4628      	mov	r0, r5
 8004a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a9a:	f7ff bfe8 	b.w	8004a6e <__malloc_unlock>
 8004a9e:	42a3      	cmp	r3, r4
 8004aa0:	d90b      	bls.n	8004aba <_free_r+0x4a>
 8004aa2:	6821      	ldr	r1, [r4, #0]
 8004aa4:	1862      	adds	r2, r4, r1
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	bf01      	itttt	eq
 8004aaa:	681a      	ldreq	r2, [r3, #0]
 8004aac:	685b      	ldreq	r3, [r3, #4]
 8004aae:	1852      	addeq	r2, r2, r1
 8004ab0:	6022      	streq	r2, [r4, #0]
 8004ab2:	6063      	str	r3, [r4, #4]
 8004ab4:	6004      	str	r4, [r0, #0]
 8004ab6:	e7ed      	b.n	8004a94 <_free_r+0x24>
 8004ab8:	4613      	mov	r3, r2
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	b10a      	cbz	r2, 8004ac2 <_free_r+0x52>
 8004abe:	42a2      	cmp	r2, r4
 8004ac0:	d9fa      	bls.n	8004ab8 <_free_r+0x48>
 8004ac2:	6819      	ldr	r1, [r3, #0]
 8004ac4:	1858      	adds	r0, r3, r1
 8004ac6:	42a0      	cmp	r0, r4
 8004ac8:	d10b      	bne.n	8004ae2 <_free_r+0x72>
 8004aca:	6820      	ldr	r0, [r4, #0]
 8004acc:	4401      	add	r1, r0
 8004ace:	1858      	adds	r0, r3, r1
 8004ad0:	4282      	cmp	r2, r0
 8004ad2:	6019      	str	r1, [r3, #0]
 8004ad4:	d1de      	bne.n	8004a94 <_free_r+0x24>
 8004ad6:	6810      	ldr	r0, [r2, #0]
 8004ad8:	6852      	ldr	r2, [r2, #4]
 8004ada:	4401      	add	r1, r0
 8004adc:	6019      	str	r1, [r3, #0]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	e7d8      	b.n	8004a94 <_free_r+0x24>
 8004ae2:	d902      	bls.n	8004aea <_free_r+0x7a>
 8004ae4:	230c      	movs	r3, #12
 8004ae6:	602b      	str	r3, [r5, #0]
 8004ae8:	e7d4      	b.n	8004a94 <_free_r+0x24>
 8004aea:	6820      	ldr	r0, [r4, #0]
 8004aec:	1821      	adds	r1, r4, r0
 8004aee:	428a      	cmp	r2, r1
 8004af0:	bf01      	itttt	eq
 8004af2:	6811      	ldreq	r1, [r2, #0]
 8004af4:	6852      	ldreq	r2, [r2, #4]
 8004af6:	1809      	addeq	r1, r1, r0
 8004af8:	6021      	streq	r1, [r4, #0]
 8004afa:	6062      	str	r2, [r4, #4]
 8004afc:	605c      	str	r4, [r3, #4]
 8004afe:	e7c9      	b.n	8004a94 <_free_r+0x24>
 8004b00:	bd38      	pop	{r3, r4, r5, pc}
 8004b02:	bf00      	nop
 8004b04:	20000094 	.word	0x20000094

08004b08 <_realloc_r>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	460e      	mov	r6, r1
 8004b10:	b921      	cbnz	r1, 8004b1c <_realloc_r+0x14>
 8004b12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004b16:	4611      	mov	r1, r2
 8004b18:	f7ff b8a8 	b.w	8003c6c <_malloc_r>
 8004b1c:	b922      	cbnz	r2, 8004b28 <_realloc_r+0x20>
 8004b1e:	f7ff ffa7 	bl	8004a70 <_free_r>
 8004b22:	4625      	mov	r5, r4
 8004b24:	4628      	mov	r0, r5
 8004b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b28:	f000 f848 	bl	8004bbc <_malloc_usable_size_r>
 8004b2c:	42a0      	cmp	r0, r4
 8004b2e:	d20f      	bcs.n	8004b50 <_realloc_r+0x48>
 8004b30:	4621      	mov	r1, r4
 8004b32:	4638      	mov	r0, r7
 8004b34:	f7ff f89a 	bl	8003c6c <_malloc_r>
 8004b38:	4605      	mov	r5, r0
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	d0f2      	beq.n	8004b24 <_realloc_r+0x1c>
 8004b3e:	4631      	mov	r1, r6
 8004b40:	4622      	mov	r2, r4
 8004b42:	f7ff ff6f 	bl	8004a24 <memcpy>
 8004b46:	4631      	mov	r1, r6
 8004b48:	4638      	mov	r0, r7
 8004b4a:	f7ff ff91 	bl	8004a70 <_free_r>
 8004b4e:	e7e9      	b.n	8004b24 <_realloc_r+0x1c>
 8004b50:	4635      	mov	r5, r6
 8004b52:	e7e7      	b.n	8004b24 <_realloc_r+0x1c>

08004b54 <_read_r>:
 8004b54:	b538      	push	{r3, r4, r5, lr}
 8004b56:	4605      	mov	r5, r0
 8004b58:	4608      	mov	r0, r1
 8004b5a:	4611      	mov	r1, r2
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4c05      	ldr	r4, [pc, #20]	; (8004b74 <_read_r+0x20>)
 8004b60:	6022      	str	r2, [r4, #0]
 8004b62:	461a      	mov	r2, r3
 8004b64:	f7fc fbbe 	bl	80012e4 <_read>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_read_r+0x1e>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_read_r+0x1e>
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	200001ac 	.word	0x200001ac

08004b78 <_fstat_r>:
 8004b78:	b538      	push	{r3, r4, r5, lr}
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	4c06      	ldr	r4, [pc, #24]	; (8004b98 <_fstat_r+0x20>)
 8004b7e:	4605      	mov	r5, r0
 8004b80:	4608      	mov	r0, r1
 8004b82:	4611      	mov	r1, r2
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	f7fc fbf1 	bl	800136c <_fstat>
 8004b8a:	1c43      	adds	r3, r0, #1
 8004b8c:	d102      	bne.n	8004b94 <_fstat_r+0x1c>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	b103      	cbz	r3, 8004b94 <_fstat_r+0x1c>
 8004b92:	602b      	str	r3, [r5, #0]
 8004b94:	bd38      	pop	{r3, r4, r5, pc}
 8004b96:	bf00      	nop
 8004b98:	200001ac 	.word	0x200001ac

08004b9c <_isatty_r>:
 8004b9c:	b538      	push	{r3, r4, r5, lr}
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	4c05      	ldr	r4, [pc, #20]	; (8004bb8 <_isatty_r+0x1c>)
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	4608      	mov	r0, r1
 8004ba6:	6023      	str	r3, [r4, #0]
 8004ba8:	f7fc fbef 	bl	800138a <_isatty>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_isatty_r+0x1a>
 8004bb0:	6823      	ldr	r3, [r4, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_isatty_r+0x1a>
 8004bb4:	602b      	str	r3, [r5, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	200001ac 	.word	0x200001ac

08004bbc <_malloc_usable_size_r>:
 8004bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bc0:	1f18      	subs	r0, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bfbc      	itt	lt
 8004bc6:	580b      	ldrlt	r3, [r1, r0]
 8004bc8:	18c0      	addlt	r0, r0, r3
 8004bca:	4770      	bx	lr

08004bcc <_init>:
 8004bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bce:	bf00      	nop
 8004bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bd2:	bc08      	pop	{r3}
 8004bd4:	469e      	mov	lr, r3
 8004bd6:	4770      	bx	lr

08004bd8 <_fini>:
 8004bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bda:	bf00      	nop
 8004bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bde:	bc08      	pop	{r3}
 8004be0:	469e      	mov	lr, r3
 8004be2:	4770      	bx	lr
